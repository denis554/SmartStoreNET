@model MegaMenuNavigationModel
@using SmartStore.Collections;
@using SmartStore.MegaMenu.Domain;
@using SmartStore.MegaMenu.Models;

@{
    Layout = "";
    Html.AddCssFileParts(true, "~/Plugins/SmartStore.MegaMenu/Content/smartstore.megamenu.css");
    Html.AppendScriptParts(true, "~/Plugins/SmartStore.MegaMenu/Scripts/smartstore.megamenu.js");
}

@functions {

    private int currentColumnItemCount = 0;
    private int currentColumnCount = 1;
    private int maxColumnCount = 4;

    private string GetNodeLink(TreeNode<MenuItem> node)
    {
        return node.Value.GenerateUrl(this.Url);
    }

    private string GetCssClassForNode(TreeNode<MenuItem> node, NodePathState state)
    {
        var liClasses = new List<string>();

        liClasses.Add("nav-item");

        if (node.Depth <= 1 && node.HasChildren)
        {
            liClasses.Add(node.Depth > 0 ? "dropdown-submenu" : "dropdown");
        }

        return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
    }

    private bool CloseColumn(TreeNode<MenuItem> nextSibling, MegaMenuDropdownModel dropdownModel)
    {
        // no wrap
        if (nextSibling != null && !dropdownModel.AllowSubItemsColumnWrap)
        {
            var nextSiblingChildren = nextSibling.Children.Count > dropdownModel.MaxSubItemsPerCategory ? dropdownModel.MaxSubItemsPerCategory : nextSibling.Children.Count;
            nextSiblingChildren++;

            if (currentColumnItemCount + nextSiblingChildren >= dropdownModel.MaxItemsPerColumn)
            {
                if (currentColumnCount == maxColumnCount)
                {
                    return false;
                }
                currentColumnCount++;
                currentColumnItemCount = 0;
                return true;
            }
        }

        // wrap
        if (currentColumnItemCount == dropdownModel.MaxItemsPerColumn)
        {
            if (currentColumnCount == maxColumnCount)
            {
                return false;
            }
            currentColumnCount++;
            currentColumnItemCount = 0;
            return true ;
        }

        return false;
    }

    private bool ShouldRender(TreeNode<MenuItem> node, MegaMenuDropdownModel dropdownModel)
    {
        if (!node.Value.Visible)
        {
            return false;
        }
        
        var nodeChildren = node.Children.Count > dropdownModel.MaxSubItemsPerCategory ? dropdownModel.MaxSubItemsPerCategory : node.Children.Count;
        nodeChildren++;

        if ((dropdownModel.MaxItemsPerColumn >= nodeChildren + currentColumnItemCount) || dropdownModel.AllowSubItemsColumnWrap)
        {
            return true;
        }

        return false;
    }
}

@if (!GetThemeVariable<bool>("DisplayNavbar", true))
{
    return;
}

<div class="megamenu">

    <div class="megamenu-navigate-prev">
        <a href="#" class="btn btn-icon btn-secondary"><i class="fa fa-chevron-left"></i></a>
    </div>

    <ul class="nav navbar-nav">

        @Html.Widget("megamenu_before_first_item")

        @foreach (var node in Model.NavigationModel.Root.Children)
        {
            var item = node.Value;

            if (!item.Visible)
            {
                continue;
            }

            var itemUrl = GetNodeLink(node);
            var itemState = node.GetNodePathState(Model.NavigationModel.Path);

            <li class='@(GetCssClassForNode(node, itemState))'>
                @if (node.HasChildren)
                {
                    <a href="@itemUrl" class="nav-link dropdown-toggle" data-toggle="dropdown" aria-expanded="false" data-target="#dropdown-menu-@node.Value.EntityId">
                        @item.Text
                    </a>
                }
                else
                {
                    <a href="@itemUrl" class="nav-link">
                        @item.Text
                    </a>
                }

                @if (!String.IsNullOrEmpty(item.BadgeText))
                {
                    <label class="label label-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
                }

            </li>
        }

        @Html.Widget("megamenu_after_last_item")

    </ul>

    <div class="megamenu-navigate-next">
        <a href="#" class="btn btn-icon btn-secondary"><i class="fa fa-chevron-right"></i></a>
    </div>
</div>

<div class="megamenu-dropdown-container">
    @foreach (var node in Model.NavigationModel.Root.Children)
    {
        currentColumnItemCount = 0;

        var dropdownModel = node.GetMetadata<MegaMenuDropdownModel>("MegamenuModel", true);

        if (dropdownModel.IsActive)
        {
            @CreateDropdownMenu(node.Children, node, dropdownModel)
        }
    }
</div>

@helper CreateDropdownMenu(IEnumerable<TreeNode<MenuItem>> nodes, TreeNode<MenuItem> parent, MegaMenuDropdownModel dropdownModel)
{
    var i = 1;
    maxColumnCount = parent.Value.ImageUrl.HasValue() && dropdownModel.DisplayCategoryPicture ? 3 : 4;

    if(dropdownModel.TeaserType == TeaserType.Rotator)
    {
        maxColumnCount = maxColumnCount - 1;
    }
    else if (dropdownModel.TeaserType == TeaserType.Html)
    {
        maxColumnCount = maxColumnCount - dropdownModel.HtmlColumnSpan;
    }

    currentColumnCount = 1;

    @Html.Widget("megamenu_dropdown_top")

    <div id="dropdown-menu-@parent.Value.EntityId" data-entity-id="@parent.Value.EntityId">
        <div class="dropdown-menu mega-menu-dropdown@(dropdownModel.DisplaySubItemsInline ? " comma-separated" : "")">

            @if(dropdownModel.DisplayBgPicture)
            {
                <div class="picture-container" style="@dropdownModel.BgCss">

                    @if (!String.IsNullOrEmpty(dropdownModel.BgLink))
                    {
                        <a href="@dropdownModel.BgLink"><img src="@dropdownModel.BgPicturePath" border="0" /></a>
                    }
                    else
                    {
                        <img src="@dropdownModel.BgPicturePath" border="0" />
                    }
                </div>
            }

            <div class="row">
                @if(parent.Value.ImageUrl.HasValue() && dropdownModel.DisplayCategoryPicture)
                {
                    <div class="col-md-3 text-xs-center megamenu-cat-img">
                        <img src="@parent.Value.ImageUrl" />

                        <div class="below-preview-pic-text text-xs-left">
                            @Html.Raw(dropdownModel.Summary)
                        </div>
                    </div>
                }

                <div class="col-md-3">

                    @foreach (var node in nodes)
                    {
                        var item = node.Value;

                        if (!ShouldRender(node, dropdownModel))
                        {
                            continue;
                        }

                        currentColumnItemCount++;
                        var itemUrl = GetNodeLink(node);
                        var itemState = node.GetNodePathState(Model.NavigationModel.Path);

                        <a class='mega-menu-dropdown-heading @((itemState & NodePathState.Selected) == NodePathState.Selected ? " active" : "")' href="@itemUrl">
                            @item.Text @*(@currentColumnItemCount)*@


                            @if (!String.IsNullOrEmpty(item.BadgeText))
                            {
                                <label class="label label-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
                            }

                        </a>

                        if (CloseColumn(null, dropdownModel))
                        {
                            @:</div><div class="col-md-3">
                        }

                        @CreateSubMenu(node.Children, dropdownModel);

                        if (i++ == dropdownModel.MaxItemsPerColumn)
                        {
                            break;
                        }
                    }
                </div>

                @if (dropdownModel.TeaserType == TeaserType.Html)
                {
                    var colWidth = 3 * dropdownModel.HtmlColumnSpan;
                    <div class="col-md-@colWidth.ToString() megamenu-html-text">
                        @Html.Raw(dropdownModel.TeaserHtml)
                    </div>
                }
                else if (dropdownModel.TeaserType == TeaserType.Rotator)
                {
                    if (currentColumnCount <= 3)
                    {
                        var colWidth = 3 * (maxColumnCount - currentColumnCount);
                        <div class="col-md-@colWidth.ToString()"></div>
                    }

                    <div class="col-md-3 rotator-@parent.Value.EntityId"></div>
                }
            </div>
        </div>
    </div>

    @Html.Widget("megamenu_dropdown_bottom")
}

@helper CreateSubMenu(IEnumerable<TreeNode<MenuItem>> nodes, MegaMenuDropdownModel dropdownModel)
{
    var i = 1;

    foreach (var node in nodes)
    {
        var item = node.Value;

        if (!item.Visible)
        {
            continue;
        }
        currentColumnItemCount++;
        
        var itemUrl = GetNodeLink(node);
        var itemState = node.GetNodePathState(Model.NavigationModel.Path);
        
        <a class='mega-menu-subitem @((itemState & NodePathState.Selected) == NodePathState.Selected ? " active" : "")' href="@itemUrl">
            @item.Text @*(@currentColumnItemCount)*@
            @if (!String.IsNullOrEmpty(item.BadgeText))
            {
                <label class="label label-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
            }
        </a>

        if (dropdownModel.DisplaySubItemsInline && (i != dropdownModel.MaxSubItemsPerCategory) && (i != nodes.Count()))
        {
            <span class="comma">,</span>
        }

        if (i++ == dropdownModel.MaxSubItemsPerCategory)
        {
            var parentUrl = GetNodeLink(node.Parent);
            <a class='mega-menu-subitem more-link' href="@parentUrl">mehr...</a>
            break;
        }

        if (CloseColumn(node.Parent.Next, dropdownModel))
        {
            @:</div><div class="col-md-3">
        }
    }
}

    
<script type="text/javascript">
    $(function () {
        var megamenu = $(".megamenu-container").megaMenu({
            productRotatorAjaxUrl: "@(Url.Action("RotatorProducts", "Megamenu", new RouteValueDictionary() { { "area", "SmartStore.MegaMenu" } }))",
            productRotatorInterval:     @Model.Settings.ProductRotatorInterval,
            productRotatorDuration:     @Model.Settings.ProductRotatorDuration,
            productRotatorCycle:        @(Model.Settings.ProductRotatorCycle ? "true" : "false"),
        });
    });
</script>

<style type="text/css">
    .mega-menu-dropdown {
        min-height: @(Model.Settings.MenuMinHeight)px;
    }
</style>


<script type="text/javascript">

    (function($) {
        // Depends on:
        // bootstrap 4
        // jquery.scrollTo.js

        $.fn.extend({
            megaMenu: function(settings) {

                var defaults = {
                    productRotatorInterval:     4000,
                    productRotatorDuration:     300,
                    productRotatorCycle:        false,
                    productRotatorAjaxUrl:      ""
                };

                var settings = $.extend(defaults, settings);

                return this.each(function () {

                    var megamenu = $(this);

                    $('.megamenu-dropdown-container').on('show.bs.dropdown', function (e) {
                        var id = e.target.id;
                        var link = $('.megamenu .nav-item [data-target="#' + id + '"]');
                        link.closest("li").addClass("active");
                    });

                    $('.megamenu-dropdown-container').on('hide.bs.dropdown', function (e) {
                        var id = e.target.id;
                        var link = $('.megamenu .nav-item [data-target="#' + id + '"]');
                        link.closest("li").removeClass("active");
                    });

                    $(".dropdown-submenu", megamenu).click(function () {

                        var clicked_elem = $(event.target).parent();
                        var wasOpened = clicked_elem.hasClass("active");

                        if (!wasOpened) {
                            
                            // TODO: only init if it wasn't loaded before
                            initRotator($(event.target).data("target"));
                        }
                    });

                    // prevent dropdowns from closing when clicking inside, to make product rotator work
                    $(document).on('click', '.dropdown-menu', function (e) {
                        e.stopPropagation();
                    });

                    // show scroll buttons when menu items don't fit into screen
                    $(window).resize(function () {

                        var liWidth = 0;
                        $(".megamenu li", megamenu).each(function () {
                            liWidth += $(this).width();
                        });

                        if (liWidth > megamenu.width()) {
                            megamenu.addClass("show-scroll-buttons");
                        }
                        else {
                            megamenu.removeClass("show-scroll-buttons");
                        }
                    }).trigger('resize');

                    //oh, oh, oh, oh, can't touch this ;-/
                    var hammertime = new Hammer($(".megamenu")[0]);
                    hammertime.add(new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 80, pointers: 1 }));

                    hammertime.on('panend', function (ev) {
                        if (ev.direction == Hammer.DIRECTION_LEFT) {
                            //$(".nav-slider", megamenu).trigger('next');
                            $(".megamenu-navigate-next", megamenu).trigger('click');
                        }
                        if (ev.direction == Hammer.DIRECTION_RIGHT) {
                            //$(".nav-slider", megamenu).trigger('prev');
                            $(".megamenu-navigate-prev", megamenu).trigger('click');
                        }
                    });

                    megamenu.evenIfHidden(function (el) {

                        var scrollCorrection = null;
                        var lastVisibleElem = null;
                        var firstVisibleElem = null;
                        var isFirstItemVisible = true;
                        var isLastItemVisible = false;

                        megamenu.find('ul').wrap('<div class="nav-slider" style="overflow: hidden;position: relative;" />');

                        getCurrentNavigationElements();

                        $(".megamenu-navigate-next").click(function() {
                            
                            /*
                            if (scrollCorrection == null) {
                                // item is only half visible
                                scrollCorrection = "+=" + ($(".nav-slider").width() - $(lastVisibleElem).position().left) + "px";
                            }
                            else {
                                // item is fully hidden 
                                */
                                scrollCorrection = "+=" + ($(lastVisibleElem).position().left + 30 + $(lastVisibleElem).width() - $(".nav-slider").width()) + "px";
                            //}
                            
                            $(".nav-slider").scrollTo(scrollCorrection, 400, {
                                onAfter: function() {
                                    getCurrentNavigationElements();
                                } 
                            });    
                        });

                        $(".megamenu-navigate-prev").click(function() {
                            $(".nav-slider").scrollTo(firstVisibleElem, 400, {
                                offset: { left: -20 },
                                onAfter: function() {
                                    getCurrentNavigationElements();
                                } 
                            });
                        });

                        function getCurrentNavigationElements() {
                            firstVisibleElem = null;
                            var p = $(".nav-slider", megamenu);
                            var items = megamenu.find(".nav-item");

                            items.each(function (i, val) {
    
                                var el = $(val);

                                if((el.offset().left > p.offset().left) && firstVisibleElem == null)
                                {
                                    firstVisibleElem = $(val).prev();
                                    
                                    if(firstVisibleElem.position().left == 0) 
                                        isFirstItemVisible = true;
                                    else
                                        isFirstItemVisible = false;
                                }

                                // if visible
                                if (el.offset().left + el.width() > p.offset().left + p.width()) {
                                    
                                    lastVisibleElem = $(val);
                                    
                                    if(parseInt(el.offset().left) + parseInt(el.width()) == parseInt(p.offset().left) + parseInt(p.width())) 
                                        isLastItemVisible = true;
                                    else
                                        isLastItemVisible = false;

                                    // we've got everything we need, so get out of here
                                    return false;
                                }
                            });

                            // show or hide navigation buttons depending on whether first or last navitems are displayed
                            if(isFirstItemVisible)
                                megamenu.find('.megamenu-navigate-prev').css("display", "none");
                            else 
                                megamenu.find('.megamenu-navigate-prev').css("display", "block");

                            if(isLastItemVisible)
                                megamenu.find('.megamenu-navigate-next').css("display", "none");
                            else 
                                megamenu.find('.megamenu-navigate-next').css("display", "block");
                        }
                    });

                    function initRotator(containerId) {

                        var container = $(containerId);
                        var catId = container.data("entity-id");

                        if ($(".pl-slider", container).length == 0 && catId != null) {

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: settings.productRotatorAjaxUrl,
                                data: { "catId": catId },
                                success: function (data) {

                                    // add html view
                                    $(".rotator-" + catId).html(data);

                                    // init scrolling
                                    $(".mega-menu-product-rotator.scroll", container).productListScroller({
                                        interval: settings.productRotatorInterval,
                                        cycle: settings.productRotatorCycle,
                                        duration: settings.productRotatorDuration
                                    });

                                    // add buttons
                                    container.find(".sb").scrollButton({
                                        nearSize: 36,
                                        farSize: "50%",
                                        target: $(".pl-slider", container),
                                        showButtonAlways: true,
                                        autoPosition: true,
                                        position: "inside",
                                        offset: -100,
                                        handleCorners: true,
                                        smallIcons: true,
                                        isBtnGroup: true,
                                        btnType: "primary"
                                    });

                                    // and now its hammertime
                                    var hammertime = new Hammer($(".mega-menu-product-rotator.scroll", container)[0]);
                                    hammertime.add(new Hammer.Pan({ direction: Hammer.DIRECTION_HORIZONTAL, threshold: 80, pointers: 1 }));

                                    hammertime.on('panend', function (ev) {
                                        if (ev.direction == Hammer.DIRECTION_LEFT) {
                                            $(".mega-menu-product-rotator.scroll .pl-slider", container).trigger('next');
                                        }
                                        if (ev.direction == Hammer.DIRECTION_RIGHT) {
                                            $(".mega-menu-product-rotator.scroll .pl-slider", container).trigger('prev');
                                        }
                                    });
                                }
                            });
                        }
                    }
                })
            }
        });
    })(jQuery);
</script>

<style type="text/css">

.megamenu-container {
    position: relative;
}
.megamenu {
    overflow: hidden;
    position: relative;
}
.show-scroll-buttons .megamenu .nav-slider {
    margin: 0 20px;
}
.megamenu ul.nav {
    width: 5000px;
}
.megamenu-navigate-prev,
.megamenu-navigate-next {
    position: absolute;
    top: 0;
    /*display: none;*/
}
/*
.show-scroll-buttons .megamenu-navigate-prev,
.show-scroll-buttons .megamenu-navigate-next {
    display: block;
}
*/
.megamenu-navigate-next {
    right: 0;
}
.megamenu-navigate-prev .btn,
.megamenu-navigate-next .btn {
    padding: 0;
    font-size: 1.2rem;
}


.megamenu-container .megamenu-dropdown-container {
    position: relative;
}
.megamenu-container .mega-menu-dropdown {
    z-index: 1007;
    width: 100%;
    top: -3px;
    background-repeat: no-repeat;
    background-position: bottom right;
    padding: 1.5rem;
}
.megamenu-container .dropdown-menu .col-md-3 {
    overflow: hidden;
}
.megamenu-container .mega-menu-dropdown-heading:not(:first-child) {
    padding-top: 1rem;
    /*
    border-top: 1px solid #eaeaea;
    margin-top: .375rem;
    */
}
.megamenu-container .mega-menu-dropdown-heading {
    font-size: 1rem;
    font-weight: 600;
    line-height: 1.4rem;
    text-decoration: none;
    display: block;
    color: #222;
    padding-bottom: .4rem;
}

.megamenu-container .mega-menu-dropdown-heading + .mega-menu-dropdown-heading {
    padding-top: .5rem;
}

.megamenu-container .mega-menu-dropdown-heading label {
    vertical-align: top;
}

.megamenu-container .mega-menu-subitem {
    font-size: .875rem;
    text-decoration: none;
    display: block;
    color: #999;
}
.megamenu-container .mega-menu-subitem:hover {
    color: #222;
} 

.megamenu-container .mega-menu-subitem.more-link {
    font-weight: bold;
    color: #464646;
    font-size: .825rem;
}
.megamenu-container .comma-separated .mega-menu-subitem {
    display: inline;
    margin-right: -.15rem;
}
.megamenu-container .comma-separated .mega-menu-subitem,
.megamenu-container .comma-separated .comma { 

}
.megamenu-container .comma-separated .mega-menu-subitem.more-link {
    display: block;
}

.megamenu-container .picture-container {
    position: absolute;
    right: 0;
    bottom: 0;
}



.megamenu-container .comma-separated .mega-menu-subitem:focus, 
.megamenu-container .comma-separated .mega-menu-subitem:hover {
    background-color: transparent;
    color: #888;
}
.megamenu-container .megamenu-cat-img img {
    max-width: 100%;
    max-height: 100%;
    padding: 20px;
}
.megamenu-container .below-preview-pic-text {
    margin: 10px;
    font-size: .875rem;
}

.megamenu-container .megamenu-html-text {
    overflow: hidden;
}

.navbar {
    padding: 0;
}
.megamenu-container .nav-item,
.megamenu-navigate-prev,
.megamenu-navigate-next {
    padding: .5rem 0;
}
.megamenu ul.nav .nav-item {
    z-index: 1100;
    position: relative;
}
.megamenu ul.nav .nav-item .label {
    position: absolute;
    right: 3px;
    top: 7px;
    font-size: 0.7rem;
}

/* TODO: correct enum BadgeStyle, determine valid entries for bs4 */
.label-important {
    background: #0275d8; /* $brand-primary */
}
.label-inverse {
    background: #d9534f; /* $brand-danger */
}


.megamenu-container .nav-item.active:before {
    content: "";
    left: 50%;
    position: absolute;
    border-bottom: 15px solid #fff;
    border-right: 17px solid transparent;
    border-left: 17px solid transparent;
    bottom: -1px;
    margin-left: -17px;
    z-index: 1010;
}
.megamenu-container .nav-item.active:after {
    content: "";
    left: 50%;
    position: absolute;
    border-bottom: 17px solid #bbb;
    border-right: 19px solid transparent;
    border-left: 19px solid transparent;
    bottom: -2px;
    margin-left: -19px;
    z-index: 1008;
}

.mega-menu-product-rotator .pl-row,
.mega-menu-product-rotator .item-box {
    width: 100%;
    border: none;
}

.mega-menu-product-rotator.scroll article {
    min-width: 245px;
    max-width: 245px;
}


.mega-menu-product-rotator.scroll .btn-group {
    width: 100%;
}

.mega-menu-product-rotator.scroll .scroll-button {
    bottom: 12px;
    top: initial !important;
    position: initial;
}
.mega-menu-product-rotator.scroll .scroll-button i {
    width: initial;
}


.megamenu-navigate-next .btn,
.megamenu-navigate-prev .btn {
    border: none;
    box-shadow: none;
    position: relative;
    z-index: 10000;
}
.megamenu-navigate-prev .btn:active:focus,
.megamenu-navigate-prev .btn {
    background: -webkit-linear-gradient(right, rgba(0,0,0,0), #f7f7f7 30%, #f7f7f7 100%);
}
.megamenu-navigate-next .btn:active:focus,
.megamenu-navigate-next .btn {
    background: -webkit-linear-gradient(left, rgba(0,0,0,0), #f7f7f7 30%, #f7f7f7 100%);
}

/*
.megamenu-navigate-prev {
    display: none;
}
*/

</style>
