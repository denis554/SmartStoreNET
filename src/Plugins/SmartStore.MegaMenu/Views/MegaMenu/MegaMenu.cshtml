@model MegaMenuNavigationModel
@using SmartStore.Collections;
@using SmartStore.MegaMenu.Domain;
@using SmartStore.MegaMenu.Models;

@{
    Layout = "";
    Html.AddCssFileParts(true, Url.Content("~/Plugins/SmartStore.MegaMenu/Content/smartstore.megamenu.css"));
    Html.AppendScriptParts(true, Url.Content("~/Plugins/SmartStore.MegaMenu/Scripts/smartstore.megamenu.js"));
}

@functions {

    private int currentColumnItemCount = 0;
    private int currentColumnCount = 1;
    private int maxColumnCount = 4;

    private string GetNodeLink(TreeNode<MenuItem> node)
    {
        return node.Value.GenerateUrl(this.Url);
    }

    private string GetCssClassForNode(TreeNode<MenuItem> node, NodePathState state)
    {
        var liClasses = new List<string>();

        liClasses.Add("nav-item");

        if (node.Depth <= 1 && node.HasChildren)
        {
            liClasses.Add(node.Depth > 0 ? "dropdown-submenu" : "dropdown");
        }

        return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
    }

    private bool CloseColumn(TreeNode<MenuItem> nextSibling, MegaMenuDropdownModel dropdownModel)
    {
        // no wrap
        if (nextSibling != null && !dropdownModel.AllowSubItemsColumnWrap)
        {
            var nextSiblingChildren = nextSibling.Children.Count > dropdownModel.MaxSubItemsPerCategory ? dropdownModel.MaxSubItemsPerCategory : nextSibling.Children.Count;
            nextSiblingChildren++;

            if (currentColumnItemCount + nextSiblingChildren >= dropdownModel.MaxItemsPerColumn)
            {
                if (currentColumnCount == maxColumnCount)
                {
                    return false;
                }
                currentColumnCount++;
                currentColumnItemCount = 0;
                return true;
            }
        }

        // wrap
        if (currentColumnItemCount == dropdownModel.MaxItemsPerColumn)
        {
            if (currentColumnCount == maxColumnCount)
            {
                return false;
            }
            currentColumnCount++;
            currentColumnItemCount = 0;
            return true ;
        }

        return false;
    }

    private bool ShouldRender(TreeNode<MenuItem> node, MegaMenuDropdownModel dropdownModel)
    {
        if (!node.Value.Visible)
        {
            return false;
        }
        
        var nodeChildren = node.Children.Count > dropdownModel.MaxSubItemsPerCategory ? dropdownModel.MaxSubItemsPerCategory : node.Children.Count;
        nodeChildren++;

        if (((dropdownModel.MaxItemsPerColumn >= nodeChildren + currentColumnItemCount) || dropdownModel.AllowSubItemsColumnWrap) && node.Children.Count >= dropdownModel.MinChildCategoryThreshold)
        {
            return true;
        }

        return false;
    }
}

@if (!GetThemeVariable<bool>("DisplayNavbar", true))
{
    return;
}


<style type="text/css">
    .mega-menu-dropdown {
        min-height: @(Model.Settings.MenuMinHeight)px;
    }
</style>

<div class="megamenu megamenu--blend-next">

    <div class="megamenu-nav megamenu-nav--prev">
        <a href="#" class="megamenu-nav-btn btn btn-icon"><i class="fa fa-angle-left"></i></a>
    </div>

    <ul class="nav navbar-nav">

        @Html.Widget("megamenu_before_first_item")

        @foreach (var node in Model.NavigationModel.Root.Children)
        {
            var item = node.Value;

            if (!item.Visible)
            {
                continue;
            }

            var itemUrl = GetNodeLink(node);
            var itemState = node.GetNodePathState(Model.NavigationModel.Path);

            <li class='@(GetCssClassForNode(node, itemState))'>
                @if (node.HasChildren)
                {
                    <a href="@itemUrl" class="nav-link dropdown-toggle" x-data-toggle="dropdown" aria-expanded="false" data-target="#dropdown-menu-@node.Value.EntityId">
                        @item.Text
                    </a>
                }
                else
                {
                    <a href="@itemUrl" class="nav-link">
                        @item.Text
                    </a>
                }

                @if (!String.IsNullOrEmpty(item.BadgeText))
                {
                    <label class="label label-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
                }

            </li>
        }

        @Html.Widget("megamenu_after_last_item")

    </ul>

    <div class="megamenu-nav megamenu-nav--next">
        <a href="#" class="megamenu-nav-btn btn btn-icon"><i class="fa fa-angle-right"></i></a>
    </div>
</div>

<div class="megamenu-dropdown-container">
    @foreach (var node in Model.NavigationModel.Root.Children)
    {
        currentColumnItemCount = 0;

        var dropdownModel = node.GetMetadata<MegaMenuDropdownModel>("MegamenuModel", true);

        if (dropdownModel.IsActive)
        {
            @CreateDropdownMenu(node.Children, node, dropdownModel)
        }
    }
</div>

@helper CreateDropdownMenu(IEnumerable<TreeNode<MenuItem>> nodes, TreeNode<MenuItem> parent, MegaMenuDropdownModel dropdownModel)
{
    var i = 1;
    maxColumnCount = parent.Value.ImageUrl.HasValue() && dropdownModel.DisplayCategoryPicture ? 3 : 4;

    if(dropdownModel.TeaserType == TeaserType.Rotator)
    {
        maxColumnCount = maxColumnCount - 1;
    }
    else if (dropdownModel.TeaserType == TeaserType.Html)
    {
        maxColumnCount = maxColumnCount - dropdownModel.HtmlColumnSpan;
    }

    currentColumnCount = 1;

    @Html.Widget("megamenu_dropdown_top")

    <div id="dropdown-menu-@parent.Value.EntityId" class="" data-entity-id="@parent.Value.EntityId" data-display-rotator="@((!String.IsNullOrEmpty(dropdownModel.TeaserRotatorProductIds)).ToString().ToLower())">
        <div class="dropdown-menu mega-menu-dropdown@(dropdownModel.DisplaySubItemsInline ? " comma-separated" : "")">

            @if(dropdownModel.DisplayBgPicture)
            {
                <div class="picture-container" style="@dropdownModel.BgCss">

                    @if (!String.IsNullOrEmpty(dropdownModel.BgLink))
                    {
                        <a href="@dropdownModel.BgLink"><img src="@dropdownModel.BgPicturePath" border="0" /></a>
                    }
                    else
                    {
                        <img src="@dropdownModel.BgPicturePath" border="0" />
                    }
                </div>
            }

            <div class="row">
                @if(parent.Value.ImageUrl.HasValue() && dropdownModel.DisplayCategoryPicture)
                {
                    <div class="col-md-3 text-xs-center megamenu-cat-img">
                        <img src="@parent.Value.ImageUrl" />

                        <div class="below-preview-pic-text text-xs-left">
                            @Html.Raw(dropdownModel.Summary)
                        </div>
                    </div>
                }

                <div class="col-md-3">

                    @foreach (var node in nodes)
                    {
                        var item = node.Value;

                        if (!ShouldRender(node, dropdownModel))
                        {
                            continue;
                        }

                        currentColumnItemCount++;
                        var itemUrl = GetNodeLink(node);
                        var itemState = node.GetNodePathState(Model.NavigationModel.Path);

                        <a class='mega-menu-dropdown-heading @((itemState & NodePathState.Selected) == NodePathState.Selected ? " active" : "")' href="@itemUrl">
                            @item.Text @*(@currentColumnItemCount)*@


                            @if (!String.IsNullOrEmpty(item.BadgeText))
                            {
                                <label class="label label-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
                            }

                        </a>

                        if (CloseColumn(null, dropdownModel))
                        {
                            @:</div><div class="col-md-3">
                        }

                        @CreateSubMenu(node.Children, dropdownModel);

                        if (i++ == dropdownModel.MaxItemsPerColumn)
                        {
                            break;
                        }
                    }
                </div>

                @if (dropdownModel.TeaserType == TeaserType.Html)
                {
                    var colWidth = 3 * dropdownModel.HtmlColumnSpan;
                    <div class="col-md-@colWidth.ToString() megamenu-html-text">
                        @Html.Raw(dropdownModel.TeaserHtml)
                    </div>
                }
                else if (dropdownModel.TeaserType == TeaserType.Rotator)
                {
                    if (currentColumnCount <= 3)
                    {
                        var colWidth = 3 * (maxColumnCount - currentColumnCount);
                        <div class="col-md-@colWidth.ToString()"></div>
                    }

                    <div class="col-md-3 rotator-@parent.Value.EntityId">
                        <div class="rotator-heading text-xs-center">
                            <h4>@dropdownModel.RotatorHeading</h4>
                        </div>
                        <div class="rotator-content">
                            <div class="placeholder"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    @Html.Widget("megamenu_dropdown_bottom")
}

@helper CreateSubMenu(IEnumerable<TreeNode<MenuItem>> nodes, MegaMenuDropdownModel dropdownModel)
{
    var i = 1;

    if(dropdownModel.DisplaySubItemsInline)
    {
        @:<div class="inline-container">
    }

    foreach (var node in nodes)
    {
        var item = node.Value;

        if (!item.Visible)
        {
            continue;
        }
        currentColumnItemCount++;
        
        var itemUrl = GetNodeLink(node);
        var itemState = node.GetNodePathState(Model.NavigationModel.Path);
        
        <span class="mega-menu-subitem-wrap">
            <a class='mega-menu-subitem@((itemState & NodePathState.Selected) == NodePathState.Selected ? " active" : "")' href="@itemUrl">
                @item.Text @*(@currentColumnItemCount)*@
                @if (!String.IsNullOrEmpty(item.BadgeText) && !dropdownModel.DisplaySubItemsInline)
                {
                    <label class="label label-@item.BadgeStyle.ToString().ToLower()">@item.BadgeText</label>
                }
            </a>

            @if (dropdownModel.DisplaySubItemsInline && (i != dropdownModel.MaxSubItemsPerCategory) && (i != nodes.Count()))
            {
                <text>,</text>
            }
        </span>

        if (i++ == dropdownModel.MaxSubItemsPerCategory)
        {
            var parentUrl = GetNodeLink(node.Parent);
            <a class='mega-menu-subitem more-link' href="@parentUrl">mehr...</a>
            break;
        }

        if (CloseColumn(node.Parent.Next, dropdownModel))
        {
            if(dropdownModel.DisplaySubItemsInline)
            {
                @:</div></div><div class="col-md-3"><div class="empty">
            }
            else {
                @:</div><div class="col-md-3">
            }
        }
    }

    if(dropdownModel.DisplaySubItemsInline)
    {
        @:</div>
    }
}

<script type="text/javascript">
    $(function () {
        var megamenuContainer = $(".megamenu-container").megaMenu({
            productRotatorAjaxUrl:      "@(Url.Action("RotatorProducts", "Megamenu", new RouteValueDictionary() { { "area", "SmartStore.MegaMenu" } }))",
            productRotatorInterval:     @Model.Settings.ProductRotatorInterval,
            productRotatorDuration:     @Model.Settings.ProductRotatorDuration,
            productRotatorCycle:        @(Model.Settings.ProductRotatorCycle ? "true" : "false"),
        }); 
    });
</script>               