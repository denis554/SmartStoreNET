@model DropdownConfigurationModel

@using SmartStore.MegaMenu.Models;
@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.UI;

@{
    Layout = "";
}

@Html.Hidden("__Type__", Model.GetType().AssemblyQualifiedName)

@Html.HiddenFor(m => m.EntityId)
@Html.HiddenFor(m => m.CategoryId)

<div class="alert alert-info">
    @Html.Raw(@T("Plugins.SmartStore.MegaMenu.AdminInstructionCatMain").Text.FormatWith(
        Url.Action("ConfigurePlugin", "Plugin", new { area = "Admin", systemName = "SmartStore.MegaMenu" })
    ))
</div>

<table class="adminContent">
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.IsActive)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.IsActive)
            @Html.ValidationMessageFor(model => model.IsActive)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.FavorInMegamenu)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.FavorInMegamenu)
            @Html.ValidationMessageFor(model => model.FavorInMegamenu)
        </td>
    </tr>

    <tr>
        <td colspan="2">
            <div class="admin-config-group">
                <div class="title">Layout</div>
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.MaxItemsPerColumn)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.MaxItemsPerColumn)
            @Html.ValidationMessageFor(model => model.MaxItemsPerColumn)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.MaxSubItemsPerCategory)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.MaxSubItemsPerCategory)
            @Html.ValidationMessageFor(model => model.MaxSubItemsPerCategory)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.DisplaySubItemsInline)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.DisplaySubItemsInline)
            @Html.ValidationMessageFor(model => model.DisplaySubItemsInline)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.AllowSubItemsColumnWrap)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.AllowSubItemsColumnWrap)
            @Html.ValidationMessageFor(model => model.AllowSubItemsColumnWrap)
        </td>
    </tr>
    <tr class="item-wrap">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.SubItemsWrapTolerance)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.SubItemsWrapTolerance)
            @Html.ValidationMessageFor(model => model.SubItemsWrapTolerance)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.MinChildCategoryThreshold)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.MinChildCategoryThreshold)
            @Html.ValidationMessageFor(model => model.MinChildCategoryThreshold)
        </td>
    </tr>

    <tr>
        <td colspan="2">
            <div class="admin-config-group">
                <div class="title">
                    @T("Plugins.SmartStore.MegaMenu.BgPictures.Heading")
                </div>

                <div class="alert alert-info">
                    @T("Plugins.SmartStore.MegaMenu.BgPictures.AdminInstruction")
                </div>
            </div>
        </td>
    </tr>

    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.DisplayBgPicture)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.DisplayBgPicture)
            @Html.ValidationMessageFor(model => model.DisplayBgPicture)
        </td>
    </tr>
    <tr class="bg-picture">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.BgPictureId)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.BgPictureId)
            @Html.ValidationMessageFor(model => model.BgPictureId)
        </td>
    </tr>
</table>

@(Html.LocalizedEditor<DropdownConfigurationModel, DropdownConfigurationLocalizedModel>("mm-bg-link-localized",
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].BgLink)
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.Locales[item].BgLink, new { @style = "width: 600px" })
                @Html.ValidationMessageFor(model => model.Locales[item].BgLink)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
    ,
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BgLink)
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.BgLink, new { @style = "width: 600px" })
                @Html.ValidationMessageFor(model => model.BgLink)
            </td>
        </tr>
    </table>
))

<table class="adminContent">
    <tr class="bg-picture">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.BgAlignX)
        </td>
        <td class="adminData">
            @Html.DropDownListForEnum(model => model.BgAlignX)
            @Html.ValidationMessageFor(model => model.BgAlignX)
        </td>
    </tr>
    <tr class="bg-picture">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.BgAlignY)
        </td>
        <td class="adminData">
            @Html.DropDownListForEnum(model => model.BgAlignY)
            @Html.ValidationMessageFor(model => model.BgAlignY)
        </td>
    </tr>
    <tr class="bg-picture">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.BgOffsetX)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.BgOffsetX)
            @Html.ValidationMessageFor(model => model.BgOffsetX)
        </td>
    </tr>
    <tr class="bg-picture">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.BgOffsetY)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.BgOffsetY)
            @Html.ValidationMessageFor(model => model.BgOffsetY)
        </td>
    </tr>

    <tr>
        <td colspan="2">
            <div class="admin-config-group">
                <div class="title">
                    @T("Plugins.SmartStore.MegaMenu.ShortSummary.Heading")
                </div>

                <div class="alert alert-info">
                    @T("Plugins.SmartStore.MegaMenu.ShortSummary.AdminInstruction")
                </div>
            </div>
        </td>
    </tr>

    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.DisplayCategoryPicture)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.DisplayCategoryPicture)
            @Html.ValidationMessageFor(model => model.DisplayCategoryPicture)
        </td>
    </tr>
</table>

@(Html.LocalizedEditor<DropdownConfigurationModel, DropdownConfigurationLocalizedModel>("mm-short-summary",
    @<table class="adminContent">
         <tr class="cat-picture">
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => Model.Locales[item].Summary)
             </td>
             <td class="adminData">
                 @Html.TextAreaFor(model => Model.Locales[item].Summary, new { @style = "height:120px; width: 600px" })
                 @Html.ValidationMessageFor(model => Model.Locales[item].Summary)
             </td>
         </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
    ,
    @<table class="adminContent">
         <tr class="cat-picture">
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => model.Summary)
             </td>
             <td class="adminData">
                 @Html.TextAreaFor(model => model.Summary, new { @style = "height:120px; width: 600px" })
                 @Html.ValidationMessageFor(model => model.Summary)
             </td>
         </tr>
    </table>
))


<table class="adminContent">
    <tr>
        <td colspan="2">
            <div class="admin-config-group">
                <div class="title">
                    @T("Plugins.SmartStore.MegaMenu.Teaser.Heading")
                </div>

                <div class="alert alert-info">
                    @T("Plugins.SmartStore.MegaMenu.Teaser.AdminInstruction")
                </div>
            </div>
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.TeaserType)
        </td>
        <td class="adminData">
            @Html.DropDownListForEnum(model => model.TeaserType)
            @Html.ValidationMessageFor(model => model.TeaserType)
        </td>
    </tr>
</table>

@(Html.LocalizedEditor<DropdownConfigurationModel, DropdownConfigurationLocalizedModel>("mm-teaser-html",
    @<table class="adminContent">
         <tr class="toggle-teaser-html">
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => model.Locales[item].TeaserHtml)
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => model.Locales[item].TeaserHtml, new { @style = "width: 600px" })
                 @Html.ValidationMessageFor(model => model.Locales[item].TeaserHtml)
             </td>
         </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
    ,
    @<table class="adminContent">
         <tr class="toggle-teaser-html">
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => model.TeaserHtml)
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => model.TeaserHtml, new { @style = "width: 600px" })
                 @Html.ValidationMessageFor(model => model.TeaserHtml)
             </td>
         </tr>
    </table>
))

<table class="adminContent">
    <tr class="toggle-teaser-html">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.HtmlColumnSpan)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.HtmlColumnSpan)
            @Html.ValidationMessageFor(model => model.HtmlColumnSpan)
        </td>
    </tr>
</table>

@(Html.LocalizedEditor<DropdownConfigurationModel, DropdownConfigurationLocalizedModel>("mm-rotator-heading",
    @<table class="adminContent">
         <tr class="toggle-teaser-rotator">
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => model.Locales[item].RotatorHeading)
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => model.Locales[item].RotatorHeading, new { @style = "width: 600px" })
                 @Html.ValidationMessageFor(model => model.Locales[item].RotatorHeading)
             </td>
         </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
    ,
    @<table class="adminContent">
         <tr class="toggle-teaser-rotator">
             <td class="adminTitle">
                 @Html.SmartLabelFor(model => model.RotatorHeading)
             </td>
             <td class="adminData">
                 @Html.EditorFor(model => model.RotatorHeading, new { @style = "width: 600px" })
                 @Html.ValidationMessageFor(model => model.RotatorHeading)
             </td>
         </tr>
    </table>
))

<table class="adminContent">
    <tr class="toggle-teaser-rotator">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.TeaserRotatorItemSelectType)
        </td>
        <td class="adminData">
            @*@Html.DropDownListFor(model => model.TeaserRotatorItemSelectType, (List<SelectListItem>)ViewData["TeaserRotatorItemSelectType"])*@
            @Html.DropDownListForEnum(model => model.TeaserRotatorItemSelectType)
            @Html.ValidationMessageFor(model => model.TeaserRotatorItemSelectType)
        </td>
    </tr>
    <tr class="toggle-teaser-rotator">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.TeaserRotatorProductIds)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.TeaserRotatorProductIds, new { data_routeparam = "productIds" })

            <button type="button" class="btn" id="SearchRotatorProductsButton" data-loading-text="@(T("Common.Loading"))&hellip;">
                <i class="fa fa-search"></i>&nbsp;@T("Admin.Common.Search")
            </button>

            @Html.ValidationMessageFor(model => model.TeaserRotatorProductIds)
        </td>
    </tr>

    <tr class="toggle-teaser-rotator">
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.MaxRotatorItems)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.MaxRotatorItems)
            @Html.ValidationMessageFor(model => model.MaxRotatorItems)
        </td>
    </tr>

</table>

<script>
    // TODO: put this script in admin-script.js

    $(document).ready(function () {

        // display bg picture
        $("#@Html.FieldIdFor(model => model.DisplayBgPicture)").click(toggleBgPicture);

        function toggleBgPicture() {
            if ($('#@Html.FieldIdFor(model => model.DisplayBgPicture)').is(':checked')) {
                $('.bg-picture').show();
                $('#mm-bg-link-localized').closest(".well").show();
            }
            else {
                $('.bg-picture').hide();
                $('#mm-bg-link-localized').closest(".well").hide();
            }
        }

        // allow wrap
        $("#@Html.FieldIdFor(model => model.AllowSubItemsColumnWrap)").click(toggleItemWrap);

        function toggleItemWrap() {
            if ($('#@Html.FieldIdFor(model => model.AllowSubItemsColumnWrap)').is(':checked')) {
                $('.item-wrap').show();
            }
            else {
                $('.item-wrap').hide();
            }
        }

        // display cat pic
        $("#@Html.FieldIdFor(model => model.DisplayCategoryPicture)").click(toggleCategoryPicture);

        function toggleCategoryPicture() {
            if ($('#@Html.FieldIdFor(model => model.DisplayCategoryPicture)').is(':checked')) {
                $('.cat-picture').show();
                $('#mm-short-summary').closest(".well").show();
            }
            else {
                $('.cat-picture').hide();
                $('#mm-short-summary').closest(".well").hide();
            }
        }

        // teaser
        var fieldTeaserType = $("#@Html.FieldIdFor(model => model.TeaserType)");
        fieldTeaserType.on("change", toogleTeaserControls);

        function toogleTeaserControls() {
            var type = fieldTeaserType.val();

            switch (type) {
                case 'Html':
                    $('.toggle-teaser-html').show();
                    $('#mm-teaser-html').closest(".well").show();
                    $('.toggle-teaser-rotator').hide();
                    $('#mm-rotator-heading').closest(".well").hide();
                    break;
                case 'Rotator':
                    $('.toggle-teaser-html').hide();
                    $('#mm-teaser-html').closest(".well").hide();
                    $('.toggle-teaser-rotator').show();
                    $('#mm-rotator-heading').closest(".well").show();
                    break;
                default:
                    $('.toggle-teaser-html, .toggle-teaser-rotator').hide();
                    $('#mm-rotator-heading, #mm-teaser-html').closest(".well").hide();
                    break;
            }
        }

        // Entity picker for rotator
        $(document).on('click', '#SearchRotatorProductsButton', function () {
            $('#@(Html.FieldIdFor(x => x.TeaserRotatorProductIds))').entityPicker('loadDialog', {
                url: '@Url.Action("EntityPicker", "Common", new { area = "" })',
                caption: '@T("Plugins.DiscountRules.HasOneProduct.Fields.Products")',
                returnValueDelimiter: ',',
                onLoadDialogBefore: function () {
                    $('#SearchRotatorProductsButton').button('loading').prop('disabled', true);
                },
                onLoadDialogComplete: function () {
                    $('#SearchRotatorProductsButton').prop('disabled', false).button('reset');
                }
            });
        });

        // init
        $('.toggle-teaser-html, .toggle-teaser-rotator').hide();
        toggleBgPicture();
        toggleItemWrap();
        toggleCategoryPicture();
        fieldTeaserType.trigger("change");

    });
</script>
<style type="text/css">
    .well {
        margin-top: 10px;
    }
</style>