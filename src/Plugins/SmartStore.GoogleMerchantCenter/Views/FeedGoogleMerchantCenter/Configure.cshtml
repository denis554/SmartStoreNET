@using SmartStore.GoogleMerchantCenter;
@using SmartStore.GoogleMerchantCenter.Models;
@using SmartStore.GoogleMerchantCenter.Providers;
@using SmartStore.Web.Framework;
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework.UI;
@model FeedGoogleMerchantCenterModel
@{
	Layout = "";

	Html.AddCssFileParts(true, "~/Content/vendors/x-editable/bootstrap-editable.css");
	Html.AppendScriptParts(true, "~/Content/vendors/x-editable/bootstrap-editable.js");
}

<div class="plugin-configuration">
	<div>
		<div class="alert alert-info alert-dismissible">
			@Html.Raw(@T("Plugins.Feed.Froogle.AdminInstruction"))
			<button class="close" data-dismiss="alert">&times;</button>
		</div>
	</div>
	<div>
		<a href="http://www.google.com/merchants/" rel="nofollow" target="_blank">
			<img src="@Url.Content("~/Plugins/SmartStore.GoogleMerchantCenter/Content/branding.png")" alt="Google Merchant Center" />
		</a>
	</div>
</div>


@Html.SmartStore().TabStrip().Name("gmc-config").Style(TabsStyle.Material).Items(x =>
{
	x.Add().Text(T("Plugins.Feed.Froogle.TabTitleGrid").Text).Content(TabGrid()).Selected(true);
	x.Add().Text(T("Plugins.Feed.Froogle.TabTitleProfiles").Text).Content(TabProfiles());
})


@helper TabGrid()
{
	<div class="row mt-3 grid-filter">
		<div class="col-sm-6 col-lg-4 col-xl-3 form-group">
			@Html.SmartLabelFor(model => model.SearchProductName)
			@Html.EditorFor(model => Model.SearchProductName, new { @class = "form-control" })
		</div>
		<div class="col-sm-6 col-lg-4 col-xl-3 form-group">
			@Html.SmartLabelFor(m => m.SearchIsTouched)
			@Html.DropDownListFor(m => m.SearchIsTouched, new List<SelectListItem>
				{
					new SelectListItem { Text = T("Common.Unspecified"), Value = "" },
					new SelectListItem { Text = T("Plugins.Feed.Froogle.SearchIsTouched.Touched"), Value = "touched" },
					new SelectListItem { Text = T("Plugins.Feed.Froogle.SearchIsTouched.Untouched"), Value = "untouched" }
				})
		</div>

		<div class="col-sm-6 col-lg-4 col-xl-3 form-group">
			<label>&nbsp;</label>
			<button type="submit" id="search-products" value="search-product" class="btn btn-secondary btn-block">
				<span>@T("Admin.Common.ApplyFilter")</span>
			</button>
		</div>
	</div>
	
	<div>
		@(Html.Telerik().Grid<GoogleProductModel>()
			.Name("gmc-products-grid")
			.DataKeys(keys =>
			{
				keys.Add(x => x.ProductId).RouteKey("ProductId");
			})
			.Columns(c =>
			{
				c.Bound(x => x.ProductId)
					.ReadOnly()
					.Visible(false);
				c.Bound(x => x.Name)
					.ReadOnly().Visible(true)
					.Template(x => @Html.LabeledProductName(x.ProductId, x.Name, x.ProductTypeName, x.ProductTypeLabelHint))
					.ClientTemplate(@Html.LabeledProductName("ProductId", "Name"));
				c.Bound(x => x.SKU)
					.ReadOnly()
					.Visible(true);
				c.Bound(x => x.Export2)
					.ClientTemplate(XEditableLink("Export2", "select2").ToHtmlString());
				c.Bound(x => x.Taxonomy)
					.ClientTemplate(XEditableLink("Taxonomy", "select2").ToHtmlString());
				c.Bound(x => x.Gender)
					.ClientTemplate(XEditableLink("Gender", "select2").ToHtmlString());
				c.Bound(x => x.AgeGroup)
					.ClientTemplate(XEditableLink("AgeGroup", "select2").ToHtmlString());
				c.Bound(x => x.IsAdult)
					.ClientTemplate(XEditableLink("IsAdult", "select2").ToHtmlString());
				c.Bound(x => x.Color)
					.ClientTemplate(XEditableLink("Color", "text").ToHtmlString());
				c.Bound(x => x.Size)
					.ClientTemplate(XEditableLink("Size", "text").ToHtmlString());
				c.Bound(x => x.Material)
					.ClientTemplate(XEditableLink("Material", "text").ToHtmlString());
				c.Bound(x => x.Pattern)
					.ClientTemplate(XEditableLink("Pattern", "text").ToHtmlString());
				c.Bound(x => x.Multipack2)
					.ClientTemplate(XEditableLink("Multipack2", "text").ToHtmlString());
				c.Bound(x => x.IsBundle)
					.ClientTemplate(XEditableLink("IsBundle", "select2").ToHtmlString());
				c.Bound(x => x.EnergyEfficiencyClass)
					.ClientTemplate(XEditableLink("EnergyEfficiencyClass", "select2").ToHtmlString());
				c.Bound(x => x.CustomLabel0)
					.ClientTemplate(XEditableLink("CustomLabel0", "text").ToHtmlString());
				c.Bound(x => x.CustomLabel1)
					.ClientTemplate(XEditableLink("CustomLabel1", "text").ToHtmlString());
				c.Bound(x => x.CustomLabel2)
					.ClientTemplate(XEditableLink("CustomLabel2", "text").ToHtmlString());
				c.Bound(x => x.CustomLabel3)
					.ClientTemplate(XEditableLink("CustomLabel3", "text").ToHtmlString());
				c.Bound(x => x.CustomLabel4)
					.ClientTemplate(XEditableLink("CustomLabel4", "text").ToHtmlString());
			})
			.ClientEvents(e =>
			{
				e.OnDataBound("OnGridDataBound");
				e.OnDataBinding("OnGridDataBinding");
				e.OnError("OnGridError");
			})
			.DataBinding(dataBinding =>
			{
				dataBinding.Ajax().Select("GoogleProductList", "FeedGoogleMerchantCenter");
			})
			.Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
			.PreserveGridState()
			.EnableCustomBinding(true)
		)

	</div>
}

@helper TabProfiles()
{	
	<style>
		.info-profile:not(:first-child) {
			border-top: 1px solid #e1e4e8;
			margin-top: 1.25rem;
			padding-top: 1.25rem;
		}
	</style>

	@Html.Action("InfoProfile", "Export", new { systemName = GmcXmlExportProvider.SystemName, returnUrl = Request.RawUrl, area = "admin" })
}

@helper XEditableLink(string fieldName, string type)
{
	 var displayText = fieldName == "Gender" || fieldName == "AgeGroup" || fieldName == "Export2" || fieldName == "IsBundle" || fieldName == "IsAdult"
		? "<#= {0}Localize #>".FormatInvariant(fieldName)
		: "<#= {0} #>".FormatInvariant(fieldName);

	<a href="#" 
	   class="edit-link-@(fieldName.ToLower())" 
	   data-pk="<#= ProductId #>"
	   data-name="@fieldName"
	   data-value="<#= @fieldName #>"
	   data-inputclass="form-control form-control-sm edit-@(fieldName.ToLower())"
	   data-type="@type">@displayText</a>
}

	<script type="text/javascript">

	$('#search-products').click(function () {
		var grid = $('#gmc-products-grid').data('tGrid');
		grid.currentPage = 1;
		grid.ajaxRequest();
		return false;
	});

	function OnGridError(e) {
		e.preventDefault();
		alert(e.XMLHttpRequest.responseText);
	}

	function OnGridDataBinding(e) {
		e.data = {
			searchProductName: $('#SearchProductName').val(),
			touched: $('#SearchIsTouched').val()
		};
	}

	function OnGridDataBound(e) {
		var grid = $('#gmc-products-grid'),
			emptyCell = @T("Plugins.Feed.Froogle.EmptyGridCell").JsText;

		var options = {
			mode: 'popup',
			placement: 'right',
			emptytext: emptyCell,
			url: '@Url.Action("GoogleProductEdit", "FeedGoogleMerchantCenter", new { Namespaces = "SmartStore.GoogleMerchantCenter.Controllers", area = GoogleMerchantCenterFeedPlugin.SystemName })'
		};
		var rightOptions = $.extend({}, options, {
			placement: 'left'
		});
		var select2Options = {
			placeholder: emptyCell,
			minimumResultsForSearch: 20,
			allowClear: true,
			language: '@Model.LanguageSeoCode'
		};
		var boolSource = [
			{ id: 'true', text: @T("Admin.Common.Yes").JsText },
			{ id: 'false', text: @T("Admin.Common.No").JsText }
		];

		grid.find('a.edit-link-export2').editable($.extend({}, options, {
			select2: {
				minimumResultsForSearch: 20
			},
			source: boolSource
		}));

		grid.find('a.edit-link-gender').editable($.extend({}, options, {
			select2: select2Options,
			source: [
				{ id: 'male', text: @T("Plugins.Feed.Froogle.GenderMale").JsText },
				{ id: 'female', text: @T("Plugins.Feed.Froogle.GenderFemale").JsText },
				{ id: 'unisex', text: @T("Plugins.Feed.Froogle.GenderUnisex").JsText }
			]
		}));

		grid.find('a.edit-link-agegroup').editable($.extend({}, options, {
			select2: select2Options,
			source: [
				{ id: 'adult', text: @T("Plugins.Feed.Froogle.AgeGroupAdult").JsText },
				{ id: 'kids', text: @T("Plugins.Feed.Froogle.AgeGroupKids").JsText }
			]
		}));

		grid.find('a.edit-link-isadult').editable($.extend({}, options, {
			select2: select2Options,
			source: boolSource
		}));

		grid.find('a.edit-link-color').editable(options);
		grid.find('a.edit-link-size').editable(options);
		grid.find('a.edit-link-material').editable(options);
		grid.find('a.edit-link-pattern').editable(options);
		grid.find('a.edit-link-multipack2').editable($.extend({}, options, {
			validate: function(value) {
				if (value.length !== 0) {
					var regex = /^[0-9]+$/;
					if (!regex.test(value)) {
						return @T("Admin.System.Warnings.DigitsOnly").JsText;
					}
				}
				return null;
			}
		}));

		grid.find('a.edit-link-isbundle').editable($.extend({}, options, {
			select2: select2Options,
			source: boolSource
		}));

		grid.find('a.edit-link-energyefficiencyclass').editable($.extend({}, options, {
			select2: select2Options,
			source: [
				@if (Model.EnergyEfficiencyClasses != null && Model.EnergyEfficiencyClasses.Any())
				{
					foreach (var str in Model.EnergyEfficiencyClasses.Select(x => x.Replace("'", "\"")))
					{
						<text>{ id: '@Html.Raw(str)', text: '@Html.Raw(str)' },</text>
					}
				}
			]
		}));

		// Test date inline editing. Set 'datetime' type for XEditableLink.
		//grid.find('a.edit-link-customlabel0').editable($.extend({}, rightOptions, {
		//	viewformat: 'L LT',
		//	display: function (value, sourceData) {
		//		if (value) {
		//			// 'value' is an object of type date.
		//			// $.fn.editabletypes.datetime.prototype.value2str(value);
		//			var m = moment(value);
		//			var text = m.format('L LT');
		//			$(this).text(text);
		//		}
		//		else {
		//			$(this).text(null);
		//		}
		//	}
		//}));

		grid.find('a.edit-link-customlabel0').editable(rightOptions);
		grid.find('a.edit-link-customlabel1').editable(rightOptions);
		grid.find('a.edit-link-customlabel2').editable(rightOptions);
		grid.find('a.edit-link-customlabel3').editable(rightOptions);
		grid.find('a.edit-link-customlabel4').editable(rightOptions);

		grid.find('a.edit-link-taxonomy').editable($.extend({}, options, {
			tpl: '<select></select>',
			type: 'select2',
			unsavedclass: null,
			display: function (value, sourceData) {
				$(this).text(value);
			},
			select2: {
				placeholder: emptyCell,
				dropdownAutoWidth: true,
				allowClear: true,
				language: '@Model.LanguageSeoCode',
				ajax: {
					delay: 300,
					cache: true,
					dataType: 'json',
					type: 'GET',
					url: '@Url.Action("GetGoogleCategories", "FeedGoogleMerchantCenter", new { Namespaces = "SmartStore.GoogleMerchantCenter.Controllers", area = GoogleMerchantCenterFeedPlugin.SystemName })',
					data: function (params) {
						var query = {
							search: params.term,
							page: params.page || 1
						}
						return query;
					},
					processResults: function (data, params) {
						params.page = params.page || 1;

						return {
							results: data.results,
							pagination: {
								more: data.hasMoreItems
							}
						};
					}
				}
			}
		}));

	}
</script>