@{
    Layout = "";
}
@model SmartStore.Plugin.DiscountRules.HadSpentAmount.Models.RequirementModel
@using SmartStore.Web.Framework;

<script type="text/javascript">
    $(document).ready(function () {
        $('#savehadspentamountrequirement@(Model.RequirementId)').click(function () {
            var spentAmount = $("#@Html.FieldIdFor(model => model.SpentAmount)").val();
            var discountId = @Model.DiscountId;
            var requirementId = @Model.RequirementId;
            $.ajax({
                cache:false,
                type: "POST",
                url: "@(Url.Action("Configure", "DiscountRulesHadSpentAmount"))",
                data: 
                    { 
                        "discountId": discountId, 
                        "discountRequirementId": requirementId, 
                        "spentAmount": spentAmount,
                        "settings": JSON.stringify(
                            {
                                LimitToCurrentBasketSubTotal: $("#@Html.FieldIdFor(model => model.LimitToCurrentBasketSubTotal)").prop('checked'),
                                BasketSubTotalIncludesDiscounts: $("#@Html.FieldIdFor(model => model.BasketSubTotalIncludesDiscounts)").prop('checked')
                            })
                    },
                success: function (data) {
                    EventBroker.publish("message", { text: '@T("Admin.Promotions.Discounts.Requirements.Saved")', type: 'success' });
                    // notify parent if it's a new requirement
                    @if (Model.RequirementId == 0)
                    {
                        <text>$("#discountRequirementContainer").trigger('smnewdiscountruleadded', [data.NewRequirementId]);</text>
                    }
                },
                error:function (xhr, ajaxOptions, thrownError){
                    EventBroker.publish("message", { text: '@T("Admin.Promotions.Discounts.Requirements.FailedToSave")', type: 'error' });
                }  
            });
        });

        $("#@Html.FieldIdFor(model => model.LimitToCurrentBasketSubTotal)").click(toggleLimitToBasketSettings);
        toggleLimitToBasketSettings();
    });

    function toggleLimitToBasketSettings() {
        if ($('#@Html.FieldIdFor(model => model.LimitToCurrentBasketSubTotal)').is(':checked')) {
            $('#pnlBasketSubTotalIncludesDiscounts').show();
            $('#pnlBasketSubTotalIncludesTax').show();
        }
        else {
            $('#pnlBasketSubTotalIncludesDiscounts').hide();
            $('#pnlBasketSubTotalIncludesTax').hide();
        }
    }
</script>
    
<table class="adminContent">
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.SpentAmount)
        </td>
        <td class="adminData">
            @Html.EditorFor(model => model.SpentAmount)
            @Html.ValidationMessageFor(model => model.SpentAmount)
        </td>
    </tr>

	<tr>
		<td class="adminTitle">
			@Html.SmartLabelFor(model => model.LimitToCurrentBasketSubTotal)
		</td>
		<td class="adminData">
			@Html.EditorFor(model => model.LimitToCurrentBasketSubTotal)
			@Html.ValidationMessageFor(model => model.LimitToCurrentBasketSubTotal)
		</td>
	</tr>
	<tr id="pnlBasketSubTotalIncludesDiscounts">
		<td class="adminTitle">
			@Html.SmartLabelFor(model => model.BasketSubTotalIncludesDiscounts)
		</td>
		<td class="adminData">
			@Html.EditorFor(model => model.BasketSubTotalIncludesDiscounts)
			@Html.ValidationMessageFor(model => model.BasketSubTotalIncludesDiscounts)
		</td>
	</tr>

    <tr>
		<td class="adminTitle">&nbsp;</td>
		<td class="adminData">
            <button type="button" 
                name="savehadspentamountrequirement@(Model.RequirementId)" 
                id="savehadspentamountrequirement@(Model.RequirementId)" 
                class="btn btn-primary">
                    @T("Admin.Common.Save")
            </button>
		</td>
    </tr>

</table>