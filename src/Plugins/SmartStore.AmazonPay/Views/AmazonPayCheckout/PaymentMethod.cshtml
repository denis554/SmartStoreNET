@using SmartStore.Web.Models.Checkout;

@model SmartStore.AmazonPay.Models.AmazonPayViewModel

@{
    Layout = "_Checkout";

    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}

@section orderProgress{
    @{ Html.RenderAction("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Payment, area = "" }); }
}

<div class="page payment-method-page">
    <div class="page-title">
        <h1 class="h3">@T("Checkout.SelectPaymentMethod")</h1>
    </div>

    <div class="page-body checkout-data">
		@{ Html.RenderWidget("checkout_payment_method_top"); }

		@using (Html.BeginForm("PaymentMethod", "AmazonPayCheckout", new { area = Model.SystemName }, FormMethod.Post))
        {
            if (Model.DisplayRewardPoints)
            {
				<div class="reward-points alert alert-info">
					<div class="checkbox">
                        <label class="form-check-label mb-0">
                            @Html.EditorFor(model => model.UseRewardPoints)
                            @Html.Raw(string.Format(T("Checkout.UseRewardPoints").Text, "<strong>" + Model.RewardPointsBalance + "</strong>", "<strong>" + Model.RewardPointsAmount + "</strong>"))
                        </label>
					</div>
				</div>
            }

			<div class="amazon-pay-widget clearfix">
				<div id="@Model.WidgetId"></div>
			</div>

            <div class="buttons mt-3">
                <a class="btn btn-secondary btn-lg" href="@Url.Action("ShippingMethod", "Checkout", new { area = "" })">
                    <i class="fa fa-angle-left"></i>
                    <span>@T("Common.Back")</span>
                </a>

                <button id="AmazonPayNextCheckoutStep" type="submit" class="btn btn-warning btn-lg payment-method-next-step-button hide">
                    <span>@T("Checkout.NextButton")</span>
                    <i class="fa fa-angle-right"></i>
                </button>
            </div>
			
			Html.RenderWidget("checkout_payment_method_bottom"); 
		}
	</div>
</div>

<script type="text/javascript">
	window.onAmazonLoginReady = function () {
		try {
			amazon.Login.setClientId('@Html.Raw(Model.ClientId)');
		}
		catch (e) {
			console.log(e);
			alert(e);
		}
	};

	window.onAmazonPaymentsReady = function () {
		try {
			new OffAmazonPayments.Widgets.Wallet({
				sellerId: '@Model.SellerId',
				scope: '',
				amazonOrderReferenceId: '@Model.OrderReferenceId',
				design: {
					designMode: 'responsive',
					size: { width: '@(Model.PaymentWidgetWidth)px', height: '@(Model.PaymentWidgetHeight)px' }
				},
				onPaymentSelect: function (orderReference) {
					$('#AmazonPayNextCheckoutStep').fadeIn();
				},
				onError: function (e) {
					alert(e.getErrorMessage() + ' (' + e.getErrorCode() + ')');
				}
			}).bind('@Model.WidgetId');
		}
		catch (e) {
			console.log(e);
			alert(e);
		}
	};
</script>
<script async="async" src="@Html.Raw(Model.WidgetUrl)"></script>
