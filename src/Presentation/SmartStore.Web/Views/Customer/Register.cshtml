@model RegisterModel
@using SmartStore.Web.Models.Customer;
@{
    Layout = "_Layout";
    Html.AddTitleParts(T("PageTitle.Register").Text);
}

@using (Html.BeginForm("Register", "Customer", new { returnUrl = this.Context.Request.QueryString["returnUrl"] }, FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()

    <div class="page registration-page">
        <div class="page-title">
            <h1 class="h3">@T("Account.Register")</h1>
        </div>

        <div class="page-body row">
            
			<div class="col-12 col-lg-9 col-xl-8">
				@if (!ViewData.ModelState.IsValid)
				{
					@Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
				}

				@{ Html.RenderPartial("_ExternalAuthentication.AssociateMessage"); }

				<fieldset class="content-group">
					<legend><span>@T("Account.YourPersonalDetails")</span></legend>

					@if (Model.GenderEnabled)
					{
						<div class="form-group row">
							<label class="col-md-3 col-form-label">@T("Account.Fields.Gender")</label>
							<div class="col-md-9">
								<div class="form-check form-check-inline">
									<label class="form-check-label">
										@Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { @class = "form-check-input", id = "gender-male" })
										<span>@T("Account.Fields.Gender.Male")</span>
									</label>
								</div>
								<div class="form-check form-check-inline">
									<label class="form-check-label">
										@Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { @class = "form-check-input", id = "gender-female" })
										<span>@T("Account.Fields.Gender.Female")</span>
									</label>
								</div>
							</div>
						</div>
					}

					@Html.ControlGroupFor(model => model.FirstName, required: true, breakpoint: "md")
					@Html.ControlGroupFor(model => model.LastName, required: true, breakpoint: "md")

					@if (Model.DateOfBirthEnabled)
					{
						<div class="form-group row">
							<label class="col-md-3 col-form-label" for="DateOfBirthDay">@T("Account.Fields.DateOfBirth")</label>
							<div class="col-md-9">
								@Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
									Html.FieldNameFor(x => x.DateOfBirthMonth),
									Html.FieldNameFor(x => x.DateOfBirthYear),
									DateTime.Now.Year - 110,
									DateTime.Now.Year,
									Model.DateOfBirthDay,
									Model.DateOfBirthMonth,
									Model.DateOfBirthYear)
								@Html.ValidationMessageFor(model => model.DateOfBirthDay)
								@Html.ValidationMessageFor(model => model.DateOfBirthMonth)
								@Html.ValidationMessageFor(model => model.DateOfBirthYear)
							</div>
						</div>
					}

					@Html.ControlGroupFor(model => model.Email, required: true, breakpoint: "md")

					@if (Model.UsernamesEnabled)
					{
						<div class="form-group row">
							@Html.LabelFor(model => model.Username, new { @class = "col-md-3 col-form-label required", @for = "Username" })
							<div class="col-md-9">
								@if (Model.CheckUsernameAvailabilityEnabled)
								{
									<div class="input-group">
										@Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
										@{ Html.RenderPartial("_CheckUsernameAvailability"); }
									</div>
								}
								else
								{
									@Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
								}
								@Html.ValidationMessageFor(model => model.Username)
							</div>
						</div>
				}
				</fieldset>

				<fieldset class="content-group">
					<legend><span>@T("Account.YourPassword")</span></legend>

					@Html.ControlGroupFor(model => model.Password, editorType: InputEditorType.Password, required: true, breakpoint: "md")
					@Html.ControlGroupFor(model => model.ConfirmPassword, editorType: InputEditorType.Password, required: true, breakpoint: "md")

					@if (Model.DisplayCaptcha)
					{
						<div class="captcha-box">
							@Html.Raw(Html.GenerateCaptcha())
						</div>
					}
				</fieldset>

				@if (Model.CompanyEnabled || Model.DisplayVatNumber)
				{
					<fieldset class="content-group">
						<legend><span>@T("Account.CompanyDetails")</span></legend>

						@if (Model.CompanyEnabled)
						{
							@Html.ControlGroupFor(model => model.Company, required: Model.CompanyRequired, breakpoint: "md")
						}
						@if (Model.DisplayVatNumber)
						{
							<div class="form-group row">
								@Html.LabelFor(model => model.VatNumber, new { @class = "col-md-3 col-form-label", @for = "VatNumber" })
								<div class="col-md-9">
									<div class="input-group">
										@Html.TextBoxFor(model => model.VatNumber, new { @class = "form-control", placeholder = "Optional" })
										@if (Model.VatNumberStatusNote.HasValue())
										{
											<span class="input-group-addon" id="basic-addon2">@Model.VatNumberStatusNote</span>
										}
									</div>
									<div class="form-text text-muted vat-note">@T("Account.Fields.VatNumber.Note")</div>
								</div>
							</div>
						}

					</fieldset>
				}

				@if (Model.StreetAddressEnabled || Model.StreetAddress2Enabled || Model.ZipPostalCodeEnabled || Model.CityEnabled || Model.CountryEnabled)
				{
					<fieldset class="content-group">
						<legend><span>@T("Account.YourAddress")</span></legend>

						@if (Model.StreetAddressEnabled)
						{
							@Html.ControlGroupFor(model => model.StreetAddress, required: Model.StreetAddressRequired, breakpoint: "md")
						}
						@if (Model.StreetAddress2Enabled)
						{
							@Html.ControlGroupFor(model => model.StreetAddress2, required: Model.StreetAddress2Required, breakpoint: "md")
						}
						@if (Model.ZipPostalCodeEnabled)
						{
							@Html.ControlGroupFor(model => model.ZipPostalCode, required: Model.ZipPostalCodeRequired, breakpoint: "md")
						}
						@if (Model.CityEnabled)
						{
							@Html.ControlGroupFor(model => model.City, required: Model.CityRequired, breakpoint: "md")
						}
						@if (Model.CountryEnabled)
						{
							<div class="form-group row">
								@Html.LabelFor(model => model.CountryId, new { @class = "col-md-3 col-form-label", @for = "CountryId" })
								<div class="col-md-9">
									@Html.DropDownList("CountryId", Model.AvailableCountries, new { @class = "form-control" })
								</div>
							</div>
						}
						@if (Model.CountryEnabled && Model.StateProvinceEnabled)
						{
							<div class="form-group row">
								@Html.LabelFor(model => model.StateProvinceId, new { @class = "col-md-3 col-form-label", @for = "StateProvinceId" })
								<div class="col-md-9">
									@Html.DropDownList("StateProvinceId", Model.AvailableStates, new { @class = "form-control" })
								</div>
							</div>
						}
					</fieldset>
				}

				@if (Model.PhoneEnabled || Model.FaxEnabled)
				{
					<fieldset class="content-group">
						<legend><span>@T("Account.YourContactInformation")</span></legend>

						@if (Model.PhoneEnabled)
						{
							@Html.ControlGroupFor(model => model.Phone, required: Model.PhoneRequired, breakpoint: "md")
						}
						@if (Model.FaxEnabled)
						{
							@Html.ControlGroupFor(model => model.Fax, required: Model.FaxRequired, breakpoint: "md")
						}

					</fieldset>
				}

				@if (Model.NewsletterEnabled)
				{
					<fieldset class="content-group">
						<legend><span>@T("Account.Options")</span></legend>
						@Html.ControlGroupFor(model => model.Newsletter, editorType: InputEditorType.Checkbox, breakpoint: "md")
					</fieldset>
				}

				@if (Model.AllowCustomersToSetTimeZone)
				{
					<fieldset class="content-group">
						<legend><span>@T("Account.Preferences")</span></legend>

						@if (Model.AllowCustomersToSetTimeZone)
						{
							<div class="form-group row">
								@Html.LabelFor(model => model.TimeZoneId, new { @class = "col-md-3 col-form-label", @for = "TimeZoneId" })
								<div class="col-md-9">
									@Html.DropDownList("TimeZoneId", Model.AvailableTimeZones, new { @class = "form-control" })
									@Html.ValidationMessageFor(model => model.TimeZoneId)
								</div>
							</div>
						}
					</fieldset>
				}

				<div class="form-group row">
					<div class="col">
						<button type="submit" class="btn btn-primary btn-lg" name="register-button">
							@T("Account.Register.Button")
						</button>
					</div>
				</div>
			</div>
        </div>
    </div>
}

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
     $(function() {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                    data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function(id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        ddlStates.trigger("change");
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to retrieve states.');
                    }
                });
            });
        });
    </script>
}