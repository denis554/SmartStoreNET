@model LoginModel
@using SmartStore.Web.Models.Customer;
@using SmartStore.Core;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Core.Infrastructure.DependencyManagement;

@{
    Layout = "_Layout";

    Html.AddTitleParts(T("PageTitle.Login").Text);

    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }

	var socialButtonsHtml = Html.Action("ExternalMethods", "ExternalAuthentication").ToHtmlString();
}

<script type="text/javascript">
    $(function () {
        applyCommonPlugins($(".page.login-page"));
    });
</script>

<style>
	.login-page hr {
		width: 100%;
		margin-top: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.login-page .input-group-icon > i {
		line-height: inherit;
	}

	.login-page .login-box .form-group:last-child {
		margin-bottom: 0;
	}
</style>

<div class="page login-page">
	<div class="page-title">
		@*<h1 class="h3">@T("Account.Login.Welcome")</h1>*@
		<!-- PROTO -->
		<h1 class="font-weight-normal">Anmeldung</h1>
	</div>

	<div class="row mt-4">
		<div class="col-12 col-md-7 col-lg-6 col-xl-5 order-md-last">
			<div class="card card-shadow p-5 mb-5 mb-md-0 login-box" style="background: #fcfcfc">
				<h3 class="h4 mb-0">
					@T("Account.Login.ReturningCustomer")
				</h3>
				<hr />
				@if (!ViewData.ModelState.IsValid)
				{
					@Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text, new { @class = "alert alert-danger" })
				}
				<div class="text-muted" style="font-size: 85%">
					@{
						Html.RenderPartial("_ExternalAuthentication.AssociateMessage");
					}
				</div>
				<!-- PROTO -->
				<div class="alert alert-warning external-auth-association d-none">
					@T("Account.AssociatedExternalAuth.YourAccountWillBeLinkedTo") <strong class="identifier">Facebook</strong>
					<a href="@Url.Action("RemoveParameterAssociation", "ExternalAuthentication", new { ReturnUrl = Request.Url.ToString() })" class="remove" rel="nofollow">
						(@T("Common.Remove"))
					</a>
				</div>

				<!-- SignIn Form -->
				<form action="@ViewContext.HttpContext.Request.RawUrl" method="post">
					@if (Model.UsernamesEnabled)
					{
						<div class="form-group">
							<div class="input-group input-group-lg has-icon">
								@Html.TextBoxFor(m => m.Username, new { @class = "username form-control", placeholder = Html.DisplayNameFor(m => m.Username) })
								<span class="input-group-icon">
									<i class="icm icm-user"></i>
								</span>
							</div>
							@Html.ValidationMessageFor(m => m.Username)
						</div>
					}
					else
					{
						<div class="form-group">
							<div class="input-group input-group-lg has-icon">
								@Html.TextBoxFor(m => m.Email, new { @class = "email form-control", placeholder = Html.DisplayNameFor(m => m.Email) })
								<span class="input-group-icon">
									<i class="icm icm-envelope-open"></i>
								</span>
							</div>
							@Html.ValidationMessageFor(m => m.Email)
						</div>
					}

					<div class="form-group">
						<div class="input-group input-group-lg has-icon">
							<input type="password" class="password form-control" autocomplete="off"
								   placeholder="@Html.DisplayNameFor(m => m.Password)"
								   id="@Html.FieldIdFor(m => m.Password)"
								   name="@Html.FieldNameFor(m => m.Password)"
								   value="@(Model.Password.HasValue() ? Model.Password : null)" />
							<span class="input-group-icon">
								<i class="icm icm-shield"></i>
							</span>
						</div>
						@Html.ValidationMessageFor(m => m.Password)
					</div>

					<div class="form-group d-flex justify-content-between">
						<div class="xform-check">
							<label class="form-check-label">
								@Html.CheckBoxFor(m => m.RememberMe, new { @class = "form-check-input" })
								@T("Account.Login.Fields.RememberMe")
							</label>
						</div>
						<div class="forgot-password">
							@Html.ActionLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery", "Customer")
						</div>
					</div>

					@if (Model.DisplayCaptcha)
					{
						<div class="form-group captcha-box">
							@Html.Raw(Html.GenerateCaptcha())
						</div>
					}

					<div class="form-group">
						<button type="submit" class="btn btn-primary btn-lg btn-block btn-login">
							@T("Account.Login.LoginButton")
						</button>
					</div>

					@if (socialButtonsHtml.HasValue())
					{
						<div class="form-group">
							<div class="text-center mb-3">
								- ODER -
							</div>
							<div class="external-auth-buttons">
								@Html.Raw(socialButtonsHtml)
							</div>
						</div>
					}
				</form>
			</div>
		</div>
		<div class="col-12 col-md-5 col-lg-6 col-xl-7 order-md-first">
			<div class="page-info">
				<!-- PROTO -->
				<div class="alert alert-warning external-auth-association d-none">
					@T("Account.AssociatedExternalAuth.YourAccountWillBeLinkedTo") <strong class="identifier">Facebook</strong>
					<a href="@Url.Action("RemoveParameterAssociation", "ExternalAuthentication", new { ReturnUrl = Request.Url.ToString() })" class="remove" rel="nofollow">
						(@T("Common.Remove"))
					</a>
				</div>
				@{
					Html.RenderPartial("_ExternalAuthentication.AssociateMessage");
					Html.RenderAction("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo", bodyOnly = true, isLead = true });
				}
			</div>

			<div class="x-login-block x-login-block-register">
				@if (Model.CheckoutAsGuest)
				{
					Html.RenderAction("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister", bodyOnly = true });
					<div class="row sm-gutters">
						<div class="col-sm-6 col-md-12 col-lg-6 pb-2 pb-lg-0">
							<a class="btn btn-warning btn-lg btn-block register-button" href="@registerUrl">
								@T("Account.Register.Button")
							</a>
						</div>
						<div class="col-sm-6 col-md-12 col-lg-6">
							<a class="btn btn-secondary btn-lg btn-block checkout-as-guest-button" href="@Url.RouteUrl("Checkout")">
								<span>@T("Account.Login.CheckoutAsGuest")</span>
								<i class="fa fa-angle-right"></i>
							</a>
						</div>
					</div>
				}
				else
				{
					<a class="btn btn-warning btn-lg register-button" href="@registerUrl">
						@T("Account.Register.Button")
					</a>
				}
			</div>
		</div>
	</div>
</div>

@{ 
	return;
}

<div class="page login-page" style="opacity: 0.2; margin-top: 300px">
    <div class="page-title">
        <h1 class="h3">@T("Account.Login.Welcome")</h1>
    </div>

    @{ 
        Html.RenderAction("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" });
        Html.RenderPartial("_ExternalAuthentication.AssociateMessage");
    }

    <div class="page-body">
        
        <div class="login-wrapper clearfix">
            
            @if (Model.CheckoutAsGuest)
            {
                <div class="login-block login-block-register equalized-column">
                    <div class="block login-block-inner checkout-as-guest-or-register-block">
                        <div class="block-title">
                            <h4>@T("Account.Login.CheckoutAsGuestOrRegister")</h4>
                        </div>
                        <div class="block-body">
                            <p>
                                @{ Html.RenderAction("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister" });}
                            </p>
                            <div class="buttons">
                                <a class="btn btn-secondary pull-left checkout-as-guest-button" href="@Url.RouteUrl("Checkout")">
                                    @T("Account.Login.CheckoutAsGuest")
                                </a>
                                <a class="btn btn-primary pull-right register-button" href="@registerUrl">
                                    @T("Account.Register")
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="login-block login-block-register equalized-column">
                    <div class="block login-block-inner">
                        <div class="block-title">
                            <h4>@T("Account.Login.NewCustomer")</h4>
                        </div>
                        <div class="block-body">
                            <p>@T("Account.Login.NewCustomerText")</p>
                            <div class="buttons">
                                <a class="btn btn-primary register-button" href="@registerUrl">
                                    @T("Account.Register")
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="login-block login-block-login equalized-column">

                <div class="block">
                    <div class="block-title">
                        <h4>@T("Account.Login.ReturningCustomer")</h4>
                    </div>
                    <div class="block-body">

                        <form action="@ViewContext.HttpContext.Request.RawUrl" method="post" class="form-horizontal">
                            @if (!ViewData.ModelState.IsValid)
                            {
                                @Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text, new { @class = "alert alert-danger" })
                            }

                            @if (Model.UsernamesEnabled)
                            {
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Username, new { @class = "col-sm-12 form-control-label", @for = "Username" })
                                    <div class="col-sm-12">
                                        @Html.TextBoxFor(m => m.Username, new { @class = "username form-control" })
                                        @Html.ValidationMessageFor(m => m.Username, null, new { @class = "text-danger" })
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.Email, new { @class = "col-sm-12 form-control-label", @for = "Email" })
                                    <div class="col-sm-12">
                                        @Html.TextBoxFor(m => m.Email, new { @class = "email form-control" })
                                        @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                            <div class="form-group row pwd">
                                @Html.LabelFor(model => model.Password, new { @class = "col-sm-12 form-control-label", @for = "Password" })
                                <div class="col-sm-12">
                                    <input type="password" class="password form-control" autocomplete="off"
                                           id="@Html.FieldIdFor(m => m.Password)"
                                           name="@Html.FieldNameFor(m => m.Password)"
                                           value="@(Model.Password.HasValue() ? Model.Password : null)" />
                                    @Html.ValidationMessageFor(m => m.Password, null, new { @class = "text-danger" })
                                    <div class="forgot-password">
                                        @Html.ActionLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery", "Customer")
                                    </div>
                                </div>
                            </div>

                            <div class="form-group row signin">
                                <div class="col-sm-12">
                                    <div class="checkbox inline">
                                        <label>
                                            @Html.CheckBoxFor(m => m.RememberMe)
                                            @T("Account.Login.Fields.RememberMe")
                                        </label>
                                    </div>
                                    <div class="pull-right">
                                        <button type="submit" class="btn btn-secondary login-button">
                                            <i class="fa fa-sign-in hide"></i>
                                            @T("Account.Login.LoginButton")
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group row">
                                <div class="col-sm-12">

                                    @if (Model.DisplayCaptcha)
                                    {
                                        <div class="captcha-box">
                                            @Html.Raw(Html.GenerateCaptcha())
                                        </div>
                                    }

                                    <div class="externalauthentication clearfix">
                                        @{ Html.RenderAction("ExternalMethods", "ExternalAuthentication"); }
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>