@model ProductReviewsModel
@using SmartStore.Web.Models.Catalog;
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(Model.ProductName);
    Html.AddTitleParts(T("PageTitle.ProductReviews").Text);
}
<div class="page product-reviews-page">
    <h4 class="text-muted">@T("Reviews.ProductReviewsFor")</h4>
    <div class="page-title">
        <h1 class="text-xs-left">
			<a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })" style="text-decoration: none;">@Model.ProductName</a>
		</h1>
    </div>

    <div class="page-body">
        @Html.Widget("productreviews_page_top")
        @if (Model.AddProductReview.SuccessfullyAdded)
        {
            if (!string.IsNullOrEmpty(Model.AddProductReview.Result))
            {
                <div class="alert alert-info">
                    <button type="button" class="close" data-dismiss="alert">×</button>
                    @Model.AddProductReview.Result
                </div>
            }
        }
        else
        {
            <fieldset class="write-review" id="review-form">
                <legend class="title">@T("Reviews.Write")</legend>
                @using (Html.BeginForm())
                {
                    <div>
						@if (ViewContext.ViewData.ModelState.ContainsKey(""))
						{
							<div class="message-error">@Html.ValidationSummary(true)</div>
						}

                        <div class="form-group">
                            @Html.LabelFor(model => model.AddProductReview.Rating)
                            <div class="col-sm-12 text-xs-left star-rating-parent">
                                <div class="review-rating star-rating star-rating-large">
                                    @{
                                        var srName = Html.FieldNameFor(x => x.AddProductReview.Rating);
                                    }
                                    <input type="radio" id="@(srName)5" name="@srName" value="5" checked="@(5 == Model.AddProductReview.Rating)" /><label for="@(srName)5" class="tooltip-toggle" title="@T("Reviews.Fields.Rating.Excellent")"></label>
                                    <input type="radio" id="@(srName)4" name="@srName" value="4" checked="@(4 == Model.AddProductReview.Rating)" /><label for="@(srName)4"></label>
                                    <input type="radio" id="@(srName)3" name="@srName" value="3" checked="@(3 == Model.AddProductReview.Rating)" /><label for="@(srName)3"></label>
                                    <input type="radio" id="@(srName)2" name="@srName" value="2" checked="@(2 == Model.AddProductReview.Rating)" /><label for="@(srName)2"></label>
                                    <input type="radio" id="@(srName)1" name="@srName" value="1" checked="@(1 == Model.AddProductReview.Rating)" /><label for="@(srName)1" class="tooltip-toggle" title="@T("Reviews.Fields.Rating.Bad")"></label>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AddProductReview.Title)
                            @Html.TextBoxFor(model => model.AddProductReview.Title, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-title form-control" }) : (object)(new { @class = "review-title form-control", disabled = "disabled" }))
                            @Html.ValidationMessageFor(model => model.AddProductReview.Title, null, new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.AddProductReview.ReviewText)
                            @Html.TextAreaFor(model => model.AddProductReview.ReviewText, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-text form-control" }) : (object)(new { @class = "review-text form-control", disabled = "disabled" }))
                            @Html.ValidationMessageFor(model => model.AddProductReview.ReviewText, null, new { @class = "text-danger" })
                        </div>

                        @if (Model.AddProductReview.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }

                        <div class="form-group">
                            <button type="submit" name="add-review" class="btn btn-primary write-product-review-button">
								<i class="fa fa-check"></i>
								@T("Reviews.SubmitButton")
							</button>
                        </div>
                    </div>
                }
            </fieldset>
        }

        @if (Model.Items.Count > 0)
        {
            <div class="block m-t-3">
                <div class="block-title">
                    <h4>@T("Reviews.ExistingReviews")</h4>
                </div>
                <hr />
                <div class="block-body">
                    <div class="product-review-list">
                        @foreach (var review in Model.Items)
                        {
                            int ratingPercent = review.Rating * 20;
                            <div class="product-review-item">

                                <div class="review-title">
                                    <div class="rating">
                                        <div style="width: @(ratingPercent)%"></div>
                                    </div>
                                    <strong>@review.Title</strong>,
                                    <span class="text-muted"><small>@review.WrittenOnStr</small></span>
                                </div>

                                <div class="review-author text-muted">
                                    <strong>@T("Reviews.From"):</strong>
                                    @if (review.AllowViewingProfiles)
                                    {
                                        <a href="@Url.RouteUrl("CustomerProfile", new { id = review.CustomerId })" rel="nofollow">@(review.CustomerName)</a>
                                    }
                                    else
                                    {
                                        @review.CustomerName
                                    }
                                </div>

                                <div class="review-text">
                                    @Html.Raw(SmartStore.Core.Html.HtmlUtils.FormatText(review.ReviewText, false, true, false, false, false, false))
                                </div>

                                @{ Html.RenderPartial("_ReviewHelpfulness", review.Helpfulness, new ViewDataDictionary()); }
                                @Html.Widget("productreviews_page_inside_review")
                            </div>
                        }
                    </div>

                </div>
            </div>
            
        }
        @Html.Widget("productreviews_page_bottom")
    </div>
</div>
