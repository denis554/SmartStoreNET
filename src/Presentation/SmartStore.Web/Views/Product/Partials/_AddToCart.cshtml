@model ProductDetailsModel
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Core.Infrastructure;
@using System.Globalization;
@using System.Text.RegularExpressions;

@using SmartStore.Services.Tax;
@using SmartStore.Services.Catalog;

@if (Model.AddToCart.CustomerEntersPrice)
{
    <div class="customer-entered-price line">
        @Html.LabelFor(model => Model.AddToCart.CustomerEnteredPrice, new { @class = "enter-price-label" })

        @Html.TextBox("CustomerEnteredPrice", Convert.ToInt32(Math.Ceiling(Model.AddToCart.CustomerEnteredPrice)), new { @class = "enter-price-input" })
        <div class="price-range">
            @Model.AddToCart.CustomerEnteredPriceRange
        </div>
    </div>
}

@if (!Model.AddToCart.DisableBuyButton || !Model.AddToCart.DisableWishlistButton)
{
    <div class="price-details price-block line card card-block m-t-1" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        @if (!Model.ProductPrice.CallForPrice)
        {
            <div class="clearfix">

				@if (Model.ProductPrice.Price.HasValue())
                {
					<div class="pull-right without-discount-block">
						@if (!String.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice))
                        {
							@T("Products.Price.OldPrice")<text>:</text>
							<span class="old-product-price">@Html.Raw(Model.ProductPrice.OldPrice)</span>
							<br />
                        }

						<span>@Html.Raw(Model.ProductPrice.NoteWithoutDiscount)</span>

						<span class="@(String.IsNullOrWhiteSpace(Model.ProductPrice.PriceWithDiscount) ? "product-price current" : "line-through")">

							<span class="product-price-without-discount" itemprop="price" content="@Model.ProductPrice.PriceValue.ToString("F", CultureInfo.InvariantCulture)">
								@Html.Raw(Model.ProductPrice.Price)
							</span>
						</span>
					</div>
                }

				@if (Model.ProductPrice.PriceWithDiscount.HasValue())
                {
					<div class="pull-left">
						@if (!String.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice))
                        {
							<br />
                        }
						<span>@Html.Raw(Model.ProductPrice.NoteWithDiscount)</span>

						<span class="product-price with-discount current">
							<span class="product-price-with-discount" itemprop="price" content="@Model.ProductPrice.PriceWithDiscountValue.ToString("F", CultureInfo.InvariantCulture)">
								@Html.Raw(Model.ProductPrice.PriceWithDiscount)
							</span>
						</span>
					</div>
                }                  
            </div>
			<meta itemprop="priceCurrency" content="@WorkContext.WorkingCurrency.CurrencyCode" />
        }
        else
        {
            <h4 class="call-for-price">@T("Products.CallForPrice")</h4>
        }

        <!-- base price -->
        <div class="base-price text-muted @(!Model.IsBasePriceEnabled ? "hide fade" : "")">
            @Model.BasePriceInfo
        </div>

        <!-- delivery time -->			
		@if (Model.DisplayDeliveryTime && Model.IsShipEnabled)
        {
			<div class="delivery-time">
				<span class="delivery-time-label">@T("Products.DeliveryTime")</span>

				@if (Model.DisplayDeliveryTimeAccordingToStock)
                {
                    <span class="delivery-time-color" style="background-color:@(Model.DeliveryTimeHexValue);@(Model.DeliveryTimeHexValue.HasValue() ? "" : "display:none;")" title="@Model.DeliveryTimeName"></span>
                    <span class="delivery-time-value">@Model.DeliveryTimeName</span>
                }
                else
                {
					<span class="delivery-time-color" style="display: none;" title="@Model.StockAvailability"></span>
                    <span class="delivery-time-value">@Model.StockAvailability</span>
                }
			</div>
        }

        @if (Model.ShowLegalInfo)
        {
            <div class="text-muted legal-info">
                @Html.Raw(Model.LegalInfo)
            </div>
        }
        
    </div>
    <div class="add-to-cart line">
        <div class="form-inline clearfix" style="text-align:right;@(Model.IsAvailable ? "" : "display:none;")">
            @if (!Model.AddToCart.DisableBuyButton)
            {
                if (!Model.ProductPrice.CallForPrice)
                {
                    @Html.LabelFor(model => Model.AddToCart.EnteredQuantity, new { @class = "qty-label" })<text>:</text>
                    if (Model.AddToCart.AllowedQuantities.Count > 0)
                    {
                        @Html.DropDownListFor(model => Model.AddToCart.EnteredQuantity, Model.AddToCart.AllowedQuantities, new { @class = "qty-dropdown" })
                    }
                    else
                    {
                        @Html.TextBoxFor(model => Model.AddToCart.EnteredQuantity, new { @class = "qty-input", style = "width:60px" })

                        <script type="text/javascript">
                            $(function () {
                                $(".qty-input").TouchSpin({
                                    min: @Model.AddToCart.MinOrderAmount,
                                    max: @Model.AddToCart.MaxOrderAmount,
                                    step: 1,
                                    buttondown_class: "btn btn-secondary",
                                    buttonup_class: "btn btn-secondary"
                                });
                            });
                        </script>
                    }

                    //if display measure unit
                    <span style="margin-right: 5px;">
                        @Model.QuantityUnitName
                    </span>

                    <a class="btn btn-warning add-to-cart-button ajax-cart-link" 
                        href="#"
					    rel="nofollow"
                        data-href='@Url.Action("AddProduct", "ShoppingCart", new { productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })' 
                        data-form-selector="#product-details-form"
                        data-type="cart"
                        data-action="add">
                        @(Model.AddToCart.AvailableForPreOrder ? T("ShoppingCart.PreOrder") : T("ShoppingCart.AddToCart"))
                        <i class="fa fa-cart-plus"></i>
                    </a>
                }
                else
                {
					<a class="btn btn-warning add-to-cart-button" rel="nofollow" href="@Url.Action("AskQuestion", "Product", new { id = Model.Id })">
						<i class="fa fa-envelope"></i>
						@T("Products.CallForPrice.GoToForm")
					</a>
                }
            }
        </div>
        
    </div>
}

@{ Html.RenderWidget("productdetails_add_info"); }