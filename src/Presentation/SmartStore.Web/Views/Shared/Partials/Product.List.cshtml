@model ProductSummaryModel

@using SmartStore.Core.Domain.Media;
@using SmartStore.Utilities;
@using SmartStore.Web.Models.Catalog;

@{
	var id = "artlist-" + CommonHelper.GenerateRandomDigitCode(10);
	//var maxPictureSize = Model.Select(x => x.DefaultPictureModel)
	//	.Where(x => x != null)
	//	.Max(x => x.Size);

	// TODO: (mc) Fetch this from the (new) parent model or the product category
	var thumbAspectRatio = EngineContext.Current.Resolve<MediaSettings>().DefaultThumbnailAspectRatio;
	var paddingTop = string.Empty;

	if (thumbAspectRatio != 1 && thumbAspectRatio > 0.2 && thumbAspectRatio < 2)
	{
		paddingTop = (thumbAspectRatio * 100) + "%";
	}

	string paginatorHtml = null;
	if (Model.AllowPagination && Model.Items.Any())
	{
		paginatorHtml = Html.SmartStore()
			.Pager(Model.Products)
			.HtmlAttributes(new { @class = "artlist-paginator" })
			.Alignment(PagerAlignment.Right)
			.Name("pagination")
			.QueryParam("i")
			.Size(PagerSize.Medium)
			.MaxPagesToDisplay(5)
			.ToString();
	}

	var hasActions = (Model.AllowPagination && Model.Products.TotalPages > 1) 
		|| Model.AllowSorting 
		|| Model.AllowViewModeChanging 
		|| Model.AvailablePageSizes != null;
}

@if (paddingTop.HasValue())
{
	<style type="text/css">
		#@id .art-picture { 
			padding-top: @paddingTop;
		}
	</style>
}

@if (hasActions)
{
	Html.RenderPartial("Product.List.Actions", Model);
}

@*<div style="border-bottom: 1px solid #ddd" class="m-b-2">
	@if (paginatorHtml.HasValue())
	{
		@Html.Raw(paginatorHtml)
	}
</div>*@

<div id="@id" class="artlist artlist-grid artlist-4-cols">
	@foreach (var product in Model.Items)
	{
		Html.RenderPartial("Product.List.Item", product);
	}
</div>

@if (paginatorHtml.HasValue())
{
	@Html.Raw(paginatorHtml)
}
