@using SmartStore.Services.Cms

@functions
{
    private string Value => ViewData.Model != null ? Convert.ToString(ViewData.Model) : null;

    private dynamic GetTypeInfos(LinkType type)
    {
        switch (type)
        {
            case LinkType.Product:
                return new { icon = "fa fa-cube", name = T("Common.Entity.Product").Text };
            case LinkType.Category:
                return new { icon = "fa fa-sitemap", name = T("Common.Entity.Category").Text };
            case LinkType.Manufacturer:
                return new { icon = "far fa-building", name = T("Common.Entity.Manufacturer").Text };
            case LinkType.Topic:
                return new { icon = "far fa-file", name = T("Common.Entity.Topic").Text };
            case LinkType.File:
                return new { icon = "far fa-folder-open", name = T("Common.File").Text };
            case LinkType.Url:
            default:
                return new { icon = "fa fa-link", name = T("Common.Url").Text };
        }
    }
}

@{
    var rnd = CommonHelper.GenerateRandomInteger();
    var id = ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty);
    var link = this.CommonServices.Resolve<ILinkResolver>().Resolve(Value);

    var arr = GetMetadata<string>("allowedTypes").SplitSafe(",");
    var allowedTypes = arr.Any()
        ? arr.Select(x => (LinkType)Enum.Parse(typeof(LinkType), x, true)).ToArray()
        : Enum.GetValues(typeof(LinkType)).Cast<LinkType>().ToArray();
}

<div id="link-builder-@rnd" class="link-builder">
    <div class="d-flex flex-nowrap input-group">
        @* Template control that receives the link expression. *@
        @Html.TextBox("", link.GetExpression(false), new { type = "hidden" })
        @* 1. prepend type selector. *@
        <div class="input-group-prepend type-container">
		    <button id="btn-type-@rnd" type="button" class="btn btn-secondary btn-icon dropdown-toggle" data-toggle="dropdown" title="">
			    <i class="fa fa-link"></i>
		    </button>
            <div class="dropdown-menu">
                @foreach (var type in allowedTypes)
                {
                    var info = GetTypeInfos(type);
                    <a class="dropdown-item link-type" href="#" data-type="@type.ToString().ToLower()">
                        <i class="fa-fw @info.icon"></i>
                        <span>@info.name</span>
                    </a>
                }
                <div class="qs-menu-container">
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item link-type" href="#" data-type="query-string">
                        <i class="fas @(link.QueryString.HasValue() ? "fa-check text-success" : "fa-minus text-muted")"></i>
                        <span>@T("Common.QueryString")</span>
                    </a>
                </div>
            </div>
        </div>
        @* 2. main control. *@
        @foreach (var type in allowedTypes)
        {
            var label = link.Type == type ? link.Label : string.Empty;
            var value = link.Type == type && link.Value != null ? link.Value.ToString() : string.Empty;
            <div class="flex-grow-1 link-control@(link.Type == type ? "" : " hide")" data-type="@type.ToString().ToLower()">
                @if (type == LinkType.Product)
                {
                    <input id="lb-product-name-@rnd" type="text" class="form-control resettable" value="@label" readonly />
                }
                else if (type == LinkType.Category)
                {
                    <select class="form-control transferable resettable" 
                            data-select-url="@Url.Action("AllCategories", "Category", new { area = "admin" })"
                            data-select-selected-id="@value"
                            data-select-init-text="@label"></select>
                }
                else if (type == LinkType.Manufacturer)
                {
                    <select class="form-control transferable resettable" 
                            data-select-url="@Url.Action("AllManufacturers", "Manufacturer", new { area = "admin" })"
                            data-select-selected-id="@value"
                            data-select-init-text="@label"></select>
                }
                else if (type == LinkType.Topic)
                {
                    <select class="form-control transferable resettable" 
                            data-select-url="@Url.Action("AllTopics", "Topic", new { area = "admin" })"
                            data-select-selected-id="@value"
                            data-select-init-text="@label"></select>
                }
                else if (type == LinkType.Url)
                {
                    <input type="text" class="form-control transferable resettable" value="@value" />
                }
                else if (type == LinkType.File)
                {
                    <input id="lb-file-url-@rnd" type="text" class="form-control transferable resettable" value="@label" readonly />
                }
            </div>
        }
        <div class="flex-grow-1 link-control hide" data-type="query-string">
            <input id="lb-query-string-@rnd" type="text" class="form-control transferable resettable" value="@link.QueryString" />
        </div>
        @* 3. append additional controls. *@
        @if (allowedTypes.Contains(LinkType.Product))
        {
	        <script>
                function lbPickerSelectionCompleted@(rnd)(ids, selectedItems) {
                    var val = 'product:' + ids[0];
                    var qs = $('#lb-query-string-@rnd').val() || '';
                    while (qs.startsWith('?')) {
                        qs = qs.substring(1);
                    }
                    if (!_.isEmpty(qs)) {
                        val = val + '?' + qs;
                    }
                    $('#@id').val(val);
                    $('#lb-product-name-@rnd').val(selectedItems[0].name);
                    return true;
                }
	        </script>
            <div class="input-group-append link-control@(link.Type == LinkType.Product ? "" : " hide")" data-type="product">
		        @(Html.SmartStore().EntityPicker()
                    .HtmlAttribute("id", "lb-product-picker-" + rnd.ToString())
                    .MaxItems(1)
                    .AppendMode(false)
                    .DialogTitle(T("Common.Entity.SelectProduct").Text.EncodeJsString('\'', false))
                    .Caption(T("Common.Search").Text.EncodeJsString('\'', false))
                    .OnSelectionCompleted("lbPickerSelectionCompleted" + rnd.ToString()))
            </div>
        }
        @if (allowedTypes.Contains(LinkType.File))
        {
            <div class="input-group-append link-control@(link.Type == LinkType.File ? "" : " hide")" data-type="file">
                <a href="javascript:void(0)" class="btn btn-secondary browse-files" data-url="@Url.Content("~/Admin/RoxyFileManager/")" data-field-id="lb-file-url-@rnd">
                    <i class="fa fa-upload"></i>
                    <span>@(T("Common.BrowseFiles"))&hellip;</span>
                </a>
            </div>
        }
        @* 4. append reset button. *@
        <div class="input-group-append">
			<button type="button" class="btn btn-secondary btn-to-danger btn-reset" title="@T("Common.Remove")">
				<i class="fa fa-times"></i>
			</button>
        </div>
    </div>
</div>

<script>
    $(function () {
        var container = $('#link-builder-@(rnd)'),
            ctrl = container.find('#@(id)'),
            controls = container.find('div.link-control'),
            qsCtrl = container.find('#lb-query-string-@rnd');

        // Set type selector to initial type from current expression.
        updateTypeInfo(container.find('a[data-type="@(link.Type.ToString().ToLower())"]'));

        // Init controls.
        controls.find('select').selectWrapper();
        controls.find('.select2-container').addClass('w-100');

		// Switch link type.
		container.on('click', '.link-type', function (e) {
            e.preventDefault();
            var el = $(this),
                newCtrl = controls.filter('[data-type="' + el.data('type') + '"]');

            controls.hide();
            newCtrl.show();
            updateTypeInfo(el);
            
            _.delay(function () { newCtrl.first().find(':input:first:not([readonly])').focus() }, 100);
        });

        // Reset all values.
        container.on('click', 'button.btn-reset', function () {
            ctrl.val('');
            qsCtrl.val('');
            controls.find('.resettable:visible').val('').trigger('change');

            container.find('.link-type[data-type="query-string"]').find('i:first')
                .attr('class', 'fas fa-minus text-muted');

            // TODO: find a better way to do this.
            var select2 = controls.find('.select2:visible');
            if (select2.length) {
                var label = select2.find('.selection .select2-selection__rendered');
                if (label.length) {
                    label.removeAttr('title').html('');
                }
            }
        });

        // Browse files.
        container.on('click', '.browse-files', function (e) {
            e.preventDefault();
            var el = $(this),
                url = el.data('url');

            url = modifyUrl(url, 'type', '#');
            url = modifyUrl(url, 'field', el.data('field-id'));
            url = modifyUrl(url, 'mid', 'modal-browse-files');

            openPopup({
                id: 'modal-browse-files',
                url: url,
                flex: true,
                large: true,
                backdrop: false
            });
        });

        // Build expression and transfer to token input.
        container.on('change', '.transferable', function () {
            $el = $(this);
            var type = $el.closest('.link-control').data('type');
            var val, qs = getQueryString();

            // Get link excluding query string.
            if (type === 'query-string') {
                val = ctrl.val();
                var index = val.indexOf('?');
                if (index !== -1) {
                    val = val.substring(0, index);
                }
            }
            else {
                val = $el.val();
                if (!_.isEmpty(val) && type !== 'url') {
                    val = type + ':' + val;
                }
            }

            if (type !== 'url' && !_.isEmpty(val) && !_.isEmpty(qs)) {
                val = (val || '') + '?' + qs;
            }

            container.find('.link-type[data-type="query-string"]').find('i:first')
                .attr('class', _.isEmpty(qs) ? 'fas fa-minus text-muted' : 'fas fa-check text-success');

            ctrl.val(val);
            //console.log('change ' + ctrl.val());
        });


        function updateTypeInfo(el) {
            if (!el) return;

            var type = el.data('type');
            if (type === 'query-string') return;

            var btn = $('#btn-type-@(rnd)'),
                icon = el.find('i').first().attr('class').replace('fa-fw ', ''),
                name = el.find('span').first().text();

            btn.find('i').attr('class', icon);
            btn.attr('title', name);

            container.find('.qs-menu-container').toggle(type !== 'url');
        }

        function getQueryString() {
            var val = qsCtrl.val() || '';
            while (val.startsWith('?')) {
                val = val.substring(1);
            }
            return val;
        }
    });
</script>