@functions{   
    private DateTime? Value
    {
        get
        {
            DateTime? value = null;
            if (ViewData.Model != null)
            {
                value = Convert.ToDateTime(ViewData.Model, System.Globalization.CultureInfo.CurrentCulture);
            }
            return value;
        }
    }
	
	private bool PickTime
	{
		get
		{
			if (ViewData.ContainsKey("pickTime"))
			{
				return ViewData["pickTime"].Convert<bool>();
			}
			else if (ViewData.ContainsKey("pickTimeFieldIds"))
			{
				var ids = ViewData["pickTimeFieldIds"] as List<string>;
				var id = ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty);
				return ids.Contains(id);
			}
			return false;
		}
	}
}

@{
    var id = ViewData.TemplateInfo.GetFullHtmlFieldId(string.Empty);
	var format = PickTime ? "L LT" : "L";
    var value = String.Empty;
    if (Value.HasValue && Value.Value > DateTime.MinValue)
	{
		value = PickTime ? Value.Value.ToString() : Value.Value.ToShortDateString();
    }
}

<div class="input-group date datetimepicker-group" id="@id-parent" data-date="@value" data-target-input="nearest">
	<span class="input-group-addon" data-target="#@(id)-parent" data-toggle="datetimepicker">
		<i class="fa fa-calendar"></i>
	</span>
    @Html.TextBox("", value, new { @class = "form-control datetimepicker-input", data_target = "#" + id + "-parent", data_format = format })
</div>

<script>
	$(function () {
		console.log("DateTimePicker Render: ", $.smartstore.globalization.culture);
		$("#@(id)-parent").datetimepicker({ locale: 'glob', format: '@(format)', keepOpen: false, collapse: true });
    });
</script>


