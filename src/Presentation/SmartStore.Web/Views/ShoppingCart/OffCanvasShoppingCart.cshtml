@model MiniShoppingCartModel

@using SmartStore.Web.Models.ShoppingCart;

@{
	int descMaxLength = Model.ShowProductImages ? 100 : 140;
	int attrMaxLength = Model.ShowProductImages ? 50 : 70;
}

<div class="offcanvas-cart-body">
	@if (Model.TotalProducts == 0)
	{
		<div class="no-items">
			<h4 class="no-item-title">
				@T("ShoppingCart.Mini.EmptyCart.Title")
			</h4>
			<p class="no-item-icon">
				<i class="fa fa-shopping-basket fa-4x"></i>
			</p>
			<p class="no-item-info text-muted">
				@T("ShoppingCart.Mini.EmptyCart.Info", "fa fa-lg fa-cart-arrow-down")
			</p>
		</div>
	}

    @if (Model.TotalProducts > 0)
	{
		// Items added in the last 2 seconds are considered to be current
		var currentItem = Model.Items.FirstOrDefault(x => x.CreatedOnUtc >= DateTime.UtcNow.AddSeconds(-2));

		if (currentItem != null)
		{
			<div class="alert alert-success alert-dismissible fade in" role="alert">
				<button type="button" class="close" data-dismiss="alert" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
				@Html.Raw(T("ShoppingCart.Mini.AddedItemToCart", "<strong>" + currentItem.ProductName.Truncate(50, "...") + "</strong>").Text)
			</div>
		}

		<div class="offcanvas-cart-items">
			@foreach (var item in Model.Items)
			{
				<div class="offcanvas-cart-item">
					<div class="row">
						@if (Model.ShowProductImages)
						{
							<div class="col-xs col-alpha">
								@if (item.Picture.ImageUrl.HasValue())
								{
									<a class="img-center-container" href="@item.ProductUrl" title="@item.Picture.Title">
										<img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
									</a>
								}
							</div>
						}

						<div class="col-xs col-data">
							<a class="name fw-600" href="@item.ProductUrl" title="@item.ProductName">@item.ProductName</a>
							<div class="short-desc text-muted">
								@Html.Raw(item.ShortDesc.Truncate(descMaxLength, "..."))
							</div>

							@if (item.AttributeInfo.HasValue())
							{
								<div class="attributes">
									@Html.Raw(item.AttributeInfo)
								</div>
							}

							@if (item.BundleItems.Count > 0)
							{
								<div class="mb-bundle-pictures m-t-1">
									@for (int j = 0, bundlelength = item.BundleItems.Count; j < bundlelength; j++)
									{
										var bundleItem = item.BundleItems[j];

										if (bundleItem.PictureUrl.HasValue())
										{
											<a href="@bundleItem.ProductUrl" title="@bundleItem.ProductName">
												<img alt="@bundleItem.ProductName" src="@bundleItem.PictureUrl" title="@bundleItem.ProductName" />
											</a>
										}

										if (bundlelength != (j + 1))
										{
											<i class="fa fa-plus"></i>
										}
									}
								</div>
							}
						</div>
					</div>

					<div class="row m-t-05">
						<div class="col-xs col-alpha">
							<div class="qty-input">
								<input class="form-control form-control-sm input-sm" type="text" value="@item.EnteredQuantity"
									   data-update-url="@(Url.Action("UpdateOcCartItem", "ShoppingCart"))" data-type="cart" data-sci-id="@item.Id"
									   data-min="@item.MinOrderAmount" data-max="@item.MaxOrderAmount" data-step="@item.QuantityStep" />
							</div>
						</div>
						<div class="col-xs">
							<span class="price unit-price">
								@item.UnitPrice
							</span>
						</div>

						<div class="col-xs text-xs-right">
							<a class="btn btn-secondary btn-sm btn-icon" title="In die Wunschliste verschieben">
								<i class="fa fa-heart-o"></i>
							</a>
							<a class="btn btn-secondary btn-to-danger btn-sm btn-icon remove ajax-cart-link"
							   href="#"
							   rel="nofollow"
							   data-href='@Url.Action("DeleteCartItem", "ShoppingCart", new { cartItemId = item.Id })'
							   data-name="@item.ProductName"
							   data-type="cart"
							   data-action="remove"
							   title='@T("Common.Remove")'>
								<i class="fa fa-trash-o"></i>
							</a>
						</div>
					</div>
				</div>
			}
		</div>
	}
	@{ Html.RenderWidget("mini_shopping_cart_bottom"); }
</div>

@if (Model.TotalProducts == 0)
{
	return;
}

<div class="offcanvas-cart-footer">
	<div class="offcanvas-cart-footer-row">
		<div class="offcanvas-cart-footer-col m-r-05">
			<div>
				<div class="sub-total-caption">
					@T("ShoppingCart.Totals.SubTotal"):
				</div>
				<div class="sub-total price">
					@Model.SubTotal
				</div>
			</div>
		</div>
		<div class="offcanvas-cart-footer-col text-xs-right">
			@if (Model.DisplayShoppingCartButton)
			{
				if (Model.DisplayCheckoutButton)
				{
					<a class="btn btn-success btn-flat btn-flat-light btn-action" href="@Url.RouteUrl("ShoppingCart")">
						@T("ShoppingCart.Mini.ViewCart")
					</a>
				}
				else
				{
					<a class="btn btn-clear btn-action" href="@Url.RouteUrl("ShoppingCart")">
						<i class="fa fa-check"></i>
						<span>@T("ShoppingCart.Mini.ViewCart")</span>
					</a>
				}
			}

			@if (Model.DisplayCheckoutButton)
			{
				var checkoutUrl = "";
				if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
				{
					checkoutUrl = Url.Action("Login", "Customer", new { checkoutAsGuest = true, returnUrl = Url.RouteUrl("ShoppingCart") });
				}
				else
				{
					checkoutUrl = Url.RouteUrl("Checkout");
				}
				<a class="btn btn-clear btn-action" href="@checkoutUrl">
					<i class="fa fa-check"></i>
					<span>@T("Checkout.Button")</span>
				</a>
			}
		</div>
	</div>
</div>