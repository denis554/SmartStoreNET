@model MiniShoppingCartModel
@using SmartStore.Web.Models.ShoppingCart;
@{
    int descMaxLength = Model.ShowProductImages ? 120 : 140;
    int attrMaxLength = Model.ShowProductImages ? 50 : 70;
}

<div class="offcanvas-cart-body">
    <div class="no-items text-muted@(Model.TotalProducts > 0 ? " hidden-xs-up" : "")">
        @T("ShoppingCart.Mini.NoItems")
    </div>
    @if (Model.TotalProducts > 0)
    {
        <ul class="items list-unstyled">
            @for (int i = 0, length = Model.Items.Count; i < length; i++)
            {
                var item = Model.Items[i];
                string itemClass = "item clearfix";
                if (!Model.ShowProductImages)
                {
                    itemClass += " no-thumb";
                }
                if (i == 0)
                {
                    itemClass += " alpha";
                }
                if (i == length - 1 && Model.IgnoredProductsCount == 0)
                {
                    itemClass += " omega";
                }

                <li class="@itemClass card text-xs-center">

                    @if (Model.ShowProductImages)
                    {
                        <figure class="picture pull-left pull-xs-none">
							@if (item.Picture.ImageUrl.HasValue())
                            {
								<a href="@item.ProductUrl" title="@item.Picture.Title">
									<img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                </a>
                            }
                        </figure>
                    }

                    <div class="data pull-left text-xs-left">
                        <a class="name" href="@item.ProductUrl" title="@item.ProductName">@item.ProductName</a>
                        <p class="short-desc">
                            @Html.Raw(item.ShortDesc.Truncate(descMaxLength, "..."))
                        </p>
                        @if (item.AttributeInfo.HasValue())
                        {
                            <br />
                            <span class="attributes text-muted" title="@item.AttributeInfo">
                                @Html.Raw(item.AttributeInfo.Truncate(attrMaxLength, "..."))
                            </span>
                        }
                    </div>

                    <div class="price pull-right text-nowrap">
                        @item.UnitPrice
                    </div>

                    @if (item.BundleItems.Count > 0)
                    {
                        <div class="clearfix"></div>

                        <div class="mb-bundle-pictures">
                            @for (int j = 0, bundlelength = item.BundleItems.Count; j < bundlelength; j++)
                            {
                                var bundleItem = item.BundleItems[j];

                                if (bundleItem.PictureUrl.HasValue())
                                {
									<a href="@bundleItem.ProductUrl" title="@bundleItem.ProductName">
										<img alt="@bundleItem.ProductName" src="@bundleItem.PictureUrl" title="@bundleItem.ProductName" /></a>
                                }

                                if (bundlelength != (j + 1))
                                {
                                    <i class="fa fa-plus"></i>
                                }
                            }        
                        </div>
                    }

                    <div class="toolbar">
                        <div class="qty-input">
                            <input class="input-sm form-control" type="text" value="@item.Quantity" data-update-url="@(Url.Action("UpdateOcCartItem", "ShoppingCart"))"
                                   data-sci-id="@item.Id" data-min-qty="1" data-max-qty="1000" data-qty-step="1" data-type="cart" />
                        </div>
                        
                        <a class="btn btn-danger btn-sm btn-icon remove ajax-cart-link"
                           href="#"
                           rel="nofollow"
                           data-href='@Url.Action("DeleteCartItem", "ShoppingCart", new { cartItemId = item.Id })'
                           data-name="@item.ProductName"
                           data-type="cart"
                           data-action="remove"
                           title='@T("Common.Remove")'>
                            <i class="fa fa-trash-o"></i>
                        </a>
                    </div>
                </li>
            }
            @if (Model.IgnoredProductsCount > 0)
            {
                string resId = "ShoppingCart.Mini.More.{0}".FormatInvariant(Model.IgnoredProductsCount == 1 ? "Singular" : "Plural");
                <li class="item more omega">
                    <a class="name" href="@Url.RouteUrl("ShoppingCart")">
                        @(T(resId).ToString().FormatInvariant(Model.IgnoredProductsCount))...
                    </a>
                </li>
            }
        </ul>
    }
	@{ Html.RenderWidget("mini_shopping_cart_bottom"); }
</div>

<div class="summary clearfix">
    <div class="pull-left">
        @T("ShoppingCart.Totals.SubTotal"):
    </div>
    <div class="price pull-right">
        @Model.SubTotal
    </div>
</div>

<div class="buttons clearfix">
    @if (Model.DisplayShoppingCartButton)
            {
        <a class="btn btn-primary pull-left" href="@Url.RouteUrl("ShoppingCart")">
            @T("ShoppingCart.Mini.ViewCart")
            <i class="fa fa-shopping-cart" style="display: none"></i>
        </a>
    }
    @if (Model.DisplayCheckoutButton)
    {
        var checkoutUrl = "";
        if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
        {
            checkoutUrl = Url.Action("Login", "Customer", new { checkoutAsGuest = true, returnUrl = Url.RouteUrl("ShoppingCart") });
        }
        else
        {
            checkoutUrl = Url.RouteUrl("Checkout");
        }
        <a class="btn btn-warning pull-right" href="@checkoutUrl">
			<span>@T("Checkout.Button")</span>
            <i class="fa fa-caret-right"></i>
        </a>
    }
</div>