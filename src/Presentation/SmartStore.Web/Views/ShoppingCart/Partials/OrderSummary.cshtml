@model ShoppingCartModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web.Models.ShoppingCart;

@helper SimpleProduct(ShoppingCartModel.ShoppingCartItemModel item)
{
    <div class="cart-row">
        <div class="cart-col cart-col-main">
            <div class="row sm-gutters">
                @if (Model.ShowProductImages)
                {
                    <div class="col cart-item-img">
                        @if (item.Picture.ImageUrl.HasValue())
                        {
                            <img class="img-fluid" alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                        }
                    </div>
                }

                <div class="col">
                    <a class="cart-item-link" href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>

                    @if (Model.DisplayShortDesc && !String.IsNullOrEmpty(item.ShortDesc))
                    {
                        <div class="short-desc">
                            @Html.Raw(item.ShortDesc)
                        </div>
                    }

                    @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(item.BasePrice))
                    {
                        <div class="base-price text-muted text-smaller">
                            @item.BasePrice
                        </div>
                    }

                    <div class="sci-attributes text-smaller my-2">
                        @if (Model.DisplayDeliveryTime && item.IsShipEnabled && (!String.IsNullOrEmpty(item.DeliveryTimeName) && !String.IsNullOrEmpty(item.DeliveryTimeHexValue)))
                        {
                            <div class="deliverytime-group row sci-attr">
                                <span class="col-12 col-sm-3 col-md-12 col-lg-3">@T("Products.DeliveryTime")</span>
                                <span class="delivery-time col-12 col-sm-9 col-md-12 col-lg-9" style="color:@item.DeliveryTimeHexValue" title="@item.DeliveryTimeName">
                                    <i class="fa fa-circle delivery-time-status"></i>
                                    @item.DeliveryTimeName
                                </span>
                            </div>
                        }

                        @if (Model.ShowSku)
                        {
                            <div class="text-nowrap row sci-attr">
                                <span class="col-12 col-sm-3 col-md-12 col-lg-3">@T("ShoppingCart.SKU"):</span>
                                <span class="col-12 col-sm-9 col-md-12 col-lg-9">@item.Sku</span>
                            </div>
                        }

                        @if (Model.DisplayWeight)
                        {
                            <div class="text-nowrap row sci-attr">
                                <span class="col-12 col-sm-3 col-md-12 col-lg-3">@T("ShoppingCart.Weight"):</span>
                                <span class="col-12 col-sm-9 col-md-12 col-lg-9">@((item.Weight * item.EnteredQuantity).ToString("N2")) @Model.MeasureUnitName</span>
                            </div>
                        }
                    </div>

                    @if (!String.IsNullOrEmpty(item.AttributeInfo))
                    {
                        <div class="attributes text-muted text-smaller mb-2">
                            @Html.Raw(item.AttributeInfo)
                        </div>
                    }
                    @if (!String.IsNullOrEmpty(item.RecurringInfo))
                    {
                        <div class="recurring-info">
                            @Html.Raw(item.RecurringInfo)
                        </div>
                    }
                    @if (!Model.IsEditable && item.IsDownload && item.HasUserAgreement)
                    {
                        <div class="download-agreement checkbox">
                            <label class="form-check-label">
                                <input type="checkbox" name="AgreeUserAgreement@(item.ProductId)" class="form-check-input" />
                                @T("DownloadableProducts.UserAgreementConfirmation", item.ProductId)
                            </label>
                        </div>
                    }
                    @if (!Model.IsEditable && Model.DisplayEsdRevocationWaiverBox && item.IsEsd)
                    {
                        <div class="esd-revocation-waiver checkbox">
                            <label class="form-check-label">
                                <input type="checkbox" name="AgreeEsdRevocationWaiver@(item.ProductId)" class="form-check-input" />
                                @T("Checkout.EsdRevocationWaiverConfirmation")
                            </label>
                        </div>
                    }
                    @if (item.Warnings.Count > 0)
                    {
                        <div class="alert alert-danger">
                            @for (int i = 0; i < item.Warnings.Count; i++)
                            {
                                <p>@item.Warnings[i]</p>
                            }
                        </div>
                    }
                </div>
				
				@if (Model.IsEditable)
				{
					<div class="col col-auto">
						<div class="cart-row-actions btn-group-vertical card-shadow">
							<a class="btn btn-gray btn-to-danger btn-sm btn-icon xbtn-flat ajax-cart-link"
							   href="#"
							   rel="nofollow"
							   data-href='@Url.Action("DeleteCartItem", "ShoppingCart", new { cartItemId = item.Id })'
							   data-name="@item.ProductName"
							   data-type="cart"
							   data-action="remove"
							   title='@T("Common.Remove")'>
								<i class="fa fa-2x">×</i>
							</a>
							<a class="btn btn-secondary btn-sm btn-icon xbtn-flat ajax-cart-link" title='@T("ShoppingCart.MoveToWishlist")'
							   href="#"
							   rel="nofollow"
							   data-href="@Url.Action("MoveItemBetweenCartAndWishlist", "ShoppingCart", new { cartItemId = item.Id, cartType = ShoppingCartType.ShoppingCart })"
							   data-name="@item.ProductName"
							   data-type="cart"
							   data-action="addfromcart">
								<i class="fa fa-heart-o"></i>
							</a>
						</div>
					</div>
				}
            </div>
        </div>

        <div class="cart-col cart-col-price" data-caption="@T("Order.Product(s).Price")">
            <span class="price">@item.UnitPrice</span>
        </div>

        <div class="cart-col cart-col-qty" data-caption="@T("Order.Product(s).Quantity")">
            @if (Model.IsEditable)
            {
                @Html.EditorFor(x => item, "QtyInput", new { htmlAttributes = new { data_sci_id = item.Id, id = "itemquantity{0}".FormatWith(item.Id), Name = "itemquantity{0}".FormatWith(item.Id) } })
            }
            else
            {
                <span>@item.EnteredQuantity</span>
            }
        </div>

        <div class="cart-col cart-col-price cart-col-subtotal" data-caption="@T("Order.Product(s).Total")">
            <span class="price">@item.SubTotal</span>
            @if (!String.IsNullOrEmpty(item.Discount))
            {
                <div class="discount">
                    @T("ShoppingCart.ItemYouSave"):<br/> @item.Discount
                </div>
            }
        </div>
    </div>
}

@helper BundleProducts(ShoppingCartModel.ShoppingCartItemModel parentItem)
{
    if (parentItem.ChildItems != null)
    {
        foreach (var item in parentItem.ChildItems.OrderBy(x => x.BundleItem.DisplayOrder))
        {
            <div class="cart-row cart-row-child">
                <div class="cart-col cart-col-main">
                    <div class="product">
                        <div class="bundle-item">
                            @if (Model.ShowProductBundleImages)
                            {
                                <div class="bundle-item-image" style="@("min-width: {0}px; min-height: {0}px;".FormatInvariant(Model.BundleThumbSize + 10))">
                                    @if (item.Picture.ImageUrl.HasValue() && !item.BundleItem.HideThumbnail)
                                    {
                                        <img src="@item.Picture.ImageUrl" alt="@item.Picture.AlternateText" title="@item.Picture.Title" />
                                    }
                                </div>
                            }
                            <div class="bundle-item-body">
                                <div class="bundle-item-name">
                                    @if (item.VisibleIndividually)
                                    {
                                        <a class="cart-item-link" href="@item.ProductUrl" title="@T("Products.Details")">@item.ProductName</a>
                                    }
                                    else
                                    {
										<span class="cart-item-link">@item.ProductName</span>
                                    }
                                    @if (item.EnteredQuantity > 1 && item.BundlePerItemShoppingCart)
                                    {
                                        <text>&#215;&nbsp;@item.EnteredQuantity</text>
                                    }
                                </div>
                                @if (Model.DisplayShortDesc && !String.IsNullOrWhiteSpace(item.ShortDesc))
                                {
                                    <div class="bundle-item-description short-desc text-smaller">
                                        @Html.Raw(item.ShortDesc.Truncate(210, "..."))
                                    </div>
                                }
                                @if (Model.DisplayBasePrice && !String.IsNullOrEmpty(item.BasePrice))
                                {
                                    <div class="base-price text-muted">
                                        @item.BasePrice
                                    </div>
                                }
                                @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                {
                                    <div class="bundle-item-attribute-info text-muted">
                                        @Html.Raw(item.AttributeInfo)
                                    </div>
                                }
                                @if (item.Warnings.Count > 0)
                                {
                                    <div class="alert alert-danger">
                                        @foreach (var warning in item.Warnings)
                                        {
                                            <p>@warning</p>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="cart-col cart-col-price">
                    @if (!String.IsNullOrWhiteSpace(item.BundleItem.PriceWithDiscount))
                    {
                        @Html.Raw(item.BundleItem.PriceWithDiscount)
                    }
                    else
                    {
                        <text>&nbsp;</text>
                    }
                </div>
                <div class="cart-col">&nbsp;</div>
                <div class="cart-col">&nbsp;</div>
            </div>
        }
    }
}

<div class="order-summary-content">

    @{ Html.RenderWidget("order_summary_content_before"); }

    @{ Html.RenderPartial("_OrderReviewData", Model.OrderReviewData); }

    @if (Model.DisplayCommentBox && !Model.IsEditable)
    {
        Html.RenderPartial("_CommentBox", Model);
    }

    @if (!Model.IsEditable && (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None || Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None))
    {
        <div class="card newsletter-subscription mb-3">
            <div class="card-header h5">
                <span>@T("Common.Options")</span>
            </div>
            <div class="card-block">
                @if (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None)
                {
                    <div class="checkbox">
                        <label class="form-check-label">
                            <input type="checkbox" name="SubscribeToNewsLetter" class="form-check-input" @(Model.NewsLetterSubscription == CheckoutNewsLetterSubscription.Activated ? "checked='checked'" : "") />
                            @T("Checkout.SubscribeToNewsLetter")
                        </label>
                    </div>
                }
                @if (Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None)
                {
                    <div class="checkbox">
                        <label class="form-check-label">
                            <input type="checkbox" name="AcceptThirdPartyEmailHandOver" class="form-check-input" @(Model.ThirdPartyEmailHandOver == CheckoutThirdPartyEmailHandOver.Activated ? "checked='checked'" : "") />
                            @Model.ThirdPartyEmailHandOverLabel
                        </label>
                    </div>
                }
            </div>
        </div>
    }

    @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
    {
        <div class="selected-checkout-attributes card card-block text-left">
            @Html.Raw(Model.CheckoutAttributeInfo)
        </div>
    }

    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="alert alert-danger">
                <ul>
                    @for (int i = 0; i < Model.Warnings.Count; i++)
                    {
                        <li>@Model.Warnings[i]</li>
                    }
                </ul>
            </div> 
        }

        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
        using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="card mb-4">
				<div id="order-items" class="cart cart-editable mb-0">
					<div class="cart-head">
						<div class="cart-row">
							<div class="cart-col cart-col-main">
								@T("ShoppingCart.Product(s)")
							</div>
							<div class="cart-col cart-col-price">
								@T("ShoppingCart.UnitPrice")
							</div>
							<div class="cart-col cart-col-qty">
								@T("ShoppingCart.Quantity")
							</div>
							<div class="cart-col cart-col-price cart-col-subtotal">
								@T("ShoppingCart.ItemTotal")
							</div>
						</div>
					</div>
					<div class="cart-body">
						@foreach (var item in Model.Items)
						{
							if (item.ProductType == ProductType.BundledProduct)
							{
								@SimpleProduct(item)
								@BundleProducts(item)
							}
							else
							{
								@SimpleProduct(item)
							}
						}
					</div>
				</div>

			</div>

            if (Model.IsEditable)
            {
                <div class="common-buttons clearfix">
                    <button type="submit" name="updatecart" value="updatecart" class="btn btn-secondary pull-right update-cart-button">
                        <i class="fa fa-refresh"></i>
                        <span>@T("ShoppingCart.UpdateCart")</span>
                    </button>
                    <button type="submit" name="continueshopping" value="continueshopping" class="btn btn-secondary pull-left continue-shopping-button">
                        <i class="fa fa-caret-left"></i>
                        <span>@T("ShoppingCart.ContinueShopping")</span>
                    </button>
                    <input type="submit" name="startcheckout" value="startcheckout" id="startcheckout" style="display: none;" />
                </div>
            }

            <div class="cart-footer row mt-5">

                <div class="col-lg-8 order-totals-left">

                    @{ Html.RenderWidget("order_summary_content_totals_left"); }

                    @if (Model.IsEditable)
                    {
                        <div class="row">
                            <!-- Discount Code, Gift Cards, Estimate shipping -->
                            <div class="col-sm-6">
                                @{
                                    Html.RenderPartial("_DiscountBox", Model.DiscountBox);
                                    Html.RenderPartial("_GiftCardBox", Model.GiftCardBox);
                                }
                                @{ Html.RenderWidget("order_summary_content_deals"); }
                            </div>

                            <!-- Checkout attributes -->
                            <div class="col-sm-6">
                                @{
                                    Html.RenderPartial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary());
                                    Html.RenderPartial("EstimateShipping", Model.EstimateShipping);
                                }
                            </div>
                        </div>
                     }
                </div>

                <!-- Totals -->
                <div class="col-lg-4">
                    @if (Model.IsEditable && !String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                    {
                        <div class="alert alert-info" style="margin-top: 0">
                            @Model.MinOrderSubtotalWarning
                        </div>
                    }

                    @{ Html.RenderAction("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable }); }

                    @{ Html.RenderWidget("order_summary_content_totals_bottom"); }

                    @if (Model.IsEditable)
                    {
                        if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="checkout-buttons clearfix">

                                <button type="button"
                                        class="btn btn-primary btn-large pull-right checkout-button"
                                        id="checkout"
                                        name="checkout"
                                        onclick="$('#startcheckout').trigger('click'); return false;">
                                    @T("Checkout.Button")&nbsp;
                                    <i class="fa fa-arrow-right" style="font-size: 18px"></i>
                                </button>

                            </div>

                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express, Pay with Amazon)*@
                                @foreach (var item in Model.ButtonPaymentMethods.Items)
                                {
                                    Html.RenderAction(item.ActionName, item.ControllerName, item.RouteValues);
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        }

        Html.RenderWidget("order_summary_content_after");

        if (Model.IsEditable)
        {
            Html.RenderAction("CrossSellProducts", "Product");
        }
    }
    else
    {
        <div class="alert alert-info fade show">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
</div>

@if (!Model.IsEditable && Model.Items.Any(x => x.IsDownload && x.HasUserAgreement))
{
    using (Html.BeginZoneContent("end", key: "user-agreement-modal"))
    {
        <div id="user-agreement-modal" class="modal modal-flex fade" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-body p-3"></div>
                    <div class="modal-footer">
                        <button class="btn" data-dismiss="modal">@T("Common.Confirm")</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <script type="text/javascript">
        $(document).ready(function () {
            $('a.download-user-agreement').on("click", function () {
                var url = '@(Url.Action("GetUserAgreement", "Download"))?productId=' + $(this).attr('data-id'),
                    dialog = $('#user-agreement-modal');

                dialog.find('.modal-body').empty();

                $.get(url, function (html) {
                    dialog.find('.modal-body').html(html);
                });

                dialog.modal();

                return false;
            });
        });
    </script>
}

@if (Model.IsEditable)
{
    <script type="text/javascript">
        $(".order-summary-content .ajax-cart-link").on("click", function () {
            //if there is more then one line
            if ($(".product-body[style!='display: none;']").length > 1) {
                var itemLine = $(this).closest(".product-body");
                itemLine.slideUp();
            }
            else {
                //reload page
                location.reload();
            }
        });

        // React to touchspin change
        $('.order-summary-content').on('change', '.qty-input .form-control', function (e) {
            var el = $(this);
            
            // TODO
        });

    </script>
}
