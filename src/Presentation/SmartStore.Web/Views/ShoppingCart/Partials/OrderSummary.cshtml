@model ShoppingCartModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Web.Models.ShoppingCart;

<div class="order-summary-content">

    @{ Html.RenderWidget("order_summary_content_before"); }

    @{ Html.RenderPartial("_OrderReviewData", Model.OrderReviewData); }

    @if (Model.DisplayCommentBox && !Model.IsEditable)
    {
        Html.RenderPartial("_CommentBox", Model);
    }

    @if (!Model.IsEditable && (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None || Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None))
    {
        <div class="card newsletter-subscription mb-3">
            <div class="card-header h5">
                <span>@T("Common.Options")</span>
            </div>
            <div class="card-block">
                @if (Model.NewsLetterSubscription != CheckoutNewsLetterSubscription.None)
                {
                    <div class="checkbox">
                        <label class="form-check-label">
                            <input type="checkbox" name="SubscribeToNewsLetter" class="form-check-input" @(Model.NewsLetterSubscription == CheckoutNewsLetterSubscription.Activated ? "checked='checked'" : "") />
                            @T("Checkout.SubscribeToNewsLetter")
                        </label>
                    </div>
                }
                @if (Model.ThirdPartyEmailHandOver != CheckoutThirdPartyEmailHandOver.None)
                {
                    <div class="checkbox">
                        <label class="form-check-label">
                            <input type="checkbox" name="AcceptThirdPartyEmailHandOver" class="form-check-input" @(Model.ThirdPartyEmailHandOver == CheckoutThirdPartyEmailHandOver.Activated ? "checked='checked'" : "") />
                            @Model.ThirdPartyEmailHandOverLabel
                        </label>
                    </div>
                }
            </div>
        </div>
    }

    @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
    {
        <div class="selected-checkout-attributes card card-block text-left">
            @Html.Raw(Model.CheckoutAttributeInfo)
        </div>
    }

    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="alert alert-danger">
                <ul>
                    @for (int i = 0; i < Model.Warnings.Count; i++)
                    {
                        <li>@Model.Warnings[i]</li>
                    }
                </ul>
            </div> 
        }

        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
        using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="card mb-4">
				<div id="cart-items" class="cart cart-editable mb-0">
					<div class="cart-head">
						<div class="cart-row">
							<div class="cart-col cart-col-main">
								@T("ShoppingCart.Product(s)")
							</div>
							<div class="cart-col cart-col-price">
								@T("ShoppingCart.UnitPrice")
							</div>
							<div class="cart-col cart-col-qty">
								@T("ShoppingCart.Quantity")
							</div>
							<div class="cart-col cart-col-price cart-col-subtotal">
								@T("ShoppingCart.ItemTotal")
							</div>
						</div>
					</div>
					<div class="cart-body">
                        @{ Html.RenderPartial("CartItems", Model); }
					</div>
				</div>

				<div class="cart-footer rounded-bottom">
					<div class="row">
						<div class="col-md-6 text-left align-self-end">
                            @if (Model.IsEditable)
                            {
                                <button type="submit" name="continueshopping" value="continueshopping" class="btn btn-secondary continue-shopping-button">
                                    <i class="fa fa-caret-left"></i>
                                    <span>@T("ShoppingCart.ContinueShopping")</span>
                                </button>
                            }
						</div>
						<div id="order-totals" class="col-md-6">
							@{ Html.RenderAction("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable }); }
						</div>
					</div>
				</div>
			</div>

            <div class="cart-footer row mt-5">
                <div class="col-lg-8 order-totals-left">

                    @{ Html.RenderWidget("order_summary_content_totals_left"); }

                    @if (Model.IsEditable)
                    {
                        <div class="row">
                            <!-- Discount Code, Gift Cards, Estimate shipping -->
                            <div class="col-sm-6">
                                @{
                                    Html.RenderPartial("_DiscountBox", Model.DiscountBox);
                                    Html.RenderPartial("_GiftCardBox", Model.GiftCardBox);
                                }
                                @{ Html.RenderWidget("order_summary_content_deals"); }
                            </div>

                            <!-- Checkout attributes -->
                            <div class="col-sm-6">
                                @{
                                    Html.RenderPartial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary());
                                    Html.RenderPartial("EstimateShipping", Model.EstimateShipping);
                                }
                            </div>
                        </div>
                     }
                </div>

                <!-- Totals -->
                <div class="col-lg-4">
                    @if (Model.IsEditable && !String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                    {
                        <div class="alert alert-info mt-0">
                            @Model.MinOrderSubtotalWarning
                        </div>
                    }
                    
                    @{ Html.RenderWidget("order_summary_content_totals_bottom"); }

                    @if (Model.IsEditable)
                    {
                        if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="checkout-buttons clearfix">
                                <input type="submit" name="startcheckout" value="startcheckout" id="startcheckout" class="d-none" />
                                <button type="button"
                                        class="btn btn-danger btn-lg btn-large pull-right checkout-button"
                                        id="checkout"
                                        name="checkout"
                                        onclick="$('#startcheckout').trigger('click'); return false;">
                                    <span>@T("Checkout.Button")</span>
                                    <i class="fa fa-angle-right"></i>
                                </button>

                            </div>

                            <div class="addon-buttons">
                                @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express, Pay with Amazon)*@
                                @foreach (var item in Model.ButtonPaymentMethods.Items)
                                {
                                    Html.RenderAction(item.ActionName, item.ControllerName, item.RouteValues);
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        }

        Html.RenderWidget("order_summary_content_after");

        if (Model.IsEditable)
        {
            Html.RenderAction("CrossSellProducts", "Product");
        }
    }
    else
    {
        <div class="alert alert-info fade show">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
</div>

@if (!Model.IsEditable && Model.Items.Any(x => x.IsDownload && x.HasUserAgreement))
{
    using (Html.BeginZoneContent("end", key: "user-agreement-modal"))
    {
        <div id="user-agreement-modal" class="modal modal-flex fade" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-body p-3"></div>
                    <div class="modal-footer">
                        <button class="btn" data-dismiss="modal">@T("Common.Confirm")</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <script type="text/javascript">
        $(document).ready(function () {
            $('a.download-user-agreement').on("click", function () {
                var url = '@(Url.Action("GetUserAgreement", "Download"))?productId=' + $(this).attr('data-id'),
                    dialog = $('#user-agreement-modal');

                dialog.find('.modal-body').empty();

                $.get(url, function (html) {
                    dialog.find('.modal-body').html(html);
                });

                dialog.modal();

                return false;
            });
        });
    </script>
}

@if (Model.IsEditable)
{
    <script type="text/javascript">

        var orderSummary = $(".order-summary-content");

        // remove cart item & move to wishlist
        orderSummary.on("click", ".ajax-action-link", function (e) {
            var link = $(this);
            updateShoppingCartItems(link, link.data);
        });

        // quantity touchspin change
        orderSummary.on('change', '.qty-input .form-control', function (e) {
            var link = $(this);
            updateShoppingCartItems(link, { "sciItemId": link.data("sci-id"), "newQuantity": link.val() });
        });

        function updateShoppingCartItems(link, data) {
            $.ajax({
                cache: false,
                url: link.data("href"),
                data: data,
                type: 'POST',
                success: function (response) {

                    if (response.cartItemCount == 0) {
                        orderSummary.html('<div class="alert alert-info fade show">@T("ShoppingCart.CartIsEmpty")</div>');
                    }

                    var cartBody = $(".cart-body");
                    var totals = $("#order-totals");

                    if (response.success) {
                        // replace html
                        cartBody.html(response.cartHtml);
                        totals.html(response.totalsHtml);
                    }

                    displayNotification(response.message, response.success ? "success" : "error");

                    // reinit qty ctls
                    applyCommonPlugins(cartBody);

                    // update shopbar
                    ShopBar.loadSummary("cart", true);

                    if (link.data("type") == "wishlist") {
                        ShopBar.loadSummary("wishlist", true);
                    }
                }
            });
        }

    </script>
}
