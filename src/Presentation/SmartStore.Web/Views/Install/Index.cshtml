@model InstallModel
@using SmartStore.Core.Infrastructure;
@using SmartStore.Web.Models.Install;
@using SmartStore.Web.Infrastructure.Installation;
@{
    // localization service for installation service
    // we do not use standard smnet localization because database is not installed yet
    // locale resources fpr installation process are stored into \App_Data\Localization\Installation directory
    var ILS = EngineContext.Current.Resolve<IInstallationLocalizationService>();
}
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>@ILS.GetResource("Title")</title>
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <script>
        window.Res = {
            "Common.Notification": "@ILS.GetResource("Common.Notification").EncodeJsString()",
        }
    </script>

    @* styles *@ 
	<link href='~/Content/vendors/font-awesome/font-awesome.css' type='text/css' rel='stylesheet' />
    @*<link href='~/Content/install/install.less' type='text/css' rel='stylesheet' />*@
	<link href='~/Administration/Content/theme.scss' type='text/css' rel='stylesheet' />

    @* scripts (head) *@
    <script src='~/Content/vendors/modernizr/modernizr.js' type='text/javascript'></script>
    <script src='~/Content/vendors/jquery/jquery-3.2.1.min.js' type='text/javascript'></script>
	<script src='~/Content/bs4/js/bootstrap.bundle.min.js' type='text/javascript'></script>
</head>
<body class="container-main">
	<div id="page">
		<header>
			<nav id="navbar" class="navbar navbar-dark navbar-expand-sm container">
				<a class="navbar-brand" href="https://www.smartstore.com">
					<img src="~/Content/images/smartstore.net-200-white.png" alt="SmartStore.NET" class="img-fluid" />
				</a>
				<div class="navbar-text h5 p-0 m-0 pl-1" style="line-height: 24px; vertical-align: bottom">
					@ILS.GetResource("Title")
				</div>

				<div class="collapse navbar-collapse ml-auto">
					<ul class="navbar-nav ml-auto">
						<li class="nav-item dropdown">
							<a class="nav-link dropdown-toggle navbar-tool" href="javascript:void(0)" title="Deutsch" data-toggle="dropdown" style="max-width: none">
								<i class="fa fa-language navbar-icon pr-1"></i>
								<span style="text-transform: uppercase">@Model.AvailableLanguages.First(x => x.Selected).Text</span>
							</a>
							<div class="dropdown-menu dropdown-menu-right">
								@foreach (var lang in Model.AvailableLanguages)
								{
									<a class="dropdown-item" href="@lang.Value">
										@if (lang.Selected)
										{
											<i class="fa fa-fw fa-check"></i>
										}
										else
										{
											<i class="fa fa-fw"></i>
										}
										<span>@lang.Text</span>
									</a>
								}
							</div>
						</li>
						<li class="nav-item xdropdown">
							<a class="nav-link navbar-tool" href="@Url.Action("RestartInstall", "Install")" title="@ILS.GetResource("RestartInstallation")" rel="nofollow">
								<i class="fa fa-fw fa-repeat navbar-icon"></i>
							</a>
						</li>
					</ul>
				</div>
			</nav>
		</header>

		<div id="content">
			<div class="cph">
				@using (Ajax.BeginForm("Install", "Install", new AjaxOptions
				{
					Confirm = ILS.GetResource("ConfirmInstall"),
					HttpMethod = "POST",
					OnBegin = "Installation.onStart",
					OnComplete = "Installation.onComplete",
					OnFailure = "Installation.onFailure",
					OnSuccess = "Installation.onSuccess"
				}, new { @class = "form-horizontal", autocomplete = "on" }))
				{
					<div class="container">
						<div class="install-panel">
							<div class="install-content">
								<p class="lead">
									@ILS.GetResource("Tooltip1").
								</p>
								<p class="lead mb-5">
									@ILS.GetResource("Tooltip2").
								</p>

								<div id="messages" class="alert alert-danger fade d-none">
									<button type="button" class="close" data-dismiss="alert" aria-label="Close">
										<span aria-hidden="true">&times;</span>
									</button>
									@Html.ValidationSummary(false)
								</div>

								<fieldset class="mb-5">
									<div class="heading mb-3">
										<h2 class="heading-title text-muted">@ILS.GetResource("StoreInformation")</h2>
									</div>
									<div class="form-group row">
										<label class="col-md-3 col-form-label" for="AdminEmail">@ILS.GetResource("AdminEmail")</label>
										<div class="col-md-9">
											@Html.TextBoxFor(x => x.AdminEmail, new { @class = "form-control" })
											@Html.ValidationMessageFor(x => x.AdminEmail)
										</div>
									</div>
									<div class="form-group row">
										<label class="col-md-3 col-form-label" for="AdminPassword">@ILS.GetResource("AdminPassword")</label>
										<div class="col-md-9">
											@Html.PasswordFor(x => x.AdminPassword)
											@Html.ValidationMessageFor(x => x.AdminPassword)
										</div>
									</div>
									<div class="form-group row">
										<label class="col-md-3 col-form-label" for="ConfirmPassword">@ILS.GetResource("ConfirmPassword")</label>
										<div class="col-md-9">
											@Html.PasswordFor(x => x.ConfirmPassword)
											@Html.ValidationMessageFor(x => x.ConfirmPassword)
										</div>
									</div>
								</fieldset>

								<fieldset class="mb-5">
									<div class="heading mb-3">
										<h2 class="heading-title text-muted">@ILS.GetResource("DatabaseInformation")</h2>
									</div>
									<div class="form-group row">
										<div class="col-12">
											<div class="form-check mb-2">
												@Html.RadioButton("DataProvider", "sqlce", (Model.DataProvider == "sqlce"), new { id = "provider_sqlce", @class = "form-check-input" })
												<label class="form-check-label" for="provider_sqlce">@ILS.GetResource("SqlCompact")</label>
											</div>
											<div class="form-check">
												@Html.RadioButton("DataProvider", "sqlserver", (Model.DataProvider == "sqlserver"), new { id = "provider_sqlserver", @class = "form-check-input" })
												<label class="form-check-label" for="provider_sqlserver">@ILS.GetResource("SqlStandard") <span class="font-weight-medium">@ILS.GetResource("Recommended")</span></label>
											</div>
										</div>
									</div>
									<div id="sqlConnectionInfo" style="display: none">
										<div class="form-group row">
											<div class="col-md-9 offset-md-3">
												<div class="form-check mb-2">
													@Html.RadioButton("SqlConnectionInfo", "sqlconnectioninfo_values", (Model.SqlConnectionInfo == "sqlconnectioninfo_values"), new { id = "sqlconnectioninfo_values", @class = "form-check-input" })
													<label class="form-check-label" for="sqlconnectioninfo_values">@ILS.GetResource("ConnectionStringValues")</label>
												</div>
												<div class="form-check">
													@Html.RadioButton("SqlConnectionInfo", "sqlconnectioninfo_raw", (Model.SqlConnectionInfo == "sqlconnectioninfo_raw"), new { id = "sqlconnectioninfo_raw", @class = "form-check-input" })
													<label class="form-check-label" for="sqlconnectioninfo_raw">@ILS.GetResource("RawConnectionString")</label>
												</div>
											</div>
										</div>

										<div id="sqlDatabaseInfo">
											<div class="form-group row">
												<label class="col-md-3 col-form-label" for="SqlServerName">@ILS.GetResource("SqlServerName")</label>
												<div class="col-md-9">
													@Html.TextBoxFor(x => x.SqlServerName, new { @class = "form-control" })
												</div>
											</div>
											<div class="form-group row">
												<label class="col-md-3 col-form-label" for="SqlDatabaseName">@ILS.GetResource("DatabaseName")</label>
												<div class="col-md-9">
													@Html.TextBoxFor(x => x.SqlDatabaseName, new { @class = "form-control" })
												</div>
											</div>
											<div class="form-group row">
												<div class="col-md-9 offset-md-3">
													<div class="form-check mb-2">
														@Html.RadioButton("SqlAuthenticationType", "sqlauthentication", (Model.SqlAuthenticationType == "sqlauthentication"), new { id = "sqlauthenticationtype_sql", @class = "form-check-input" })
														<label class="form-check-label" for="sqlauthenticationtype_sql">@ILS.GetResource("SqlAuthentication")</label>
													</div>
													<div class="form-check">
														@Html.RadioButton("SqlAuthenticationType", "windowsauthentication", (Model.SqlAuthenticationType == "windowsauthentication"), new { id = "sqlauthenticationtype_windows", @class = "form-check-input" })
														<label class="form-check-label" for="sqlauthenticationtype_windows">@ILS.GetResource("WindowsAuthentication")</label>
													</div>
												</div>
											</div>
											<div id="pnlSqlAuth">
												<div class="form-group row">
													<label class="col-md-3 col-form-label" for="SqlServerUsername">@ILS.GetResource("SqlServerUsername")</label>
													<div class="col-md-9">
														@Html.TextBoxFor(x => x.SqlServerUsername, new { @class = "form-control" })
													</div>
												</div>
												<div class="form-group row">
													<label class="col-md-3 col-form-label" for="SqlServerPassword">@ILS.GetResource("SqlServerPassword")</label>
													<div class="col-md-9">
														@Html.PasswordFor(x => x.SqlServerPassword, new { @class = "form-control" })
													</div>
												</div>
											</div>

										</div>

										<div id="sqlDatabaseConnectionString">
											<div class="form-group row">
												<label class="col-md-3 col-form-label" for="DatabaseConnectionString">@ILS.GetResource("ConnectionString")</label>
												<div class="col-md-9">
													@Html.TextBoxFor(x => x.DatabaseConnectionString, new { @class = "form-control" })
													<small class="form-text text-muted mt-2">
														@ILS.GetResource("Example"):
														Data Source=sqlServerName;Initial Catalog=dbName;Persist Security Info=True;User
														ID=userName;Password=password
														<br />
														Find more info <a href="http://www.connectionstrings.com/" rel="nofollow" target="_blank">here</a>
													</small>
												</div>
											</div>
										</div>

										<div class="form-group row">
											<div class="col-md-9 offset-md-3">
												<div class="form-check">
													@Html.CheckBoxFor(x => x.SqlServerCreateDatabase, new { id = "SqlServerCreateDatabase", @class = "form-check-input" })
													<label class="form-check-label" for="SqlServerCreateDatabase">@ILS.GetResource("CreateDatabaseIfDoesNotExist")</label>
												</div>
											</div>
										</div>
										<div class="form-group row">
											<div class="col-md-9 offset-md-3">
												<div class="form-check mb-2">
													@Html.CheckBoxFor(x => x.UseCustomCollation, new { id = "UseCustomCollation", @class = "form-check-input" })
													<label class="form-check-label" for="UseCustomCollation">@ILS.GetResource("CustomCollation")</label>
												</div>

												@Html.TextBoxFor(x => x.Collation, new { disabled = "disabled", @class = "form-control" })
											</div>
										</div>
									</div>
								</fieldset>

								<fieldset class="mb-5">
									<div class="heading mb-3">
										<h2 class="heading-title text-muted">@ILS.GetResource("InstallOptions")</h2>
									</div>
									<div class="form-group row">
										<label class="col-md-3 col-form-label" for="PrimaryLanguage">@ILS.GetResource("PrimaryLanguage")</label>
										<div class="col-md-9">
											@Html.DropDownListFor(x => x.PrimaryLanguage, Model.AvailableAppLanguages, new { @class = "form-control" })
											@Html.ValidationMessageFor(x => x.PrimaryLanguage)
										</div>
									</div>
									<div class="form-group row">
										<label class="col-md-3 col-form-label" for="MediaStorage">@ILS.GetResource("MediaStorage.Label")</label>
										<div class="col-md-9">
											@Html.DropDownListFor(x => x.MediaStorage, Model.AvailableMediaStorages, new { @class = "form-control" })
											@Html.ValidationMessageFor(x => x.MediaStorage)
											<small class="form-text text-muted mt-2">
												@ILS.GetResource("MediaStorage.Hint")
											</small>
										</div>
									</div>
									<div class="form-group row">
										<div class="col-md-9 offset-md-3">
											<div class="form-check">
												@Html.CheckBoxFor(x => x.InstallSampleData, new { id = "InstallSampleData", @class = "form-check-input" })
												<label class="form-check-label" for="InstallSampleData">@ILS.GetResource("CreateSampleData")</label>
											</div>
										</div>
									</div>
								</fieldset>

								<div class="buttonbar xtext-center">
									<button type="submit" id="install-button" class="btn btn-primary btn-lg btn-install px-6 fs-h4 font-weight-normal">
										<i class="fa fa-download"></i>
										<span>@ILS.GetResource("Install")</span>
									</button>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>

    @* scripts (foot) *@
    <script src='~/Content/vendors/jquery/jquery.unobtrusive-ajax.min.js' type='text/javascript'></script>
    <script src='~/Content/vendors/jquery/jquery.validate.min.js' type='text/javascript'></script>
    <script src='~/Content/vendors/jquery/jquery.validate.unobtrusive.min.js' type='text/javascript'></script>
    <script src='~/Scripts/smartstore.system.js' type='text/javascript'></script>
	<script src='~/Scripts/smartstore.viewport.js' type='text/javascript'></script>
	<script src='~/Scripts/smartstore.common.js' type='text/javascript'></script>

    <script src='~/Content/vendors/underscore/underscore.min.js' type='text/javascript'></script>
    <script src='~/Content/vendors/underscore/underscore.string.min.js' type='text/javascript'></script>
    <script src='~/Scripts/underscore.mixins.js' type='text/javascript'></script>

    <script src='~/Content/vendors/jquery/jquery.addeasing.js' type='text/javascript'></script>
    <script src='~/Scripts/smartstore.throbber.js' type='text/javascript'></script>
    <script src='~/Content/vendors/jquery/jquery.scrollTo.js' type='text/javascript'></script>
    <script src='~/Scripts/public.common.js' type='text/javascript'></script>

    <script>
		$(function () {
			$('input:radio[name=DataProvider]').click(toggleProvider);
			$('input:radio[name=SqlConnectionInfo]').click(toggleSqlConnectionInfo);
			$('input:radio[name=SqlAuthenticationType]').click(toggleSqlAuthenticationType);
			$("input:checkbox[name=UseCustomCollation]").click(toggleCollation);

			toggleProvider();
			toggleSqlConnectionInfo();
			toggleSqlAuthenticationType();
			toggleCollation();
		});

		function hide(el, thenShow) {
			$(el).slideUp(300, "ease-in-out", function () {
				if (thenShow) {
					show($(thenShow));
				}
			});
		}

		function show(el) {
			$(el).slideDown(300, "ease-in-out");
		}

		function toggleProvider() {
			var selectedProvider = $("input[name=DataProvider]:checked").attr('id');
			if (selectedProvider == 'provider_sqlce') {
				hide('#sqlConnectionInfo');
			}
			else if (selectedProvider == 'provider_sqlserver') {
				show('#sqlConnectionInfo');
			}
		}

		function toggleSqlConnectionInfo() {
			var selectedProvider = $("input[name=SqlConnectionInfo]:checked").attr('id');
			if (selectedProvider == 'sqlconnectioninfo_values') {
				hide('#sqlDatabaseConnectionString', '#sqlDatabaseInfo');
			}
			else if (selectedProvider == 'sqlconnectioninfo_raw') {
				hide('#sqlDatabaseInfo', '#sqlDatabaseConnectionString');
			}
		}

		function toggleSqlAuthenticationType() {
			var selectedProvider = $("input[name=SqlAuthenticationType]:checked").attr('id');
			if (selectedProvider == 'sqlauthenticationtype_sql') {
				$('#pnlSqlAuth input').removeAttr("disabled");
			}
			else if (selectedProvider == 'sqlauthenticationtype_windows') {
				$('#pnlSqlAuth input').attr("disabled", "disabled");
			}
		}


		function toggleCollation() {
			if ($('#UseCustomCollation').is(':checked')) {
				$('#Collation').removeAttr("disabled");
			}
			else {
				$('#Collation').attr("disabled", "disabled");
			}
		}

        var Installation = (function () {

            var progressIntervall;

            function checkProgress() {
                $.ajax({
                    url: '@Url.Action("Progress", "Install")',
                    dataType: "json",
                    async: true,
                    type: "POST",
                    cache: false,
                    success: function (data, status) {
                        console.log(data);

                        if (!data.Completed) {
                        	if (data.ProgressMessage !== undefined && _.isString(data.ProgressMessage) && data.ProgressMessage) {
                        		$("#install-progress").html(data.ProgressMessage);
                        	}
                        }
                        else {
                        	$("#install-progress").html("");
                        }
                    },
                    error: function () {
                        console.log("ERROR");
                        handleError(arguments[0].responseText);
                    }
                });
            }

            function finalizeInstallation(success) {
                $.ajax({
                    url: '@Url.Action("Finalize", "Install")',
                    data: { restart: success },
                    dataType: "json",
                    async: false,
                    type: "POST"
                });
            }

            function handleError(errors) {
                var validationSummary = $("#messages");
                var ul = validationSummary.find("ul");
                ul.html("");

                if ($.isArray(errors)) {
                    for (i = 0; i < errors.length; i++) {
                        ul.append("<li>" + errors[i] + "</li>");
                    }
                }
                else {
                    ul.append("<li>" + errors + "</li>");
                }
                validationSummary.removeClass("hide");
                validationSummary.addClass("in");
                $.scrollTo(validationSummary, 800, { offset: -10 });
                $("#install-button").removeAttr("disabled");

                $("#install-progress").html("");
            }

            return {

                onStart: function (context) {

                    $.throbber.show({
                        //message: '<span id="install-message">@ILS.GetResource("Installing")</span>' + '<br /><span id="install-progress" style="font-size: 16px"></span>',
                        message: '<div id="install-message">@ILS.GetResource("Installing")</div><div id="install-progress" style="font-size: 16px; font-weight: 400; margin: 10px 0 30px 0"></div>',
                    });

                    // start the checkprogress interval
                    progressIntervall = window.setInterval(checkProgress, 1500);

                    $("#install-button").attr("disabled", "disabled");

                },

                onSuccess: function (data) {

                    finalizeInstallation(data.Success);

                    if (data.Success) {
                    	$("#install-message").html("@ILS.GetResource("Common.StartShop")");
                        $("#install-progress").html("");
                        setLocation(data.RedirectUrl);
                    }
                    else {
                        $.throbber.hide();
                        if (data.HasErrors) {
                            handleError(data.Errors);
                        }
                    }
                },

                onFailure: function (context) {
                    handleError(context);
                },

                onComplete: function () {
                	window.clearInterval(progressIntervall);
                    $("#install-button").removeAttr("disabled");
                    $("#install-progress").html("");
                }
            };
        })();
    </script>
</body>
</html>
