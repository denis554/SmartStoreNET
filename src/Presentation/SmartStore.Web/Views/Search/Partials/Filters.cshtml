@using SmartStore.Core.Search.Facets
@using SmartStore.Web.Models.Search
@using SmartStore.Services.Search.Rendering;
@using SmartStore.Services.Search.Extensions;

@model ISearchResultModel

@{
	Layout = "";

	var templateProvider = ViewBag.TemplateProvider as IFacetTemplateProvider;
	var facetGroups = Model.SearchResult.Facets.Select(x => x.Value).OrderBy(x => x.DisplayOrder);

	int i = 0;
}

<div class="faceted-search-container">
	<div class="faceted-search" id="faceted-search">
		@foreach (var group in facetGroups)
		{
			var templateRoute = templateProvider.GetTemplateRoute(group);
			if (templateRoute == null)
			{
				continue;
			}

			i++;
			var hasSelection = group.Facets.Any(x => x.Value.IsSelected);
			var expanded = i <= 3 || hasSelection;

			<div class="facet-group" data-key="@group.Key">
				<a class="facet-toggle@(!expanded ? " collapsed" : "")" data-toggle="collapse" href="#facet-body-@(group.Key)" aria-expanded="@expanded" aria-controls="facet-body-@(group.Key)">
					@(group.Label ?? group.Key)
				</a>
				<div id="facet-body-@(group.Key)" class="facet-body collapse@(expanded ? " in" : "")" aria-expanded="@expanded">
					@{ Html.RenderAction(templateRoute.Action, templateRoute.Controller, templateRoute.RouteValues); }
				</div>
			</div>
		}
	</div>
</div>

<script type="text/javascript">
	$(function () {

		// quick & dirty for testing

		// Handle checkboxes
		$('.faceted-search').on('change', ':input[type=checkbox].facet-control-native', facetControlClickHandler);

		// Handle radio buttons
		$('.faceted-search').on('click', ':input[type=radio].facet-control-native', facetControlClickHandler);

		function facetControlClickHandler(e) {
			var href = $(this).closest('[data-href]').data('href');
			if (href) {
				setLocation(href);
			}
		}

		// individual price filter
		$('#btn-custom-price-range').click(function () {
			var pfVal = $('#price-range-from').val(),
				ptVal = $('#price-range-to').val(),
				queryParams = getQueryParams();

			queryParams['pf'] = pfVal.replace(/[^\d\.\-]/g, '');
			queryParams['pt'] = ptVal.replace(/[^\d\.\-]/g, '');

			location.search = $.param(queryParams);
		});

		function getQueryParams() {
			var queryParams = {},
				queryString = location.search.substring(1),
				re = /([^&=]+)=([^&]*)/g,
				item;

			while (item = re.exec(queryString)) {
				queryParams[decodeURIComponent(item[1])] = decodeURIComponent(item[2]);
			}

			return queryParams;
		}

		function update(str, val, add) {
			var arr = (str ? str.split(',') : new Array()),
				index = $.inArray(val, arr);

			if (add) {
				if (index === -1)
					arr.push(val);
			}
			else {
				if (index !== -1)
					arr.splice(index, 1);
			}

			return arr;
		}

	});
</script>
