@model ProductDetailsModel
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Web.Extensions;
@{
    Layout = "~/Views/Shared/_Root.cshtml";

    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
}

@helper BundleProducts()
{
	foreach (var item in Model.BundledItems.Where(x => x.BundleItem.Visible))
	{
		<div class="bundle-item">
			<div class="bundle-item-name">
				@if (item.VisibleIndividually)
				{
					<a href="@Url.RouteUrl("Product", new { SeName = item.SeName })" title="@T("Products.Details")">@item.Name</a>
				}
				else
				{
					@item.Name
				}
				@if (item.BundleItem.Quantity > 1)
				{
					<text>
						&#215;&nbsp;@item.BundleItem.Quantity
					</text>
				}
			</div>
			@if (!String.IsNullOrWhiteSpace(item.StockAvailability))
			{
				<div class="bundle-item-stock">
					@T("Products.Availability"):&nbsp;@item.StockAvailability
				</div>
			}
			@if (!String.IsNullOrWhiteSpace(item.ProductPrice.PriceWithDiscount))
			{
				<div class="bundle-item-price">
					@Html.Raw(item.ProductPrice.PriceWithDiscount)
				</div>
			}
			@if (!String.IsNullOrEmpty(item.AttributeInfo))
			{
				<div class="bundle-item-attribute-info">
					@Html.Raw(item.AttributeInfo)
				</div>
			}

			@if (item.ProductVariantAttributes.ShouldBeRendered())
			{
				<div class="bundle-item-footer">
					@Html.Partial("_ProductAttributes", item.ProductVariantAttributes, new ViewDataDictionary())
				</div>
			}
		</div>
	}
}

<div class="page product-details-page">
    <div class="page-body">
        @Html.Widget("mobile_productdetails_top")
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requries it*@
        @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="product-essential">
                <div class="overview">
                    <h1 class="product-name">
                        @Model.Name
                    </h1>
                    <div class="short-description">
                        @Html.Raw(Model.ShortDescription)
                    </div>
                    @Html.Widget("mobile_productdetails_before_pictures")
                    <div id="pd-gallery-container">
                        @Html.Partial("_ProductDetailsPictures", Model.DetailsPictureModel)
                    </div>
                    @Html.Widget("mobile_productdetails_after_pictures")
                    @Html.Action("ProductManufacturers", "Catalog", new { productId = Model.Id })
                    @Html.Action("ProductReviewOverview", "Catalog", new { productId = Model.Id })
                    @Html.Action("ProductEmailAFriendButton", "Catalog", new { productId = Model.Id })
                    @Html.Action("CompareProductsButton", "Catalog", new { productId = Model.Id })
                </div>
				@if (Model.ProductType == ProductType.BundledProduct)
				{
					<div id="ProductBundleItems" class="product-bundle">
						@if (Model.RenderBundleTitle())
						{
							<div class="bundle-title">
								<h3>@Model.BundleTitleText</h3>
							</div>
						}
						<div class="bundle-items">										
							@BundleProducts()
						</div>
						@if (Model.BundledItems.Where(x => x.BundleItem.Visible).Count() == 0)
						{
							<div class="no-bundled-products">@T("Products.NoBundledItems")</div>
						}
					</div>
				}
                <div class="full-description">
                    @Html.Raw(Model.FullDescription)
                </div>
            </div>
            <div class="product-collateral">
                <div class="product-variant-list">
                    <div class="product-variant-line update-container" data-url="@Html.Raw(Model.UpdateProductDetailsUrl())">
                        @Html.Partial("_DownloadSample", Model)
                        @Html.Action("ProductTierPrices", "Catalog", new { productId = Model.Id })
                        @if (Model.ProductType != ProductType.BundledProduct && Model.ProductVariantAttributes.ShouldBeRendered())
						{
							var dataDictAttributes = new ViewDataDictionary();
							dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);
							@Html.Partial("_ProductAttributes", Model.ProductVariantAttributes, dataDictAttributes)
						}
                        <!--product SKU, manufacturer part number, stock info-->
                        @Html.Partial("_SKU_Man_Stock", Model)
                        <!--Back in stock subscription-->
                        @Html.Partial("_BackInStockSubscription", Model)
                        @{
							var dataDictGiftCard = new ViewDataDictionary();
							dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
							@Html.Partial("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
                        @{
							var dataDictPrice = new ViewDataDictionary();
							dataDictPrice.TemplateInfo.HtmlFieldPrefix = string.Format("price_{0}", Model.Id);
							@Html.Partial("_ProductPrice", Model.ProductPrice, dataDictPrice)
                        }
                        @{
							var dataDictAddToCart = new ViewDataDictionary();
							dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);
							@Html.Partial("_AddToCart", Model.AddToCart, dataDictAddToCart)
                        }
                    </div>
                </div>
                @Html.Action("ProductSpecifications", "Catalog", new { productId = Model.Id })
                <div class="clear">
                </div>
                @Html.Action("ProductTags", "Catalog", new { productId = Model.Id })
                <div class="clear">
                </div>
                @Html.Action("ProductsAlsoPurchased", "Catalog", new { productId = Model.Id })
                @Html.Action("RelatedProducts", "Catalog", new { productId = Model.Id })
            </div>
        }
        @Html.Widget("mobile_productdetails_bottom")
    </div>
</div>
