@model ProductDetailsModel
@using SmartStore.Core;
@using SmartStore.Core.Domain.Common;
@using SmartStore.Core.Domain.Seo;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Web;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Web.Framework.UI;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    Html.AddCssFileParts("~/Content/smartstore.smartgallery.css");

    Html.AddScriptParts(
        "~/Scripts/jquery.elevatezoom.js",
        "~/Scripts/smartstore.smartgallery.js",
        "~/Scripts/public.product-detail.js");
    
    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }
}

@Html.Partial("BsImageDialog")

<div class="page product-details-page">

    <!--product breadcrumb-->
    @Html.Action("ProductBreadcrumb", "Catalog", new { productId = Model.Id })

    <div class="page-body">
        @Html.Widget("productdetails_top")
        @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form" }))
        {
            <article itemscope itemtype="http://schema.org/Product">
                <div class="top-content clearfix">
                <div class="product-image equalized-column">
                    
                    @Html.Widget("productdetails_before_pictures")
                    <!--product pictures-->
					<div id="pd-gallery-container">
						@Html.Partial("_ProductDetailsPictures", Model.DetailsPictureModel)
					</div>
                    @Html.Widget("productdetails_after_pictures")
                    
                </div>
                <div class="product-data equalized-column">
                    
                    @if (Model.DisplayAdminLink) {
                        //IMPORTANT: first element must have a margin of 10px otherwise columns aren't eqalized
                        <div class="clearfix" style="margin-top:10px">
                            <a class="btn btn-primary pull-right" href="@Url.Content("~/admin/product/edit/" + Model.Id)" target="admin-product">
                                @T("Common.Catalog.EditProduct")
                            </a>
                        </div>
                    }

                    <div class="page-title alpha">
                        <h1 class="product-name" itemprop="name">
                            @Model.Name
                        </h1>
                    </div>

                    <div id="details-cnt">

                        @Html.Widget("productdetails_overview_top")

                        <div class="short-description line alpha">
                            @Html.Raw(Model.ShortDescription)
                        </div>

                        @Html.Action("ProductReviewOverview", "Catalog", new { productId = Model.Id })

                        @if (Model.Manufacturers != null && Model.Manufacturers.Count > 0)
                        {
                            <div class="manufacturer-pics">

                            @foreach (var manufacturer in Model.Manufacturers)
                            {
                                <div class="manufacturer-item">
                                    <div class="picture">
                                        <a href="@Url.RouteUrl("Manufacturer", new { SeName = manufacturer.SeName })" title="@manufacturer.PictureModel.Title">
                                            <img alt="@manufacturer.PictureModel.AlternateText" src="@manufacturer.PictureModel.ImageUrl" title="@manufacturer.PictureModel.Title" />
                                        </a>
                                    </div>
                                </div>
                            }

                            </div>
                        }

                        <div class="quick-links line">
                            @Html.Action("ProductEmailAFriendButton", "Catalog", new { productId = Model.Id })
                            @Html.Action("ProductAskQuestionButton", "Catalog", new { productId = Model.Id })
                            @Html.Action("CompareProductsButton", "Catalog", new { productId = Model.Id })
                        </div>

                        @Html.Action("ShareButton", "Catalog")

                        @Html.Widget("productdetails_overview_bottom")
                    </div>
                </div>
            </div>
                        
			<div class="product-collateral clearfix">
                <!--product variants-->
                <div class="product-variant-list">
                    @foreach (var variant in Model.ProductVariantModels)
                    {
                        var dataDictVariant = new ViewDataDictionary();
                        dataDictVariant.TemplateInfo.HtmlFieldPrefix = string.Format("variant_{0}", variant.Id);
                        @Html.Partial("_ProductVariantLine", variant, dataDictVariant)
                    }
                </div>
            </div>

			<div class="clear"></div>
            
                <div class="bottom-content">
                <!-- tabs -->
                @Html.SmartStore().TabStrip().Name("product-detail-tabs").Items(x =>
                {
                    var specificationAttributes = Html.Action("ProductSpecifications", "Catalog", new { productId = Model.Id }).ToString();
                    var reviews = Html.Action("ProductDetailReviews", "Catalog", new { productId = Model.Id }).ToString();

                    if (!String.IsNullOrWhiteSpace(Model.FullDescription))
                    {
                        x.Add().Text(@T("Products.Details"))
                                .Content(Html.Raw("<div class='more-less'><div class='more-block' itemprop='description'>" + Model.FullDescription + "</div></div>").ToString())
                                .Selected(true);
                    }

                    if (!String.IsNullOrWhiteSpace(specificationAttributes))
                    {
                        x.Add().Text(@T("Products.Specs"))
                                .Content(specificationAttributes)
                                .Selected(String.IsNullOrWhiteSpace(Model.FullDescription));
                    }

                    x.Add().Text(@T("Reviews.ExistingReviews"))
                            .Content(reviews)
                            .Badge(Model.ReviewCount.ToString(), BadgeStyle.Info, Model.ReviewCount > 0)
                            .Selected(String.IsNullOrWhiteSpace(Model.FullDescription) && String.IsNullOrWhiteSpace(specificationAttributes));
                })

                @Html.Action("RelatedProducts", "Catalog", new { productId = Model.Id })

                <!-- product recommendations -->
                <div class="product-recommendations">
                    @Html.Action("ProductsAlsoPurchased", "Catalog", new { productId = Model.Id })
                </div>
            
                <!-- product tags -->
                <div class="product-tags">
                    @Html.Action("ProductTags", "Catalog", new { productId = Model.Id })
                </div>
            
            </div>
            </article>
        }
        @Html.Widget("productdetails_bottom")
    </div>
</div>

<script type="text/javascript">
    
    $(function () {
        var settings = {
            galleryWidth: 318,
            galleryHeight: 250,
            galleryStartIndex: @(Model.DetailsPictureModel.GalleryStartIndex),
            showImageDescription: false,
            enableZoom: toBool('@(Model.DetailsPictureModel.DefaultPictureZoomEnabled)'),
            zoomType: '@Model.DetailsPictureModel.PictureZoomType', // window, inner, lens
            updateUrl: '@Url.Action("UpdateProductDetails", "Catalog", new { productId = Model.Id })'
        };
        $('#product-details-form').productDetail(settings);

        if( toBool('@(Model.EnableHtmlTextCollapser)') )
        {
            var moreLess = $('.more-less');
            if (moreLess.height() > parseInt(@(Model.HtmlTextCollapsedHeight))) {
                $('.more-less').moreLess({ adjustheight: parseInt(@(Model.HtmlTextCollapsedHeight))});
            }
        }
    });
</script>