@model CategoryNavigationModel
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Services.Catalog;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Collections;

@functions {
    private string GetCssClassForNode(TreeNode<CategoryNavigationModel.CategoryModel> node, NodePathState state) 
    {
        var liClasses = new List<string>();

        if (node.Value.Level == 1)
        {
            liClasses.Add("drop-list-item");
        }
        
        if (node.Value.Level <= 1 && node.HasChildren)
        {
            liClasses.Add(node.Value.Level > 0 ? "dropdown-submenu" : "dropdown");
        }
        
        if ((state & NodePathState.Expanded) == NodePathState.Expanded)
        {
            liClasses.Add("expanded");
        }

        if ((state & NodePathState.Selected) == NodePathState.Selected)
        {
            liClasses.Add("selected");
        }

        return liClasses.Count > 0 ? String.Join(" ", liClasses) : null;
    }
    
}

<div class="container">
	<div id='megamenu' class='navbar@(GetThemeVariable<bool>("InverseNavbar") ? " navbar-inverse" : "")'>
	    <div class="navbar-inner">
	    	<div class="container">
                <ul class="nav nav-smart shrinkable" style="margin-right: 0;">
                    @foreach (var node in Model.Root.Children)
                    {
                        var state = Model.GetNodePathState(node);
                        <li class='@(GetCssClassForNode(node, state))'> 
                        <a href="@Url.RouteUrl("Category", new { categoryId = node.Value.Id, SeName = node.Value.SeName })" @Html.Attr("class", "dropdown-toggle", node.HasChildren) data-target="#">@node.Value.Name
                            @if (node.Value.NumberOfProducts.HasValue)
                            {
                                <text> (@(node.Value.NumberOfProducts))</text>
                            }
                            
                            @if (node.HasChildren)
                            {
                                <i class="icon-caret-down chevron"></i>
                            }
                        </a>
                        
                        @if (node.HasChildren)
                        {
                            @CreateDrilldownMenu(node.Children, true)
                        }

                        </li>
                        if (node.Next != null) {
                            <li class="divider-vertical"></li>
                        }
                    }

                </ul>

                <ul class="nav nav-smart shrink-menu pull-right hide">
			        <li class="dropdown">
			            <a class="dropdown-toggle" href="#" data-target="#" onclick="return false;">
                            <sup>...</sup>
			            </a>
			            <div class="dropdown-menu pull-right"></div>
			        </li>	
	    		</ul>

            </div>
        </div>
    </div>
</div>

@helper CreateDrilldownMenu(IEnumerable<TreeNode<CategoryNavigationModel.CategoryModel>> nodes, bool isRoot)
{
    if (isRoot)
    {
        @Html.Raw("<div class='dropdown-menu'><div class='dropdown-menu-inner clearfix'>")
    }
    
    <ul class='@(isRoot ? "drop-list" : "dropdown-menu")'>
    @foreach (var node in nodes)
    {
        var state = Model.GetNodePathState(node);
        <li class='@(GetCssClassForNode(node, state))'> 
            <a href="@Url.RouteUrl("Category", new { categoryId = node.Value.Id, SeName = node.Value.SeName })">@node.Value.Name</a>
            @if (node.Value.Level <= 2 && node.HasChildren)
            {
                @CreateDrilldownMenu(node.Children, false)
            }
        </li>
    }
    </ul>
    
    if (isRoot)
    {
        @Html.Raw("</div></div>")
    }
}