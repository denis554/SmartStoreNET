@model ProductDetailsModel
@using SmartStore.Core;
@using SmartStore.Core.Domain.Common;
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Core.Domain.Seo;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core.Infrastructure;
@using SmartStore.Services.Events;
@using SmartStore.Web.Models.Catalog;
@using SmartStore.Web.Framework.UI;
@using SmartStore.Web.Framework.Events;
@using SmartStore.Web.Extensions;

@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title, meta
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    
    //codehint: sm-add
    Html.AddCssFileParts("~/Content/smartstore.smartgallery.css");

    Html.AddScriptParts(
        "~/Scripts/jquery.elevatezoom.js",
        "~/Scripts/smartstore.smartgallery.js",
        "~/Scripts/public.product-detail.js");
    
    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(productUrl);
    }
}

@Html.Partial("BsImageDialog")

<div class="page product-details-page">

    <!--product breadcrumb-->
    @Html.Action("ProductBreadcrumb", "Catalog", new { productId = Model.Id })

    <div id="TotalPriceUpdateContainer" class="page-body update-container" data-referto="#ProductAttributes, #AddToCart" data-url="@Html.Raw(Model.UpdateProductDetailsUrl())">
        @Html.Widget("productdetails_top")
        @using (Html.BeginRouteForm("Product", new { SeName = Model.SeName }, FormMethod.Post, new { id = "product-details-form" }))
        {
            <article itemscope itemtype="http://schema.org/Product">
                <div class="top-content clearfix">

                <div class="product-image equalized-column" data-equalized-column-name="pd">
                        @Html.Widget("productdetails_before_pictures")
                        <!--product pictures-->
                        <div id="pd-gallery-container-outer">
						    <div id="pd-gallery-container">
							    @Html.Partial("_ProductDetailsPictures", Model.DetailsPictureModel)
						    </div>
                        </div>
                        @Html.Widget("productdetails_after_pictures")

                        @if (Model.Manufacturers.Any(x => x.PictureModel != null))
                        {
                            <div class="manufacturer-pics">

                            @foreach (var manufacturer in Model.Manufacturers.Where(x => x.PictureModel != null))
                            {
                                <div class="manufacturer-item">
                                    <div class="picture">
                                        <a href="@Url.RouteUrl("Manufacturer", new { SeName = manufacturer.SeName })" title="@manufacturer.PictureModel.Title">
                                            <img alt="@manufacturer.PictureModel.AlternateText" src="@manufacturer.PictureModel.ImageUrl" title="@manufacturer.PictureModel.Title" /></a>
                                    </div>
                                </div>
                            }

                            </div>
                        }

                        <!-- attributes -->
                        <table id="ProductAttributes" class="attributes">

                            @if (Model.ShowSku)
                            {
                            <tr valign="top" class="attr-sku @(String.IsNullOrWhiteSpace(Model.Sku) ? "hide fade" : "")">
                                <td class="caption bold">@T("Products.Sku")</td>
                                <td class="value">@Model.Sku</td> 
                            </tr>
                            }

                            @if (Model.Manufacturers.Count > 0)
                            {
                            <tr valign="top">
                                <td class="caption bold">@(Model.Manufacturers.Count == 1 ? T("Products.Manufacturer") : T("Products.Manufacturers"))</td>
                                <td>

                                    @for (int i = 0; i < Model.Manufacturers.Count; i++)
                                    {
                                        var item = Model.Manufacturers[i];
                                        <a href="@Url.RouteUrl("Manufacturer", new { SeName = item.SeName })">@item.Name</a>
                                        if (i != Model.Manufacturers.Count - 1)
                                        {
                                        <text>,</text>
                                        }
                                    }

                                </td>
                            </tr>
                            }

                            @if (Model.ShowManufacturerPartNumber)
                            {
                            <tr valign="top" class="attr-mpn @(String.IsNullOrWhiteSpace(Model.ManufacturerPartNumber) ? "hide fade" : "")">
                                <td class="caption bold">@T("Products.ManufacturerPartNumber")</td>
                                <td class="value">@Model.ManufacturerPartNumber</td>
                            </tr>
                            }

                            @if (Model.ShowGtin)
                            {
                            <tr valign="top" class="attr-gtin @(String.IsNullOrWhiteSpace(Model.Gtin) ? "hide fade" : "")">
                                <td class="caption bold">@T("Products.GTIN")</td>
                                <td class="value">@Model.Gtin</td>
                            </tr>
                            }

                            @if (Model.ShowWeight)
                            {
                            <tr valign="top" class="attr-weight @(String.IsNullOrWhiteSpace(Model.Weight) ? "hide fade" : "")">
                                <td class="caption bold">@T("Products.Weight")</td>
                                <td class="value">@Model.Weight</td>
                            </tr>
                            }

                            @if (Model.ShowDimensions)
                            {
                                <tr valign="top" class="attr-length @(String.IsNullOrWhiteSpace(Model.Length) ? "hide fade" : "")">
                                    <td class="caption bold">@T("Products.Length")</td>
                                    <td class="value">@Model.Length</td>
                                </tr>
                                <tr valign="top" class="attr-width @(String.IsNullOrWhiteSpace(Model.Width) ? "hide fade" : "")">
                                    <td class="caption bold">@T("Products.Width")</td>
                                    <td class="value">@Model.Width</td>
                                </tr>
                                <tr valign="top" class="attr-height @(String.IsNullOrWhiteSpace(Model.Height) ? "hide fade" : "")">
                                    <td class="caption bold">@T("Products.Height")</td>
                                    <td class="value">@Model.Height</td>
                                </tr>
                            }

                            <tr valign="top" class="attr-stock @(String.IsNullOrWhiteSpace(Model.StockAvailability) ? "hide fade" : "")">
                                <td class="caption bold">@T("Products.Availability")</td>
                                <td class="value">
                                    @Model.StockAvailability
                                </td>
                            </tr>

                            @if (Model.DisplayBackInStockSubscription)
                            {
                            <tr valign="top">
                                <td>&nbsp;</td>
                                <td>
                                    @Html.Partial("_BackInStockSubscription", Model)
                                </td>
                            </tr>
                            }
                        </table>
                    </div>

                <div class="product-data equalized-column" data-equalized-column-name="pd">

                    @if (Model.DisplayAdminLink) { 
                        //IMPORTANT: first element must have a margin of 10px otherwise columns aren't eqalized
                        <div class="clearfix" style="margin-top:10px">
                            <a class="btn btn-primary pull-right" href="@Url.Content("~/admin/product/edit/" + Model.Id)" target="admin-product">
                                @T("Common.Catalog.EditProduct")
                            </a>
                        </div>
                    }

                    <div class="page-title alpha">
                        <h1 class="product-name" itemprop="name">
                            @Model.Name
                        </h1>
                    </div>
                       
                    @Html.Widget("productdetails_overview_top")

                    <div id="details-cnt">

                        <div class="short-description line alpha">
                            @Html.Raw(Model.ShortDescription)
                        </div>

                        <!--product reviews-->
                        @Html.Action("ProductReviewOverview", "Catalog", new { productId = Model.Id })

                        <!-- product attributes or bundle items -->
                        @{
							if (Model.ProductType == ProductType.BundledProduct)
							{
								<div id="ProductBundleItems" class="product-bundle">
									@if (Model.RenderBundleTitle())
									{
										<div class="bundle-title">
											<h4>@Model.BundleTitleText</h4>
										</div>
									}
									<div class="bundle-items">										
										@Html.Partial("_ProductBundleItems")
									</div>
									@if (Model.BundledItems.Where(x => x.BundleItem.Visible).Count() == 0)
									{
										<div class="no-bundled-products">@T("Products.NoBundledItems")</div>
									}
								</div>
							}
							else if (Model.ProductVariantAttributes.ShouldBeRendered())
							{
								var dataDictAttributes = new ViewDataDictionary();
								dataDictAttributes.TemplateInfo.HtmlFieldPrefix = string.Format("attributes_{0}", Model.Id);

								<div class="product-attributes line">
									@Html.Partial("_ProductAttributes", Model.ProductVariantAttributes, dataDictAttributes)                  
								</div>
							}
                        }
                    
                        <!-- giftcard infos -->                    
                        @{
                            var dataDictGiftCard = new ViewDataDictionary();
                            dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = string.Format("giftcard_{0}", Model.Id);
                            if (Model.GiftCard.IsGiftCard)
                            {
                                <div class="giftcard-infos line">
                                    @Html.Partial("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                </div>
                            }
                        }
                    
                        <!-- addd to cart -->
						<div id="AddToCart">
                        @{       
                            var dataDictAddToCart = new ViewDataDictionary();
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = string.Format("addtocart_{0}", Model.Id);                
                            @Html.Partial("_AddToCart", Model, dataDictAddToCart)                    
                        }
						</div>

                    <!-- quick links -->
                    <!-- TODO: _DownloadSample.cshtml ist jetzt eigentlich obsolete -->
                    <div class="quick-links line">
                        @if (Model.HasSampleDownload)
                        {
                        <div>
                            <a href="@Url.RouteUrl("GetSampleDownload", new { productid = Model.Id })">
                                <i class="icon-download-alt"></i>
                                @T("Products.DownloadSample")
                            </a>
                        </div>
                        }
                        @Html.Action("ProductEmailAFriendButton", "Catalog", new { productId = Model.Id })
                        @Html.Action("ProductAskQuestionButton", "Catalog", new { productId = Model.Id })
                        @Html.Action("CompareProductsButton", "Catalog", new { productId = Model.Id })
                        @if (!Model.AddToCart.DisableWishlistButton)
                        {
                        <div>
                            <a data-href='@Url.RouteUrl("AddProductToCart-Details", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist })'
                                href="#"
                                class="ajax-cart-link" 
                                data-form-selector="#product-details-form"
                                data-type="wishlist"
                                data-action="add">
                                <i class="icon-gift"></i>
                                @T("ShoppingCart.AddToWishlist")
                            </a>
                        </div>
                        }
                    </div>

                    <!-- social share -->
                    @Html.Action("ShareButton", "Catalog")

                    <!-- tier prices -->
                    @Html.Action("ProductTierPrices", "Catalog", new { productId = Model.Id })
                
                    </div>
                        
                    @Html.Widget("productdetails_overview_bottom") 
                </div>
            
            </div>

			<div class="clear"></div>
            
            <div class="bottom-content">

                <!-- tabs -->
                @Html.SmartStore().TabStrip().Name("product-detail-tabs").Items(x =>
                {
                    var specificationAttributes = Html.Action("ProductSpecifications", "Catalog", new { productId = Model.Id }).ToString();
                    var reviews = Html.Action("ProductDetailReviews", "Catalog", new { productId = Model.Id }).ToString();

                    if (!String.IsNullOrWhiteSpace(Model.FullDescription))
                    {
                        x.Add().Text(@T("Products.Details"))
                                .Content(Html.Raw("<div class='more-less'><div class='more-block' itemprop='description'>" + Model.FullDescription + "</div></div>").ToString())
                                .Selected(true);
                    }

                    if (!String.IsNullOrWhiteSpace(specificationAttributes))
                    {
                        x.Add().Text(@T("Products.Specs"))
                                .Content(specificationAttributes)
                                .Selected(String.IsNullOrWhiteSpace(Model.FullDescription));
                    }

                    if (reviews.HasValue())
                    {
                        x.Add().Text(@T("Reviews.ExistingReviews"))
                                .Content(reviews)
                                .Badge(Model.ReviewCount.ToString(), BadgeStyle.Info, Model.ReviewCount > 0)
                                .Selected(String.IsNullOrWhiteSpace(Model.FullDescription) && String.IsNullOrWhiteSpace(specificationAttributes));
                    }
                    
                    //generate an event
                    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "product-detail", this.Html, this.Model));
                })
            

                @Html.Action("RelatedProducts", "Catalog", new { productId = Model.Id })

                <!-- product recommendations -->
                <div class="product-recommendations">
                    @Html.Action("ProductsAlsoPurchased", "Catalog", new { productId = Model.Id })
                </div>
            
                <!-- product tags -->
                <div class="product-tags">
                    @Html.Action("ProductTags", "Catalog", new { productId = Model.Id })
                </div>
            
            </div>
            </article>
        }
        @Html.Widget("productdetails_bottom")
    </div>
</div>

@{Html.SmartStore().Window()
    .Name("productquestion-window")
    .Title(T("Admin.Customers.Customers.SendEmail").Text)
    .Content(@<text>
        @using (Html.BeginForm("ProductQuestionSend", "Catalog", new { id = Model.Id }))
        {
            @*<table style="text-align: left;">
                <tr>
                    <td class="adminTitle">
                        @Html.SmartLabelFor(model => model.SendEmail.Subject)
                    </td>
                    <td class="adminData">
                        @Html.EditorFor(model => model.SendEmail.Subject)
                        @Html.ValidationMessageFor(model => model.SendEmail.Subject)
                    </td>
                </tr>
                <tr>
                    <td class="adminTitle">
                        @Html.SmartLabelFor(model => model.SendEmail.Body)
                    </td>
                    <td class="adminData">
                        @Html.TextAreaFor(model => model.SendEmail.Body, new { style = "Width: 450px; Height: 350px;" })
                        @Html.ValidationMessageFor(model => model.SendEmail.Body)
                    </td>
                </tr>
            </table>*@
        }
        </text>)
    .FooterContent(@<text>
        <button id="sendquestion" type="button" class="btn btn-primary">@T("Admin.Customers.Customers.SendEmail")</button>
        <a href="#" class="btn btn-link" data-dismiss="modal" aria-hidden="true">@T("Common.Close")</a>
    </text>)
    .Width(600)
    .Height(460)
    .Modal(true)
    .Visible(false)
    .Render();
}
<script type="text/javascript">
    $(function () {
        $("#sendquestion").click(function (e) {
            e.preventDefault();
            $("#productquestion-window").find("form").submit();
        });

        var settings = {
            galleryWidth: 318,
            galleryHeight: 250,
            galleryStartIndex: @(Model.DetailsPictureModel.GalleryStartIndex),
            showImageDescription: false,
            enableZoom: toBool('@(Model.DetailsPictureModel.DefaultPictureZoomEnabled)'),
            zoomType: '@Model.DetailsPictureModel.PictureZoomType' // window, inner, lens
        };

        $('#product-details-form').productDetail(settings);

        if( toBool('@(Model.EnableHtmlTextCollapser)') )
        {
            var moreLess = $('.more-less');
            if (moreLess.height() > parseInt(@(Model.HtmlTextCollapsedHeight))) {
                $('.more-less').moreLess({ adjustheight: parseInt(@(Model.HtmlTextCollapsedHeight))});
            }
        }
    });
</script>