@model CheckoutPaymentMethodModel
@using SmartStore.Web.Models.Checkout;

@{    
    string marginClass = " no-left-margin";

    for (int i = 0; i < Model.PaymentMethods.Count; i++)
    {
        var paymentMethod = Model.PaymentMethods[i];

        if (!String.IsNullOrEmpty(paymentMethod.BrandUrl))
        {
            marginClass = "";
            break;
        }
    } 
}

<div class="checkout-data">
    @Html.Widget("op_checkout_payment_method_top")
    @if (Model.DisplayRewardPoints && Model.PaymentMethods.Count > 0)
    {
        <div class="use-reward-points">
            @Html.EditorFor(model => model.UseRewardPoints)
            @string.Format(T("Checkout.UseRewardPoints").Text, Model.RewardPointsBalance, Model.RewardPointsAmount)
        </div>
    }
    <div class="payment-methods">
        @if (Model.PaymentMethods.Count > 0)
        {
            <div>
                @for (int i = 0; i < Model.PaymentMethods.Count; i++)
                {
                    var paymentMethod = Model.PaymentMethods[i];

                    string cssClass = "line";
                    if (i == 0)
                    {
                        cssClass += " alpha";
                    }
                    if (i == Model.PaymentMethods.Count - 1)
                    {
                        cssClass += " omega";
                    }
                    if (i % 2 == 0)
                    {
                        cssClass += " even";
                    }
                    else
                    {
                        cssClass += " odd";
                    }
                    cssClass += marginClass;
                    
                    <div class="clearfix payment-method-item @cssClass">
                        <div class="branding pull-left">
                            @if (!String.IsNullOrEmpty(paymentMethod.BrandUrl))
                            {
                                <img src="@Url.Content(paymentMethod.BrandUrl)" />
                            }
                        </div>
                        <div class="payment-fee pull-right text-success">
                            @if (!String.IsNullOrEmpty(paymentMethod.Fee))
                            {
                                @paymentMethod.Fee
                            }
                        </div>
                        <div class="option-name">
                            <label for="paymentmethod_@(i)" class="radio">
                                <input id="paymentmethod_@(i)" type="radio" name="paymentmethod" value="@(paymentMethod.PaymentMethodSystemName)" checked="@paymentMethod.Selected" />
                                @paymentMethod.Name
                            </label>
							@if (!String.IsNullOrWhiteSpace(paymentMethod.Description))
							{
								<div class="payment-method-desc">
									@Html.Raw(paymentMethod.Description)
								</div>
							}
                        </div>
 
                    </div>
                }
            </div>
        }
        else
        {
            <div class="message-error">
                @T("Checkout.NoPaymentMethods")
            </div>
        }
    </div>
    @Html.Widget("op_checkout_payment_method_bottom")
</div>
