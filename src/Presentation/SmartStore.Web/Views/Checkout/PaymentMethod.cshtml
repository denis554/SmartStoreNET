@model CheckoutPaymentMethodModel
@using SmartStore.Core.Domain.Orders;
@using SmartStore.Web.Models.Checkout;
@using SmartStore.Web.Models.Common;
@{
    Layout = "~/Views/Shared/_Checkout.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    
    string marginClass = " no-left-margin";

    for (int i = 0; i < Model.PaymentMethods.Count; i++)
    {
        var paymentMethod = Model.PaymentMethods[i];

        if (!String.IsNullOrEmpty(paymentMethod.BrandUrl))
        {
            marginClass = "";
            break;
        }
    } 
}
@section orderProgress{
    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Payment })
}
<div class="page payment-method-page">
    <div class="page-title">
        <h1>@T("Checkout.SelectPaymentMethod")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginRouteForm("CheckoutPaymentMethod", FormMethod.Post))
        {
            @Html.Widget("checkout_payment_method_top")
            if (Model.DisplayRewardPoints && Model.PaymentMethods.Count > 0)
            {
                <div class="alert alert-info">
                    <label class="checkbox">
                        @Html.EditorFor(model => model.UseRewardPoints)
                        @Html.Raw(string.Format(T("Checkout.UseRewardPoints").Text, "<strong>" + Model.RewardPointsBalance + "</strong>", "<strong>" + Model.RewardPointsAmount + "</strong>"))
                    </label>
                </div>
            }
            <div class="payment-methods">
                @*var hasImages = @Model.PaymentMethods.Any(x => !string.IsNullOrEmpty(x.BrandUrl));*@
                @if (Model.PaymentMethods.Count > 0)
                {
                    <div>
                        @for (int i = 0; i < Model.PaymentMethods.Count; i++)
                        {
                            var paymentMethod = Model.PaymentMethods[i];

                            string cssClass = "line";
                            if (i == 0)
                            {
                                cssClass += " alpha";
                            }
                            if (i == Model.PaymentMethods.Count - 1)
                            {
                                cssClass += " omega";
                            }
                            if (i % 2 == 0)
                            {
                                cssClass += " even";
                            }
                            else
                            {
                                cssClass += " odd";
                            }
                            cssClass += marginClass;
                            
                            <div class="clearfix payment-method-item @cssClass">
                                <div class="branding pull-left">
                                    @if (!String.IsNullOrEmpty(paymentMethod.BrandUrl))
                                    {
                                        <img src="@Url.Content(paymentMethod.BrandUrl)" />
                                    }
                                </div>
                                <div class="payment-fee pull-right text-success">
                                    @if (!String.IsNullOrEmpty(paymentMethod.Fee))
                                    {
                                        @paymentMethod.Fee
                                    }
                                </div>
                                <div class="option-name">
                                    <label for="paymentmethod_@(i)" class="radio pull-left">
                                        <input id="paymentmethod_@(i)" type="radio" name="paymentmethod" value="@(paymentMethod.PaymentMethodSystemName)" checked="@paymentMethod.Selected" />
                                        <span class="payment-method-name">@paymentMethod.Name</span>
                                    </label>
									@if (!String.IsNullOrWhiteSpace(paymentMethod.Description))
									{
										<div class="payment-method-desc">
											@Html.Raw(paymentMethod.Description)
										</div>
									}
                                </div>
                            </div>
                        }
                        <div class="select-button clearfix">
                            <a class="btn pull-left" href="@Url.RouteUrl("CheckoutShippingMethod")">
                                <i class="icon-caret-left"></i>&nbsp;
                                @T("Common.Back")
                            </a>    

                            <input type="submit" name="nextstep" id="nextstep" style="display:none"/>

                            <button class="btn btn-warning pull-right payment-method-next-step-button" onclick="$('#nextstep').trigger('click');return false;">
                                @T("Checkout.NextButton")
                                &nbsp;<i class="icon-caret-right"></i>
                            </button>

                        </div>
                    </div>
                }
                else
                {
                    <div class="message-error">
                        @T("Checkout.NoPaymentMethods")
                    </div>
                }
            </div>
            
            @Html.Widget("checkout_payment_method_bottom")
        }
        
        @*<div class="order-summary-title">
            @T("Checkout.OrderSummary")
        </div>
        <div class="order-summary-body">
            @Html.Action("OrderSummary", "ShoppingCart")
        </div>*@
    </div>
</div>
