@model ProductVariantModel
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.UI;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Core;
@using SmartStore.Admin;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.ProductId)
@Html.SmartStore().TabStrip().Name("productvariant-edit").Items(x => {
	x.Add().Text(T("Admin.Catalog.Products.Variants.Info").Text).Content(TabInfo()).Selected(true);
	x.Add().Text(T("Admin.Catalog.Products.Variants.TierPrices").Text).Content(TabTierPrices());

	x.Add().Text(T("Admin.Catalog.Products.Variants.ProductVariantAttributes.Attributes").Text).Content(TabAttributes());
	x.Add().Text(T("Admin.Catalog.Products.Variants.ProductVariantAttributes.AttributeCombinations").Text).Content(TabAttributeCombinations());

	//x.Add().Text(T("Admin.Catalog.Products.Variants.ProductVariantAttributes").Text).Content(TabProductVariantAttributes());
	x.Add().Text(T("Admin.Catalog.Products.Variants.Discounts").Text).Content(TabDiscounts());

	//generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "productvariant-edit", this.Html, this.Model));
})
@helper TabInfo() {
    @Html.Partial("_ProductVariantInfo", Model, new ViewDataDictionary())
}
@helper TabTierPrices() {
	if (Model.Id > 0) {
    @(Html.Telerik().Grid<ProductVariantModel.TierPriceModel>()
			.Name("tierprices-grid")
				.DataKeys(keys => {
					keys.Add(x => x.Id);
				})
				.DataBinding(dataBinding => {
					dataBinding.Ajax()
						.Select("TierPriceList", "ProductVariant", new { productVariantId = Model.Id })
						.Insert("TierPriceInsert", "ProductVariant", new { productVariantId = Model.Id })
						.Update("TierPriceUpdate", "ProductVariant")
						.Delete("TierPriceDelete", "ProductVariant");
				})
				.Columns(columns => {
					columns.Bound(x => x.Store)
						 .Centered();
					columns.Bound(x => x.CustomerRole)
						.Centered();
					columns.Bound(x => x.Quantity)
						.Centered();
					columns.Bound(x => x.Price1)
                        .Format("{0:G29}");
					columns.Command(commands => {
						commands.Edit().Localize(T);
						commands.Delete().Localize(T);
					})
					.Width(180);
				})
				.ToolBar(commands => commands.Insert())
				.ClientEvents(events => events.OnEdit("onTierPriceEdit"))
				.EnableCustomBinding(true))
    
    <script type="text/javascript">
        function onTierPriceEdit(e) {
            // codehint: sm-edit
            $(e.form).find('#CustomerRole').select2('val', e.dataItem['CustomerRoleId']);
        }
    </script>
	}
	else {
    @T("Admin.Catalog.Products.Variants.TierPrices.SaveBeforeEdit")
	}
        
}

@helper TabDiscounts() {
	if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Count > 0) {
		foreach (var discount in Model.AvailableDiscounts) {
                <label class="checkbox">
                    <input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
                    @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) {
                        <text>checked="checked"</text>
					}
                    />@discount.Name
                </label>
		}
	}
	else {
    @T("Admin.Catalog.Products.Variants.Discounts.NoDiscounts")
	}
}

@helper TabAttributes() {
	if (Model.Id > 0) {
		if (Model.NumberOfAvailableProductAttributes > 0) {

            @(Html.Telerik().Grid<ProductVariantModel.ProductVariantAttributeModel>()
			.Name("productvariantattributes-grid")
			.DataKeys(keys => {
				keys.Add(x => x.Id);
			})
			.DataBinding(dataBinding => {
				dataBinding.Ajax()
					.Select("ProductVariantAttributeList", "ProductVariant", new { productVariantId = Model.Id })
					.Insert("ProductVariantAttributeInsert", "ProductVariant", new { productVariantId = Model.Id })
					.Update("ProductVariantAttributeUpdate", "ProductVariant") // codehint: sm-edit
					.Delete("ProductVariantAttributeDelete", "ProductVariant");
			})
			.Columns(columns => {
				columns.Bound(x => x.ProductAttribute)
					.Width(150)
					.Centered();
				columns.Bound(x => x.TextPrompt)
					.Width(150)
					.Centered();
				columns.Bound(x => x.IsRequired)
					.Width(100)
					.Template(item => @Html.SymbolForBool(item.IsRequired))
					.ClientTemplate(@Html.SymbolForBool("IsRequired"))
					.Centered();
				columns.Bound(x => x.AttributeControlType)
					.Width(150)
					.Centered();
				columns.Bound(x => x.DisplayOrder1)
					.Width(150)
					.Centered();
				columns.Bound(x => x.ViewEditUrl)
					.Width(200)
					.ClientTemplate("<a href=\"<#= ViewEditUrl #>\"><#= ViewEditText #></a>")
					.ReadOnly()
					.Title(T("Admin.Catalog.Products.Variants.ProductVariantAttributes.Attributes.Values").Text);
				columns.Command(commands => {
					commands.Edit().Localize(T);
					commands.Delete().Localize(T);
				})
				.Width(180);
			})
			.ToolBar(commands => commands.Insert())
			.ClientEvents(events => events.OnEdit("onProductVariantAttributeEdit"))
			.EnableCustomBinding(true))
    
            <script type="text/javascript">
                function onProductVariantAttributeEdit(e) {
                    // codehint: sm-edit
                    $(e.form).find('#ProductAttribute').select2('val', e.dataItem['ProductAttributeId']);
                    $(e.form).find('#AttributeControlType').select2('val', e.dataItem['AttributeControlTypeId']);
                }
            </script>
                        
		}
		else {
            @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.NoAttributesAvailable")
		}
	}
	else {
        @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.SaveBeforeEdit")
	}
}

@helper TabAttributeCombinations() {
	if (Model.Id > 0) {
		if (Model.NumberOfAvailableProductAttributes > 0) {

            <div style="margin: 10px 0px 10px 0px;" class="muted">
                @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.AttributeCombinations.Description")
            </div>
    
            <div style="margin: 10px 0">
                <button class="btn btn-warning add-new-combination">
                    <i class="icon-plus"></i>
                    @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.AttributeCombinations.AddNew")
                </button>

                <button type="button" id="btnCreateAllCombinations" class="btn"
                    data-url='@Url.Action("CreateAllAttributeCombinations", new { productVariantId = Model.Id })'>
                    <i class="icon-tasks"></i>
                    @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.AttributeCombinations.CreateAllCombinations")
                </button>

                <input type="submit" id="btnRefreshCombinations" name="btnRefreshCombinations" class="hide" />
	            <script type="text/javascript">
	                $(document).ready(function () {
	                    $('.add-new-combination').on('click', function (e) {
	                    	OpenWindow('@(Url.Action("AttributeCombinationCreatePopup", "ProductVariant", new { productVariantId = Model.Id }))&btnId=btnRefreshCombinations&formId=productvariant-form',
                                1000,
                                800,
                                true);
	                        return false;
	                    });

	                    $('#btnRefreshCombinations').click(function () {
	                        //refresh grid
	                        var optionsGrid = $("#attributecombinations-grid");
	                        optionsGrid.data('tGrid').ajaxRequest();

	                        //return false to don't reload a page
	                        return false;
	                    });

	                    $('#btnCreateAllCombinations').click(function () {
	                        $(this).doAjax({
	                        	ask: '@T("Admin.Catalog.Products.Variants.ProductVariantAttributes.AttributeCombinations.AskToCombineAll")',
	                            callbackSuccess: function (resp) {
	                                $('#btnRefreshCombinations').click();
	                            }
	                        });
	                    });
	                });
	            </script>
            </div>
    
            <div>
                @(Html.Telerik().Grid<ProductVariantAttributeCombinationModel>()
                        .Name("attributecombinations-grid")
                        .DataKeys(keys =>
                        {
                            keys.Add(x => x.Id);
                        })
                        .DataBinding(dataBinding =>
                        {
                            dataBinding.Ajax()
                                .Select("ProductVariantAttributeCombinationList", "ProductVariant", new { productVariantId = Model.Id })
                                //.Update("ProductVariantAttrbiuteCombinationUpdate", "ProductVariant")
                                .Delete("ProductVariantAttributeCombinationDelete", "ProductVariant");
                        })
                        .Columns(columns =>
                        {
                            columns.Bound(x => x.AttributesXml)
                                .ClientTemplate("<#= AttributesXml #><br /><span style=\"color: red\"><#= Warnings #></span>")
								.Width(460)
                                .Encoded(false)
                                .ReadOnly();
							columns.Bound(x => x.IsActive)
								.Width(80)
								.Template(item => @Html.SymbolForBool(item.IsActive))
								.ClientTemplate(@Html.SymbolForBool("IsActive"))
								.Centered();
							columns.Bound(x => x.ProductUrl)
								.Width(120)
								.Centered()
								.ClientTemplate("<a href=\"<#= ProductUrl #>\" target=\"_blank\"><#= ProductUrlTitle #></a>");
							columns.Bound(x => x.Sku);
                            columns.Bound(x => x.StockQuantity)
								.Width(160)
                                .Centered();
                            columns.Bound(x => x.AllowOutOfStockOrders)
								.Width(260)
                                .Template(item => @Html.SymbolForBool(item.AllowOutOfStockOrders))
                                .ClientTemplate(@Html.SymbolForBool("AllowOutOfStockOrders"))
                                .Centered();
                            columns.Bound(x => x.Id)
                                .Width(120)
                                .Centered()
                                .ClientTemplate("<button onclick=\"" + "OpenWindow('" + @Url.Content("~/Admin/ProductVariant/AttributeCombinationEditPopup/") + "<#= Id #>?btnId=btnRefreshCombinations&formId=productvariant-form', 1000, 800, true); return false;\" class='btn'>" + @T("Admin.Common.Edit").Text + "</button>")
                                .Title(T("Admin.Common.Edit").Text);
                            columns.Command(commands =>
                            {
                                //commands.Edit().Localize(T);
                                commands.Delete().Localize(T);
                            })
							.Width(120)
                            .Title(T("Admin.Common.Delete").Text);
                        })
						.ClientEvents(events => events.OnRowDataBound("onRowDataBound_Combinations"))
                        .EnableCustomBinding(true))

				<script type="text/javascript">@*codehint: sm-add*@
					function onRowDataBound_Combinations(e) {
						if (!e.dataItem.IsActive) {
							$(e.row).find('td').wrapInner('<span class="muted" />');
						}
					}
				</script>
            </div>
    
            <button class="btn btn-warning add-new-combination" style="margin-top: 10px">
                <i class="icon-plus"></i>
                @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.AttributeCombinations.AddNew")
            </button>
            
		}
		else {
            @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.NoAttributesAvailable")
		}
	}
	else {
        @T("Admin.Catalog.Products.Variants.ProductVariantAttributes.SaveBeforeEdit")
	}
    
}