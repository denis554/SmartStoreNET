@model ExportProfileModel
@using SmartStore.Admin.Models.DataExchange

<table class="adminContent">
	<tr>
		<td class="adminTitle">
			@Html.SmartLabelFor(x => x.FolderName)
		</td>
		<td class="adminData">
			@Html.TextBoxFor(x => x.FolderName, new { @class = "input-large" })
			@Html.ValidationMessageFor(x => x.FolderName)
		</td>
	</tr>
	@if (Model.Provider.IsFileBasedExport)
	{
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.FileNamePattern)
			</td>
			<td class="adminData">
				<div>
					@Html.TextBoxFor(x => x.FileNamePattern, new { @class = "input-large" })
					@Html.ValidationMessageFor(x => x.FileNamePattern)
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				&nbsp;
			</td>
			<td class="adminData">
				<div>
					<a id="FileNamePatternDescriptionLink" href="javascript:void(0)">@T("Admin.Common.Show")&hellip;</a>
					<div id="FileNamePatternDescription" class="btn-below hide">
						@FileNamePatternDescription()
					</div>
				</div>

				<div class="clear"></div>
				<div id="FileNamePatternExample" class="btn-below">
					<button type="button" class="btn btn-small pull-left">
						<i class="fa fa-refresh"></i>&nbsp;@T("Common.Example")
					</button>
					<span class="pull-left">&nbsp;&nbsp;</span>
					<div class="pull-left" style="padding-top: 4px;">@Model.FileNamePatternExample</div>
				</div>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.CreateZipArchive)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.CreateZipArchive)
				@Html.ValidationMessageFor(x => x.CreateZipArchive)
				@if (Model.Details.ZipPath.HasValue())
				{
					<div style="display: inline-block; margin-left: 10px;">
						@Html.IconForFileExtension(Path.GetExtension(Model.Details.ZipPath), false)
						<a href="@Url.Action("DownloadExportFile", new { id = Model.Id, name = Path.GetFileName(Model.Details.ZipPath) })" download>@Path.GetFileName(Model.Details.ZipPath)</a>
					</div>
				}
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Cleanup)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Cleanup)
				@Html.ValidationMessageFor(x => x.Cleanup)
			</td>
		</tr>
	}
	<tr>
		<td class="adminTitle">
			@Html.SmartLabelFor(x => x.EmailAccountId)
		</td>
		<td class="adminData">
			@Html.DropDownListFor(x => x.EmailAccountId, Model.AvailableEmailAccounts, Model.UnspecifiedString)
			@Html.ValidationMessageFor(x => x.EmailAccountId)
		</td>
	</tr>
	<tr id="CompletedEmailAddressesContainer">
		<td class="adminTitle">
			@Html.SmartLabelFor(x => x.CompletedEmailAddresses)
		</td>
		<td class="adminData">
			@Html.HiddenFor(model => model.CompletedEmailAddresses)
			@Html.ValidationMessageFor(x => x.CompletedEmailAddresses)
		</td>
	</tr>
</table>

<p>&nbsp;</p>

@if (Model.Provider.IsFileBasedExport)
{
	<div class="alert alert-info">
		@Html.Raw(T("Admin.DataExchange.Export.Deployment.Note"))
	</div>

	<a href="@Url.Action("CreateDeployment", new { id = Model.Id })" class="btn btn-warning btn-above">
		<i class="fa fa-plus"></i>&nbsp;@T("Common.AddNew")
	</a>

	if (Model.Deployments.Count > 0)
	{
		<div>
			<table id="export-deployment-list" class="table admin-table">
				<thead>
					<tr>
						<th>@T("Admin.DataExchange.Export.Deployment.Name")</th>
						<th class="centered">@T("Common.Enabled")</th>
						<th>@T("Admin.DataExchange.Export.Deployment.DeploymentType")</th>
						<th>@T("Admin.Common.Actions")</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var deployment in Model.Deployments)
					{
						<tr class="@(deployment.Enabled ? "" : "disabled")">
							<td>
								<a href="@Url.Action("EditDeployment", new { id = deployment.Id })">@deployment.Name</a>
							</td>
							<td class="centered">
								@Html.SymbolForBool(deployment.Enabled)
							</td>
							<td style="width: 50%;">
								@Html.Partial("InfoDeployment", deployment)
							</td>
							<td>
								<a href="@Url.Action("DeleteDeployment", new { id = deployment.Id })" class="btn btn-small btn-danger" onclick="return confirm('@T("Admin.Common.AreYouSure")');">
									@T("Common.Delete")
								</a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}
else
{
	<div class="alert alert-info">
		@Html.Raw(T("Admin.DataExchange.Export.NonFileBasedExport.Note"))
	</div>
}

@helper FileNamePatternDescription()
{
	<table class="table admin-table" style="width: 560px;">
		<thead>
			<tr>
				<th>@T("Admin.Common.Placeholder")</th>
				<th>@T("Common.Description")</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>%Profile.Id%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(0)</td>
			</tr>
			<tr>
				<td>%Profile.FolderName%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(1)</td>
			</tr>
			<tr>
				<td>%Profile.SeoName%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(2)</td>
			</tr>
			<tr>
				<td>%Store.Id%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(3)</td>
			</tr>
			<tr>
				<td>%Store.SeoName%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(4)</td>
			</tr>
			<tr>
				<td>%File.Index%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(5)</td>
			</tr>
			<tr>
				<td>%Random.Number%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(6)</td>
			</tr>
			<tr>
				<td>%Timestamp%</td>
				<td>@Model.FileNamePatternDescriptions.SafeGet(7)</td>
			</tr>
		</tbody>
</table>
}

<script type="text/javascript">
	$(document).ready(function () {

		// show/hide file name pattern descriptions
		$('#FileNamePatternDescriptionLink').click(function () {
			var descriptions = $('#FileNamePatternDescription');
			$('#FileNamePatternDescriptionLink').html((descriptions.is(':visible') ? '@T("Admin.Common.Show")' : '@T("Admin.Common.Hide")') + '...');
			descriptions.toggle();
		});
	});
</script>