@model ExportProfileModel
@using SmartStore.Core.Domain.DataExchange;
@using SmartStore.Admin.Models.DataExchange;

<div class="alert alert-info">
	<button type="button" class="close" data-dismiss="alert">×</button>
	@Html.Raw(T("Admin.Configuration.Export.Projection.Note"))
</div>

<table class="adminContent">
	@if (Model.ProductProjection != null)
	{
		<tr id="ProjectionStoreContainer">
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ProductProjection.StoreId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(x => x.ProductProjection.StoreId, Model.ProductProjection.AvailableStores, Model.UnspecifiedString)
				@Html.ValidationMessageFor(x => x.ProductProjection.StoreId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ProductProjection.LanguageId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(x => x.ProductProjection.LanguageId, Model.ProductProjection.AvailableLanguages, Model.UnspecifiedString)
				@Html.ValidationMessageFor(x => x.ProductProjection.LanguageId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ProductProjection.CurrencyId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(x => x.ProductProjection.CurrencyId, Model.ProductProjection.AvailableCurrencies, Model.UnspecifiedString)
				@Html.ValidationMessageFor(x => x.ProductProjection.CurrencyId)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ProductProjection.CustomerId)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.ProductProjection.CustomerId)
				@Html.ValidationMessageFor(x => x.ProductProjection.CustomerId)
			</td>
		</tr>

		if (Model.Provider.ProjectionSupport.Contains(ExportProjectionSupport.AttributeCombinationAsProduct))
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.AttributeCombinationAsProduct)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.AttributeCombinationAsProduct)
					@Html.ValidationMessageFor(x => x.ProductProjection.AttributeCombinationAsProduct)
				</td>
			</tr>
			<tr id="AttributeCombinationAddValuesToNameContainer">
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.AttributeCombinationValueMergingId)
				</td>
				<td class="adminData">
					@Html.DropDownListFor(x => x.ProductProjection.AttributeCombinationValueMergingId, Model.ProductProjection.AvailableAttributeCombinationValueMerging)
					@Html.ValidationMessageFor(x => x.ProductProjection.AttributeCombinationValueMergingId)
				</td>
			</tr>
		}

		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ProductProjection.PriceType)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(x => x.ProductProjection.PriceType, Model.ProductProjection.AvailablePriceTypes, Model.UnspecifiedString)
				@Html.ValidationMessageFor(x => x.ProductProjection.PriceType)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ProductProjection.ConvertNetToGrossPrices)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.ProductProjection.ConvertNetToGrossPrices)
				@Html.ValidationMessageFor(x => x.ProductProjection.ConvertNetToGrossPrices)
			</td>
		</tr>

		if (Model.Provider.ProjectionSupport.Contains(ExportProjectionSupport.ShippingTime))
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.ShippingTime)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.ShippingTime)
					@Html.ValidationMessageFor(x => x.ProductProjection.ShippingTime)
				</td>
			</tr>
		}

		if (Model.Provider.ProjectionSupport.Contains(ExportProjectionSupport.ShippingCosts))
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.ShippingCosts)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.ShippingCosts)
					@Html.ValidationMessageFor(x => x.ProductProjection.ShippingCosts)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.FreeShippingThreshold)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.FreeShippingThreshold)
					@Html.ValidationMessageFor(x => x.ProductProjection.FreeShippingThreshold)
				</td>
			</tr>
		}

		if (Model.Provider.ProjectionSupport.Contains(ExportProjectionSupport.MainPictureUrl))
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.PictureSize)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.PictureSize)
					@Html.ValidationMessageFor(x => x.ProductProjection.PictureSize)
				</td>
			</tr>
		}

		if (Model.Provider.ProjectionSupport.Contains(ExportProjectionSupport.Brand))
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.Brand)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.Brand)
					@Html.ValidationMessageFor(x => x.ProductProjection.Brand)
				</td>
			</tr>
		}

		if (Model.Provider.ProjectionSupport.Contains(ExportProjectionSupport.Description))
		{
			<tr>
				<td colspan="2">
					<div class="admin-config-group">
						<div class="title">@T("Common.DetailDescription")</div>
					</div>
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.DescriptionMergingId)
				</td>
				<td class="adminData">
					@Html.DropDownListFor(x => x.ProductProjection.DescriptionMergingId, Model.ProductProjection.AvailableDescriptionMergings)
					@Html.ValidationMessageFor(x => x.ProductProjection.DescriptionMergingId)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.AppendDescriptionText)
				</td>
				<td class="adminData">
					@Html.HiddenFor(x => x.ProductProjection.AppendDescriptionText)
					@Html.ValidationMessageFor(x => x.ProductProjection.AppendDescriptionText)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.RemoveCriticalCharacters)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.RemoveCriticalCharacters)
					@Html.ValidationMessageFor(x => x.ProductProjection.RemoveCriticalCharacters)
				</td>
			</tr>
			<tr id="CriticalCharactersContainer">
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.CriticalCharacters)
				</td>
				<td class="adminData">
					@Html.HiddenFor(x => x.ProductProjection.CriticalCharacters)
					@Html.ValidationMessageFor(x => x.ProductProjection.CriticalCharacters)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.ProductProjection.DescriptionToPlainText)
				</td>
				<td class="adminData">
					@Html.EditorFor(x => x.ProductProjection.DescriptionToPlainText)
					@Html.ValidationMessageFor(x => x.ProductProjection.DescriptionToPlainText)
				</td>
			</tr>
		}
	}
</table>