@using SmartStore.Core.Domain.DataExchange
@using SmartStore.Admin.Models.DataExchange
@model ExportDeploymentModel
@{
	Layout = null;
}
@helper FileDownloadLink(string path, string fileName)
{
	<div>
		@Html.IconForFileExtension(Path.GetExtension(fileName), false)
		<a href="@Url.Action("DownloadExportFile", new { id = Model.ProfileId, name = fileName })" download>@fileName</a>
	</div>
}
<div>
	<i class="fa @(Model.DeploymentTypeIconClass)"></i>&nbsp;@Model.DeploymentTypeName
</div>
<div style="margin: 5px 0 0 20px;">
	@if (Model.DeploymentType == ExportDeploymentType.FileSystem)
	{
		foreach (var path in Model.ProfileDetails.ExportFiles)
		{
			@FileDownloadLink(path, Path.GetFileName(path))
		}

		if (Model.ProfileDetails.PublicFiles.Count > 0)
		{
			foreach (var grp in Model.ProfileDetails.PublicFiles.OrderBy(x => x.StoreId).GroupBy(x => x.StoreId))
			{
				<p></p>
				<div>@(grp.First().StoreName):</div>
				foreach (var file in grp)
				{
					<div><a href="@file.FileUrl" download>@file.FileUrl</a></div>
				}
			}
		}
	}
	else if (Model.DeploymentType == ExportDeploymentType.Email)
	{
		<div>@Model.EmailAddresses</div>
	}
	else if (Model.DeploymentType == ExportDeploymentType.Http)
	{
		<div>@Model.Url</div>
	}
	else if (Model.DeploymentType == ExportDeploymentType.Ftp)
	{
		<div>@Model.Url</div>
	}
	else if (Model.DeploymentType == ExportDeploymentType.PublicFolder)
	{
		<div>TODO</div>
	}
</div>