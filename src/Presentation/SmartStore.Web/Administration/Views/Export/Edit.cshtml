@model ExportProfileModel
@using SmartStore.Core.Domain.DataExchange;
@using SmartStore.Admin.Models.DataExchange;
@{
	var title = string.Concat(T("Admin.Common.Edit"), " ", T("Common.Profile"));	
	ViewBag.Title = title;
}

@using (Html.BeginForm())
{
	<fieldset>
		@Html.HiddenFor(model => model.Id)

		<div class="section-header">
			<div class="title">
				<img src="@Url.Content(Model.Provider.ThumbnailUrl)" />
				@title - @Model.Name @Html.ActionLink("(" + T("Admin.Common.BackToList") + ")", "List")
			</div>
			<div class="options">
				<a href="@Url.Action("Preview", new { id = Model.Id })" class="btn"><i class="fa fa-eye"></i>&nbsp;@T("Admin.Common.Preview")</a>
				<button type="submit" name="save" value="save" class="btn btn-primary"><i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")</button>
				<button type="submit" name="save" value="save-continue" class="btn">@T("Admin.Common.SaveContinue")</button>
				<button type="submit" name="export-profile-delete" id="export-profile-delete" value="export-profile-delete" class="btn btn-danger">
					<i class="fa fa-trash-o"></i>&nbsp;@T("Admin.Common.Delete")
				</button>
			</div>
		</div>

		@Html.ValidationSummary(false)

		@Html.SmartStore().TabStrip().Name("export-profile-edit").Items(x =>
		{
			x.Add().Text(T("Common.General").Text).Content(TabGeneral()).Selected(true);
			x.Add().Text(T("Common.Partition").Text).Content(TabPartition());
			x.Add().Text(T("Common.Filter").Text).Content(TabFilter());
			x.Add().Text(T("Common.Projection").Text).Content(TabProjection());
			x.Add().Text(T("Admin.Configuration").Text).Content(TabConfiguration());
			x.Add().Text(T("Common.Deployment").Text).Content(TabDeployment());

			EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "export-profile-edit", this.Html, this.Model));
		})
	</fieldset>
}

@helper TabGeneral()
{
	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Provider.FriendlyName)
			</td>
			<td class="adminData">
				<a href="@Model.Provider.ConfigurationUrl" title="@T("Admin.Configuration.Plugins.Fields.Configure")">
					@Model.Provider.FriendlyName.NaIfEmpty() <span class="muted">(@(Model.Provider.SystemName.NaIfEmpty()))</span>
				</a>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Provider.Author)
			</td>
			<td class="adminData">
				@Html.DisplayFor(x => x.Provider.Author)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Provider.Version)
			</td>
			<td class="adminData">
				@Html.DisplayFor(x => x.Provider.Version)
			</td>
		</tr>
		@if (Model.Provider.Url.HasValue())
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(x => x.Provider.Url)
				</td>
				<td class="adminData">
					<a href="@Model.Provider.Url" target="PluginWebsiteWnd" rel="nofollow">@Model.Provider.Url</a>
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Provider.EntityTypeName)
			</td>
			<td class="adminData">
				@Html.DisplayFor(x => x.Provider.EntityTypeName)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Provider.FileExtension)
			</td>
			<td class="adminData">
				@Html.DisplayFor(x => x.Provider.FileExtension)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Provider.Description)
			</td>
			<td class="adminData">
				@if (Model.Provider.Description.HasValue())
				{
					@Html.Raw(Model.Provider.Description)
				}
				else
				{
					<span class="muted">@("".NaIfEmpty())</span>
				}
			</td>
		</tr>

		<tr>
			<td colspan="2">&nbsp;</td>
		</tr>

		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Name)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Name)
				@Html.ValidationMessageFor(x => x.Name)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Enabled)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Enabled)
				@Html.ValidationMessageFor(x => x.Enabled)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.ScheduleTaskId)
			</td>
			<td class="adminData">
				<span class="label label-inline@(Model.IsTaskEnabled ? " label-warning" : "")">@(Model.IsTaskEnabled ? T("Common.Scheduled") : T("Common.Unscheduled"))</span>

				<a href="@Url.Action("Edit", "ScheduleTask", new { id = Model.ScheduleTaskId })">@Model.ScheduleTaskName</a>
			</td>
		</tr>
	</table>
}

@helper TabPartition()
{
	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Offset)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Offset)
				@Html.ValidationMessageFor(x => x.Offset)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Limit)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Limit)
				@Html.ValidationMessageFor(x => x.Limit)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.BatchSize)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.BatchSize)
				@Html.ValidationMessageFor(x => x.BatchSize)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.PerStore)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.PerStore)
				@Html.ValidationMessageFor(x => x.PerStore)
			</td>
		</tr>
	</table>
}

@helper TabFilter()
{
	@Html.Partial("_CreateOrUpdate.Filter", Model)
}

@helper TabProjection()
{
	@Html.Partial("_CreateOrUpdate.Projection", Model)
}

@helper TabConfiguration()
{
	<div id="ProviderConfigurationContainer">
		<fieldset>
			@if (Model.Provider.ConfigPartialViewName.HasValue())
			{
				<div class="alert alert-info">
					<button type="button" class="close" data-dismiss="alert">×</button>
					@Html.Raw(T("Admin.DataExchange.Export.Configuration.Note"))
				</div>
				
				var viewData = new ViewDataDictionary();
				viewData.TemplateInfo.HtmlFieldPrefix = "CustomProperties[ProviderConfigData]";
				@Html.Hidden("CustomProperties[ProviderConfigData].__Type__", Model.Provider.ConfigDataType.AssemblyQualifiedName)
				@Html.Partial(Model.Provider.ConfigPartialViewName, Model.Provider.ConfigData, viewData)
			}
			else
			{
				<div class="alert alert-info">
					@Html.Raw(T("Admin.DataExchange.Export.Configuration.NotRequired", Model.Provider.FriendlyName.NaIfEmpty()))
				</div>
			}
		</fieldset>
	</div>
}

@helper TabDeployment()
{
	<div class="alert alert-info">
		<button type="button" class="close" data-dismiss="alert">×</button>
		@Html.Raw(T("Admin.DataExchange.Export.Deployment.Note"))
	</div>
	
	<script type="text/javascript">
		function onRowDataBound_ExportDeployments(e) {
			if (!e.dataItem.Enabled) {
				$(e.row).find('td').wrapInner('<span class="muted" />');
			}
		}
	</script>
	<div>
		@(Html.Telerik().Grid<ExportDeploymentModel>()
			.Name("export-deployment-grid")
			.DataKeys(keys => keys.Add(x => x.Id)
			.RouteKey("Id"))
			.Columns(columns =>
			{
				columns.Bound(x => x.DeploymentTypeName)
					.Template(x => "<i class='fa {0}'></i>&nbsp;{1}".FormatInvariant(x.DeploymentTypeIconClass, x.DeploymentTypeName))
					.ClientTemplate("<i class='fa <#= DeploymentTypeIconClass #>'></i>&nbsp;<#= DeploymentTypeName #>")
					.Width(280);
				columns.Bound(x => x.Name)
					.Template(x => Html.ActionLink(x.Name, "EditDeployment", "Export", new { id = x.Id }, null))
					.ClientTemplate("<a href=\"/Admin/Export/EditDeployment/<#= Id #>\"><#= Name #></a>");
				columns.Bound(x => x.Enabled)
					.Width(100)
					.Template(item => @Html.SymbolForBool(item.Enabled))
					.ClientTemplate(@Html.SymbolForBool("Enabled"))
					.Centered();
				columns.Command(commands => 
					commands.Delete().Localize(T)
				).Width(100);
			})
			.ToolBar(commands =>
			{
				commands.Custom()
					.Name("export-deployment-add-button")
					.HtmlAttributes(new { @class = "btn btn-primary", href = @Url.Action("CreateDeployment", new { id = Model.Id }) })
					.Text("<i class='fa fa-plus'></i>&nbsp;" + @T("Common.AddNew"));
			})
			.DataBinding(dataBinding => 
				dataBinding.Ajax()
					.Select("DeploymentList", "Export", new { id = Model.Id })
					.Delete("DeleteDeployment", "Export", new { id = Model.Id, fromGrid = true })
			)
			.ClientEvents(events => events.OnRowDataBound("onRowDataBound_ExportDeployments"))
			.EnableCustomBinding(true))
	</div>
	
	<p></p>
	
	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.FolderName)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.FolderName)
				@Html.ValidationMessageFor(x => x.FolderName)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.FileNamePattern)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(x => x.FileNamePattern, new { @class = "input-large" })
				@Html.ValidationMessageFor(x => x.FileNamePattern)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.CreateZipArchive)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.CreateZipArchive)
				@Html.ValidationMessageFor(x => x.CreateZipArchive)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.EmailAccountId)
			</td>
			<td class="adminData">
				@Html.DropDownListFor(x => x.EmailAccountId, Model.AvailableEmailAccounts, Model.UnspecifiedString)
				@Html.ValidationMessageFor(x => x.EmailAccountId)
			</td>
		</tr>
		<tr id="CompletedEmailAddressesContainer">
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.CompletedEmailAddresses)
			</td>
			<td class="adminData">
				@Html.HiddenFor(model => model.CompletedEmailAddresses)
				@Html.ValidationMessageFor(x => x.CompletedEmailAddresses)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(x => x.Cleanup)
			</td>
			<td class="adminData">
				@Html.EditorFor(x => x.Cleanup)
				@Html.ValidationMessageFor(x => x.Cleanup)
			</td>
		</tr>
	</table>
}

@Html.DeleteConfirmation("export-profile-delete")

<script type="text/javascript">
	jQuery(document).ready(function () {

		$('#@(Html.FieldIdFor(x => x.CompletedEmailAddresses))').select2({ tags: [@(Html.Raw(Model.SerializedCompletedEmailAddresses))] });

		// show/hide store projection
		$('#@(Html.FieldIdFor(x => x.PerStore))').change(function () {
			$('#ProjectionStoreContainer').toggle(!$(this).is(':checked'));
		}).trigger('change');

		// show/hide completion email addresses
		$('#@(Html.FieldIdFor(x => x.EmailAccountId))').change(function () {
			$('#CompletedEmailAddressesContainer').toggle(!_.isEmpty($(this).val()));
		}).trigger('change');

		$('#@(Html.FieldIdFor(x => x.Projection.AppendDescriptionText))').select2({ tags: [@(Html.Raw(Model.Projection.SerializedAppendDescriptionText))] });
		$('#@(Html.FieldIdFor(x => x.Projection.CriticalCharacters))').select2({ tags: [@(Html.Raw(Model.Projection.SerializedCriticalCharacters))] });

		// show/hide attribute combination value appending
		$('#@(Html.FieldIdFor(x => x.Projection.AttributeCombinationAsProduct))').change(function () {
			$('#AttributeCombinationAddValuesToNameContainer').toggle($(this).is(':checked'));
		}).trigger('change');

		// show/hide critical characters
		$('#@(Html.FieldIdFor(x => x.Projection.RemoveCriticalCharacters))').change(function () {
			$('#CriticalCharactersContainer').toggle($(this).is(':checked'));
		}).trigger('change');

		// show/hide product category filter
		$('#@(Html.FieldIdFor(x => x.Filter.WithoutCategories))').change(function () {
			$('#FilterCategoryIdsContainer').toggle(_.isEmpty($(this).val()));
		}).trigger('change');

		// show/hide product manufacturer filter
		$('#@(Html.FieldIdFor(x => x.Filter.WithoutManufacturers))').change(function () {
			$('#FilterManufacturerIdContainer').toggle(_.isEmpty($(this).val()));
		}).trigger('change');
	});
</script>