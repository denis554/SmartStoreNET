@model ExportProfileModel
@using SmartStore.Core.Domain.DataExchange;
@using SmartStore.Admin.Models.DataExchange;
@{
	var title = string.Concat(T("Admin.Common.Edit"), " ", T("Common.Profile"));	
	ViewBag.Title = title;
}

@using (Html.BeginForm())
{
	@Html.HiddenFor(model => model.Id)

	<div class="section-header">
		<div class="title">
			@if (Model.Providing.ThumbnailUrl.HasValue())
			{
				<img src="@Url.Content(Model.Providing.ThumbnailUrl)" />
			}
			&nbsp;
			@title - @Model.Name @Html.ActionLink("(" + T("Admin.Common.BackToList") + ")", "List")
		</div>
		<div class="options">
			<button type="submit" name="save" value="save" class="btn btn-primary"><i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")</button>
			<button type="submit" name="save" value="save-continue" class="btn">@T("Admin.Common.SaveContinue")</button>
			<button type="submit" name="export-profile-delete" id="export-profile-delete" value="export-profile-delete" class="btn btn-danger">
				<i class="fa fa-trash-o"></i>&nbsp;@T("Admin.Common.Delete")
			</button>
		</div>
	</div>
	
	@Html.ValidationSummary(false)

	@Html.SmartStore().TabStrip().Name("export-profile-edit").Items(x =>
	{
		x.Add().Text(T("Common.General").Text).Content(TabGeneral()).Selected(true);
		x.Add().Text(T("Common.Filter").Text).Content(TabFilter());
		x.Add().Text(T("Common.Projection").Text).Content(TabProjection());
		x.Add().Text(T("Common.Partition").Text).Content(TabPartition());
		x.Add().Text(T("Admin.Configuration").Text).Content(TabConfiguration());
		x.Add().Text(T("Common.Publishing").Text).Content(TabDeployment());

		EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "export-profile-edit", this.Html, this.Model));
	})
}

@helper TabGeneral()
{
	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Providing.FriendlyName)
			</td>
			<td class="adminData">
				<a href="@Model.Providing.ConfigurationUrl" title="@T("Admin.Configuration.Plugins.Fields.Configure")">@Model.Providing.FriendlyName.NaIfEmpty()</a>
				<span class="muted">(@(Model.Providing.SystemName.NaIfEmpty()))</span>
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Providing.Author)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.Providing.Author)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Providing.Version)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.Providing.Version)
			</td>
		</tr>
		@if (Model.Providing.Url.HasValue())
		{
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.Providing.Url)
				</td>
				<td class="adminData">
					<a href="@Model.Providing.Url" target="PluginWebsiteWnd" rel="nofollow">@Model.Providing.Url</a>
				</td>
			</tr>
		}
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Providing.EntityTypeName)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.Providing.EntityTypeName)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Providing.FileType)
			</td>
			<td class="adminData">
				@Html.DisplayFor(model => model.Providing.FileType)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Providing.Description)
			</td>
			<td class="adminData">
				@if (Model.Providing.Description.HasValue())
				{
					@Html.Raw(Model.Providing.Description)
				}
				else
				{
					<span class="muted">@("".NaIfEmpty())</span>
				}
			</td>
		</tr>

		<tr>
			<td colspan="2">&nbsp;</td>
		</tr>

		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Name)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Name)
				@Html.ValidationMessageFor(model => model.Name)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Enabled)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Enabled)
				@Html.ValidationMessageFor(model => model.Enabled)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.SchedulingHours)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.SchedulingHours)
				@Html.ValidationMessageFor(model => model.SchedulingHours)
			</td>
		</tr>
	</table>
}

@helper TabFilter()
{
	<table class="adminContent">
		@if (Model.ProductFiltering != null)
		{
			if (Model.StoreCount > 1)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.ProductFiltering.StoreId)
					</td>
					<td class="adminData">
						@Html.DropDownListFor(model => model.ProductFiltering.StoreId, Model.ProductFiltering.AvailableStores, Model.AllString)
						@Html.ValidationMessageFor(model => model.ProductFiltering.StoreId)
					</td>
				</tr>
			}
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.CreatedFrom)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.CreatedFrom)
					@Html.ValidationMessageFor(model => model.ProductFiltering.CreatedFrom)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.CreatedTo)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.CreatedTo)
					@Html.ValidationMessageFor(model => model.ProductFiltering.CreatedTo)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.ProductType)
				</td>
				<td class="adminData">
					@Html.DropDownListFor(model => model.ProductFiltering.ProductType, Model.ProductFiltering.AvailableProductTypes, Model.AllString)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.IsPublished)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.IsPublished)
					@Html.ValidationMessageFor(model => model.ProductFiltering.IsPublished)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.PriceMinimum)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.PriceMinimum)
					@Html.ValidationMessageFor(model => model.ProductFiltering.PriceMinimum)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.PriceMaximum)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.PriceMaximum)
					@Html.ValidationMessageFor(model => model.ProductFiltering.PriceMaximum)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.AvailabilityMinimum)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.AvailabilityMinimum)
					@Html.ValidationMessageFor(model => model.ProductFiltering.AvailabilityMinimum)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.AvailabilityMaximum)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.AvailabilityMaximum)
					@Html.ValidationMessageFor(model => model.ProductFiltering.AvailabilityMaximum)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.WithoutCategories)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.WithoutCategories)
					@Html.ValidationMessageFor(model => model.ProductFiltering.WithoutCategories)
				</td>
			</tr>
			<tr id="FilterCategoryIdsContainer">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.CategoryIds)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.ProductFiltering.CategoryIds,
						new MultiSelectList(Model.ProductFiltering.AvailableCategories, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.ProductFiltering.CategoryIds)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.WithoutManufacturers)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.WithoutManufacturers)
					@Html.ValidationMessageFor(model => model.ProductFiltering.WithoutManufacturers)
				</td>
			</tr>
			<tr id="FilterManufacturerIdsContainer">
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.ManufacturerIds)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.ProductFiltering.ManufacturerIds,
						new MultiSelectList(Model.ProductFiltering.AvailableManufacturers, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.ProductFiltering.ManufacturerIds)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.ProductTagIds)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.ProductFiltering.ProductTagIds,
						new MultiSelectList(Model.ProductFiltering.AvailableProductTags, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.ProductFiltering.ProductTagIds)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.ProductFiltering.FeaturedProducts)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.ProductFiltering.FeaturedProducts)
					@Html.ValidationMessageFor(model => model.ProductFiltering.FeaturedProducts)
				</td>
			</tr>
		}
		else if (Model.OrderFiltering != null)
		{
			if (Model.StoreCount > 1)
			{
				<tr>
					<td class="adminTitle">
						@Html.SmartLabelFor(model => model.OrderFiltering.StoreId)
					</td>
					<td class="adminData">
						@Html.DropDownListFor(model => model.OrderFiltering.StoreId, Model.OrderFiltering.AvailableStores, Model.AllString)
						@Html.ValidationMessageFor(model => model.OrderFiltering.StoreId)
					</td>
				</tr>
			}
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.OrderFiltering.CreatedFrom)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.OrderFiltering.CreatedFrom)
					@Html.ValidationMessageFor(model => model.OrderFiltering.CreatedFrom)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.OrderFiltering.CreatedTo)
				</td>
				<td class="adminData">
					@Html.EditorFor(model => model.OrderFiltering.CreatedTo)
					@Html.ValidationMessageFor(model => model.OrderFiltering.CreatedTo)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.OrderFiltering.OrderStatus)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.OrderFiltering.OrderStatus,
						new MultiSelectList(Model.OrderFiltering.AvailableOrderStates, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.OrderFiltering.OrderStatus)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.OrderFiltering.PaymentStatus)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.OrderFiltering.PaymentStatus,
						new MultiSelectList(Model.OrderFiltering.AvailablePaymentStates, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.OrderFiltering.PaymentStatus)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.OrderFiltering.ShippingStatus)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.OrderFiltering.ShippingStatus,
						new MultiSelectList(Model.OrderFiltering.AvailableShippingStates, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.OrderFiltering.ShippingStatus)
				</td>
			</tr>
			<tr>
				<td class="adminTitle">
					@Html.SmartLabelFor(model => model.OrderFiltering.CustomerRoleIds)
				</td>
				<td class="adminData">
					@Html.ListBoxFor(model => model.OrderFiltering.CustomerRoleIds,
						new MultiSelectList(Model.OrderFiltering.AvailableCustomerRoles, "Value", "Text"),
						new { multiple = "multiple", @class = "control-xlarge" })
					@Html.ValidationMessageFor(model => model.OrderFiltering.CustomerRoleIds)
				</td>
			</tr>
		}
	</table>
}

@helper TabProjection()
{
}

@helper TabPartition()
{
	<table class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Offset)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Offset)
				@Html.ValidationMessageFor(model => model.Offset)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Limit)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Limit)
				@Html.ValidationMessageFor(model => model.Limit)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.BatchSize)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.BatchSize)
				@Html.ValidationMessageFor(model => model.BatchSize)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.PerStore)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.PerStore)
				@Html.ValidationMessageFor(model => model.PerStore)
			</td>
		</tr>
	</table>
}

@helper TabConfiguration()
{
}

@helper TabDeployment()
{
}

@Html.DeleteConfirmation("export-profile-delete")

<script type="text/javascript">
	jQuery(document).ready(function () {

		// show/hide product category filter
		$('select[name="ProductFiltering.WithoutCategories"]').change(function () {
			$('#FilterCategoryIdsContainer').toggle(_.isEmpty($(this).val()));
		}).trigger('change');

		// show/hide product manufacturer filter
		$('select[name="ProductFiltering.WithoutManufacturers"]').change(function () {
			$('#FilterManufacturerIdsContainer').toggle(_.isEmpty($(this).val()));
		}).trigger('change');

	});
</script>
