@using SmartStore.Admin.Models.DataExchange
@using SmartStore.Core.Domain.DataExchange
@model ExportPreviewModel
@{
	var title = string.Concat(T("Admin.Common.Preview"), " ", T("Common.Export"));
	ViewBag.Title = title;
}

<div class="section-header">
	<div class="title">
		<img src="@Url.Content(Model.ThumbnailUrl)" />
		&nbsp;
		@title - @Model.Name @Html.ActionLink("(" + T("Common.Back") + ")", "Edit", new { id = Model.Id })
	</div>
	<div class="options">
	</div>
</div>

<script type="text/javascript">
	var selectedIds = [];

	function OnDataBound(e) {
		HandleOnDataBound(e.currentTarget.id.toString());
		UpdateMasterCheckbox(e.currentTarget.id.toString());
	}

	function HandleOnDataBound(id) {
		$('#' + id + ' input[type=checkbox][id!="' + id + '-mastercheckbox"]').each(function () {
			var checked = jQuery.inArray($(this).val(), selectedIds);
			$(this).attr('checked', checked > -1);
		});
	}

	function UpdateMasterCheckbox(id) {
		var numChkBoxes = $('#' + id + ' input[type=checkbox][id!="' + id + '-mastercheckbox"]').length;
		var numChkBoxesChecked = $('#' + id + ' input[type=checkbox][checked][id!="' + id + '-mastercheckbox"]').length;
		$('#' + id + '-mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
	}
</script>

@if (Model.EntityType == ExportEntityType.Product)
{
	<div>
		@(Html.Telerik().Grid<ExportPreviewProductModel>()
			.Name("export-product-grid")
			.DataKeys(keys => keys.Add(x => x.Id)
			.RouteKey("Id"))
			.Columns(columns =>
			{
				columns.Bound(x => x.Id)
					.ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' class='checkboxGroups'/>")
					.Title("<input id='export-product-grid-mastercheckbox' type='checkbox'/>")
					.Width(50)
					.HtmlAttributes(new { style = "text-align:center" })
					.HeaderHtmlAttributes(new { style = "text-align:center" });
				columns.Bound(x => x.Id)
					.Width(80)
					.Centered();
				columns.Bound(x => x.Name)
					.ClientTemplate(@Html.LabeledProductName("Id", "Name"));
				columns.Bound(x => x.Sku);
				columns.Bound(x => x.Price)
					.Format("{0:0.00}")
					.RightAlign();
				columns.Bound(x => x.StockQuantity)
					.Centered();
				columns.Bound(x => x.Published)
					.Width(100)
					.ClientTemplate(@Html.SymbolForBool("Published"))
					.Centered();
				columns.Bound(x => x.AdminComment);
			})
			.Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
			.DataBinding(dataBinding => dataBinding.Ajax().Select("PreviewList", "Export", new { id = Model.Id, totalRecords = Model.TotalRecords }))
			.ClientEvents(events => events.OnDataBound("OnDataBound"))
			.EnableCustomBinding(true))
	</div>
}
else if (Model.EntityType == ExportEntityType.Product)
{
	<div>
		@(Html.Telerik().Grid<ExportPreviewOrderModel>()
			.Name("export-order-grid")
			.DataKeys(keys => keys.Add(x => x.Id)
			.RouteKey("Id"))
			.Columns(columns =>
			{
				columns.Bound(x => x.Id)
					.ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' class='checkboxGroups' />")
					.Title("<input id='export-order-grid-mastercheckbox' type='checkbox' />")
					.Width(50)
					.HtmlAttributes(new { style = "text-align:center" })
					.HeaderHtmlAttributes(new { style = "text-align:center" });
				columns.Bound(x => x.Id)
					.Width(80)
					.Centered();
				columns.Bound(x => x.OrderNumber)
					.ClientTemplate(@Html.LabeledOrderNumber());
				columns.Bound(x => x.OrderStatus);
				columns.Bound(x => x.PaymentStatus);
				columns.Bound(x => x.ShippingStatus);
				columns.Bound(x => x.CustomerEmail);
				columns.Bound(x => x.StoreName);
				columns.Bound(x => x.CreatedOn);
				columns.Bound(x => x.OrderTotal);
			})
			.Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
			.DataBinding(dataBinding => dataBinding.Ajax().Select("PreviewList", "Export", new { id = Model.Id, totalRecords = Model.TotalRecords }))
			.ClientEvents(events => events.OnDataBound("OnDataBound"))
			.EnableCustomBinding(true))
	</div>
}
else
{
	<div class="alert alert-error">Unsupported entity type!</div>
}