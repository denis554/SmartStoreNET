@model ProductModel

@using Telerik.Web.Mvc.UI;

@if (Model.Id > 0)
{
    if (Model.NumberOfAvailableProductAttributes > 0)
    {
        <div style="margin: 10px 0px 10px 0px;" class="muted">
            @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.Description")
        </div>

        <div style="margin: 10px 0">
            <button class="btn btn-warning add-new-combination">
                <i class="icon-plus"></i>
                @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")
            </button>

            <button type="button" id="btnCreateAllCombinations" class="btn"
                    data-url='@Url.Action("CreateAllAttributeCombinations", new { productId = Model.Id })'>
                <i class="icon-tasks"></i>
                @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.CreateAllCombinations")
            </button>

            <input type="submit" id="btnRefreshCombinations" name="btnRefreshCombinations" class="hide" />
            <script type="text/javascript">
	            $(document).ready(function () {
	                $('.add-new-combination').on('click', function (e) {
	                    OpenWindow('@(Url.Action("AttributeCombinationCreatePopup", "Product", new { productId = Model.Id }))&btnId=btnRefreshCombinations&formId=product-form',
                            1000,
                            800,
                            true);
	                    return false;
	                });

	                $('#btnRefreshCombinations').click(function () {
	                    //refresh grid
	                    var optionsGrid = $("#attributecombinations-grid");
	                    optionsGrid.data('tGrid').ajaxRequest();

	                    //return false to don't reload a page
	                    return false;
	                });

	                $('#btnCreateAllCombinations').click(function () {
	                    $(this).doAjax({
	                        ask: '@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AskToCombineAll")',
	                        callbackSuccess: function (resp) {
	                            $('#btnRefreshCombinations').click();
	                        }
	                    });
	                });
	            });
            </script>
        </div>
        <div>
            @(Html.Telerik().Grid<ProductVariantAttributeCombinationModel>()
                .Name("attributecombinations-grid")
                .DataKeys(keys =>
                {
                    keys.Add(x => x.Id);
                })
                .DataBinding(dataBinding =>
                {
                    dataBinding.Ajax()
                        .Select("ProductVariantAttributeCombinationList", "Product", new { productId = Model.Id })
                        .Delete("ProductVariantAttributeCombinationDelete", "Product");
                })
                .Columns(columns =>
                {
                    columns.Bound(x => x.AttributesXml)
                        .ClientTemplate("<#= AttributesXml #><br /><span style=\"color: red\"><#= Warnings #></span>")
                        .Width(460)
                        .Encoded(false)
                        .ReadOnly();
                    columns.Bound(x => x.IsActive)
                        .Width(80)
                        .Template(item => @Html.SymbolForBool(item.IsActive))
                        .ClientTemplate(@Html.SymbolForBool("IsActive"))
                        .Centered();
                    columns.Bound(x => x.ProductUrl)
                        .Width(120)
                        .Centered()
                        .ClientTemplate("<a href=\"<#= ProductUrl #>\" target=\"_blank\"><#= ProductUrlTitle #></a>");
                    columns.Bound(x => x.Sku);
                    columns.Bound(x => x.StockQuantity)
                        .Width(160)
                        .Centered();
                    columns.Bound(x => x.AllowOutOfStockOrders)
                        .Width(260)
                        .Template(item => @Html.SymbolForBool(item.AllowOutOfStockOrders))
                        .ClientTemplate(@Html.SymbolForBool("AllowOutOfStockOrders"))
                        .Centered();
                    columns.Bound(x => x.Id)
                        .Width(120)
                        .Centered()
                        .ClientTemplate("<button onclick=\"" + "OpenWindow('" + @Url.Content("~/Admin/Product/AttributeCombinationEditPopup/") + "<#= Id #>?btnId=btnRefreshCombinations&formId=product-form', 1000, 800, true); return false;\" class='btn'>" + @T("Admin.Common.Edit").Text + "</button>")
                        .Title(T("Admin.Common.Edit").Text);
                    columns.Command(commands =>
                    {
                        //commands.Edit().Localize(T);
                        commands.Delete().Localize(T);
                    })
                    .Width(120)
                    .Title(T("Admin.Common.Delete").Text);
                })
                .ClientEvents(events => events.OnRowDataBound("onRowDataBound_Combinations"))
                .EnableCustomBinding(true))

            <script type="text/javascript">
                function onRowDataBound_Combinations(e) {
                    if (!e.dataItem.IsActive) {
                        $(e.row).find('td').wrapInner('<span class="muted" />');
                    }
                }
            </script>
        </div>

        <button class="btn btn-warning add-new-combination" style="margin-top: 10px">
            <i class="icon-plus"></i>
            @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")
        </button>
    }
    else
    {
        @T("Admin.Catalog.Products.ProductVariantAttributes.NoAttributesAvailable")
    }
}
else
{
    @T("Admin.Catalog.Products.ProductVariantAttributes.SaveBeforeEdit")
}