@model ProductModel

@using SmartStore.Core.Domain.Catalog;
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework.UI;

@{
    var availableTags = Model.AvailableProductTags.Select(x => x.Value).ToArray();
    for (int i = 0; i < availableTags.Length; i++)
    {
        availableTags[i] = availableTags[i].EncodeJsString();
    }
    ViewBag.SerializedTags = String.Join(",", availableTags);
}

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("product-edit").Style(TabsStyle.Tabs).Position(TabsPosition.Left).Items(x =>
{
    x.Add().Text(T("Admin.Catalog.Products.Info").Text)
        .Content(TabInfo())
        .Icon("icon-pencil")
        .Selected(true);
    x.Add().Text(T("Admin.Common.SEO").Text)
        .Icon("icon-signal")
        .Content(TabSeo());
    x.Add().Text(T("Admin.Catalog.Products.Categories").Text)
        .Icon("icon-sitemap")
        .Content(TabCategories());
    x.Add().Text(T("Admin.Catalog.Products.Manufacturers").Text)
        .Icon("icon-truck")
        .Content(TabManufacturers());
    x.Add().Text(T("Admin.Catalog.Products.RelatedProducts").Text)
        .Icon("icon-link")
        .Content(TabRelatedProducts());
    x.Add().Text(T("Admin.Catalog.Products.CrossSells").Text)
        .Icon("icon-bullhorn")
        .Content(TabCrossSells());
    x.Add().Text(T("Admin.Catalog.Products.Pictures").Text)
        .Icon("icon-picture")
        .Content(TabPictures());
    x.Add().Text(T("Admin.Catalog.Products.TierPrices").Text)
        .Content(TabTierPrices());
    x.Add().Text(T("Admin.Catalog.Products.Discounts").Text)
        .Content(TabDiscounts());    
    x.Add().Text(T("Admin.Catalog.Products.SpecificationAttributes").Text)
        .Icon("icon-reorder")
        .Content(TabSpecificationAttributes());
    x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.Attributes").Text)
        .Content(TabAttributes());
    x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations").Text)
        .Content(TabAttributeCombinations());    
    x.Add().Text(T("Admin.Catalog.Products.Acl").Text)
        .Icon("icon-group")
        .Content(TabAcl());
	x.Add().Text(T("Admin.Common.Stores").Text)
        .Icon("icon-globe")    
        .Content(TabStores());
    
    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "product-edit", this.Html, this.Model));
})
@helper TabInfo()
{
<script type="text/javascript">
    
    var fieldBasePriceMeasureUnit;
    var fieldBasePriceAmount;
    var fieldBasePriceBaseAmount;

    $(document).ready(function () {

        $("#@Html.FieldIdFor(model => model.BasePriceEnabled)").click(toggleBasePrice);
        $("#@Html.FieldIdFor(model => model.RequireOtherProducts)").click(toggleRequireOtherProducts);
        $("#@Html.FieldIdFor(model => model.IsGiftCard)").click(toggleGiftCard);
        $("#@Html.FieldIdFor(model => model.CustomerEntersPrice)").click(toggleCustomerEntersPrice);
        $("#@Html.FieldIdFor(model => model.IsDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.UnlimitedDownloads)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasSampleDownload)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.HasUserAgreement)").click(toggleDownloadableProduct);
        $("#@Html.FieldIdFor(model => model.IsRecurring)").click(toggleRecurring);
        $("#@Html.FieldIdFor(model => model.IsShipEnabled)").click(toggleShipping);
        $("#@Html.FieldIdFor(model => model.IsTaxExempt)").click(toggleTax);
        $("#@Html.FieldIdFor(model => model.ManageInventoryMethodId)").change(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.BackorderModeId)").change(toggleManageStock);
        $("#@Html.FieldIdFor(model => model.DisplayStockAvailability)").click(toggleManageStock);
        
        fieldBasePriceMeasureUnit = $("#@Html.FieldIdFor(model => model.BasePriceMeasureUnit)");
        fieldBasePriceAmount = $("#@Html.FieldIdFor(model => model.BasePriceAmount)");
        fieldBasePriceBaseAmount = $("#@Html.FieldIdFor(model => model.BasePriceBaseAmount)");

        fieldBasePriceMeasureUnit.on("change", getCurrentBasePrice);
        //fieldBasePriceAmount.on("change keyup", getCurrentBasePrice);
        //fieldBasePriceBaseAmount.on("change keyup", getCurrentBasePrice);

        //fieldBasePriceAmount.siblings(".t-link").on("click", getCurrentBasePrice);
    	//fieldBasePriceBaseAmount.siblings(".t-link").on("click", getCurrentBasePrice);

    	fieldBasePriceAmount.on("blur", getCurrentBasePrice);
    	fieldBasePriceBaseAmount.on("blur", getCurrentBasePrice);

    	getCurrentBasePrice();

        toggleBasePrice();
        toggleRequireOtherProducts();
        toggleGiftCard();
        toggleCustomerEntersPrice();
        toggleDownloadableProduct();
        toggleRecurring();
        toggleShipping();
        toggleTax();
        toggleManageStock();
    });

    function getCurrentBasePrice() {
        
        var variantId = @Model.Id;

        if(parseFloat(fieldBasePriceAmount.val()) > 0 && parseInt(fieldBasePriceBaseAmount.val()) > 0 ) {
            $.ajax({
                cache:false,
                type: "POST",
                url: "@(Url.Action("GetBasePrice", "ProductVariant"))",
                data: { 
                    "productVariantId" : variantId,
                    "basePriceMeasureUnit": fieldBasePriceMeasureUnit.val(),
                    "basePriceAmount": fieldBasePriceAmount.val(),
                    "basePriceBaseAmount": fieldBasePriceBaseAmount.val()
                },
                success: function (data) {
                    $("#BasePriceAmountInfo").html(data.BasePrice);
                },
                error:function (xhr, ajaxOptions, thrownError){
                    alert(thrownError);
                }
            });
        }
        return false;
    }

    function toggleBasePrice() {
        if ($('#@Html.FieldIdFor(model => model.BasePriceEnabled)').is(':checked')) {
            $('#pnlBasePriceBaseAmount').show();
            $('#pnlBasePriceAmount').show();
        }
        else {
            $('#pnlBasePriceBaseAmount').hide();
            $('#pnlBasePriceAmount').hide();
        }
    }

    function toggleRequireOtherProducts() {
        if ($('#@Html.FieldIdFor(model => model.RequireOtherProducts)').is(':checked')) {
            $('#pnlRequiredProductIds').show();
            $('#pnlAutomaticallyAddRequiredProducts').show();
        }
        else {
            $('#pnlRequiredProductIds').hide();
            $('#pnlAutomaticallyAddRequiredProducts').hide();
        }
    }

    function toggleGiftCard() {
        if ($('#@Html.FieldIdFor(model => model.IsGiftCard)').is(':checked')) {
            $('#pnlGiftCardType').show();
        }
        else {
            $('#pnlGiftCardType').hide();
        }
    }

    function toggleCustomerEntersPrice() {
        var src = $('#@Html.FieldIdFor(model => model.CustomerEntersPrice)');
        if (src.is(':checked')) {
            $('#pnlMinimumCustomerEnteredPrice').show();
            $('#pnlMaximumCustomerEnteredPrice').show();
        }
        else {
            $('#pnlMinimumCustomerEnteredPrice').hide();
            $('#pnlMaximumCustomerEnteredPrice').hide();
        }
    }

    function toggleDownloadableProduct() {
        if ($('#@Html.FieldIdFor(model => model.IsDownload)').is(':checked')) {

            $('#pnlDownloadFile').show();
            $('#pnlUnlimitedDownloads').show();
            if ($('#@Html.FieldIdFor(model => model.UnlimitedDownloads)').is(':checked')) {
                $('#pnlMaxNumberOfDownloads').hide();
            }
            else {
                $('#pnlMaxNumberOfDownloads').show();
            }
            $('#pnlDownloadExpirationDays').show();
            $('#pnlDownloadActivationType').show();

            $('#pnlHasUserAgreement').show();
            if ($('#@Html.FieldIdFor(model => model.HasUserAgreement)').is(':checked')) {
                $('#pnlUserAgreementText').show();
            }
            else {
                $('#pnlUserAgreementText').hide();
            }

            $('#pnlHasSampleDownload').show();

            if ($('#@Html.FieldIdFor(model => model.HasSampleDownload)').is(':checked')) {
                $('#pnlSampleDownloadFile').show();
            }
            else {
                $('#pnlSampleDownloadFile').hide();
            }
        }
        else {
            $('#pnlDownloadFile').hide();
            $('#pnlUnlimitedDownloads').hide();
            $('#pnlMaxNumberOfDownloads').hide();
            $('#pnlDownloadExpirationDays').hide();
            $('#pnlDownloadActivationType').hide();
            $('#pnlHasUserAgreement').hide();
            $('#pnlUserAgreementText').hide();
            $('#pnlHasSampleDownload').hide();
            $('#pnlSampleDownloadFile').hide();
        }
    }

    function toggleShipping() {
        if ($('#@Html.FieldIdFor(model => model.IsShipEnabled)').is(':checked')) {
            $('#pnlDeliveryTime').show();   //codehint: sm-add
            $('#pnlFreeShipping').show();
            $('#pnlAdditionalShippingCharge').show();
            $('#pnlWeight').show();
            $('#pnlLength').show();
            $('#pnlWidth').show();
            $('#pnlHeight').show();
        }
        else {
            $('#pnlDeliveryTime').hide();   //codehint: sm-add
            $('#pnlFreeShipping').hide();
            $('#pnlAdditionalShippingCharge').hide();
            $('#pnlWeight').hide();
            $('#pnlLength').hide();
            $('#pnlWidth').hide();
            $('#pnlHeight').hide();
        }
    }

    function toggleRecurring() {
        if ($('#@Html.FieldIdFor(model => model.IsRecurring)').is(':checked')) {
            $('#pnlCycleLength').show();
            $('#pnlCyclePeriod').show();
            $('#pnlTotalCycles').show();
        }
        else {
            $('#pnlCycleLength').hide();
            $('#pnlCyclePeriod').hide();
            $('#pnlTotalCycles').hide();
        }
    }

    function toggleTax() {
        if ($('#@Html.FieldIdFor(model => model.IsTaxExempt)').is(':checked')) {
            $('#pnlTaxCategory').hide();
        }
        else {
            $('#pnlTaxCategory').show();
        }
    }

    function toggleManageStock() {
        var selectedManageInventoryMethodId = $("#@Html.FieldIdFor(model => model.ManageInventoryMethodId)").val();
        
        if (selectedManageInventoryMethodId == @(((int)ManageInventoryMethod.DontManageStock).ToString())) {
            $('#pnlStockQuantity').hide();
            $('#pnlDisplayStockAvailability').hide();
            $('#pnlDisplayStockQuantity').hide();
            $('#pnlMinStockQuantity').hide();
            $('#pnlLowStockActivity').hide();
            $('#pnlNotifyForQuantityBelow').hide();
            $('#pnlAllowBackInStockSubscriptions').hide();            
            $('#pnlBackorders').hide();
        }
        else if (selectedManageInventoryMethodId == @(((int)ManageInventoryMethod.ManageStock).ToString())) {
            $('#pnlStockQuantity').show();
            $('#pnlDisplayStockAvailability').show();

            if ($('#@Html.FieldIdFor(model => model.DisplayStockAvailability)').is(':checked')) {
                $('#pnlDisplayStockQuantity').show();
            }
            else {
                $('#pnlDisplayStockQuantity').hide();
            }

            $('#pnlMinStockQuantity').show();
            $('#pnlLowStockActivity').show();
            $('#pnlNotifyForQuantityBelow').show();
            $('#pnlBackorders').show();
            var selectedBackorderModeId = $("#@Html.FieldIdFor(model => model.BackorderModeId)").val();
            if (selectedBackorderModeId == @(((int)BackorderMode.NoBackorders).ToString())) {
                //no backorders
                $('#pnlAllowBackInStockSubscriptions').show();
            }
            else {
                //backorders are enabled
                $('#pnlAllowBackInStockSubscriptions').hide();
            }
        }
        else if (selectedManageInventoryMethodId == @(((int)ManageInventoryMethod.ManageStockByAttributes).ToString())) {
            $('#pnlStockQuantity').hide();
            $('#pnlDisplayStockAvailability').show();
            if ($('#@Html.FieldIdFor(model => model.DisplayStockAvailability)').is(':checked')) {
                $('#pnlDisplayStockQuantity').show();
            }
            else {
                $('#pnlDisplayStockQuantity').hide();
            }
            $('#pnlMinStockQuantity').hide();
            $('#pnlLowStockActivity').hide();
            $('#pnlNotifyForQuantityBelow').hide();
            $('#pnlAllowBackInStockSubscriptions').hide();
            $('#pnlBackorders').hide();
        }
        else {
            $('#pnlStockQuantity').hide();
            $('#pnlDisplayStockAvailability').hide();
            $('#pnlDisplayStockQuantity').hide();
            $('#pnlMinStockQuantity').hide();
            $('#pnlLowStockActivity').hide();
            $('#pnlNotifyForQuantityBelow').hide();
            $('#pnlAllowBackInStockSubscriptions').hide();
            $('#pnlBackorders').hide();
        }
    }
</script>

<table class="adminContent">
@if (Model.Id > 0)
{
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.Id)
        </td>
        <td class="adminData">
            @Model.Id.ToString()
            @Html.ValidationMessageFor(model => model.Id)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.ProductTypeId):
        </td>
        <td class="adminData">
            @Html.DropDownListFor(model => model.ProductTypeId, ((ProductType)Model.ProductTypeId).ToSelectList())
            @Html.ValidationMessageFor(model => model.ProductTypeId)
        </td>
    </tr>
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.ProductTemplateId)
        </td>
        <td class="adminData">
            @Html.DropDownListFor(model => model.ProductTemplateId, Model.AvailableProductTemplates)
            @Html.ValidationMessageFor(model => model.ProductTemplateId)
        </td>
    </tr>
}
</table>    
@(Html.LocalizedEditor<ProductModel, ProductLocalizedModel>("product-info-localized",
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].Name)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.Locales[item].Name)
                @Html.ValidationMessageFor(model => model.Locales[item].Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].ShortDescription)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.Locales[item].ShortDescription)
                @Html.ValidationMessageFor(model => model.Locales[item].ShortDescription)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Locales[item].FullDescription)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Locales[item].FullDescription, "RichEditor")
                @Html.ValidationMessageFor(model => model.Locales[item].FullDescription)
            </td>
        </tr>
        <tr>
            <td colspan="2">
                @Html.HiddenFor(model => model.Locales[item].LanguageId)
            </td>
        </tr>
    </table>
    ,
    @<table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Name)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShortDescription)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(x => x.ShortDescription)
                @Html.ValidationMessageFor(model => model.ShortDescription)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.FullDescription)
            </td>
            <td class="adminData">
                @Html.EditorFor(x => x.FullDescription, "RichEditor")
                @Html.ValidationMessageFor(model => model.FullDescription)
            </td>
        </tr>
    </table>
))
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Sku)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Sku)
                @Html.ValidationMessageFor(model => model.Sku)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ManufacturerPartNumber)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ManufacturerPartNumber)
                @Html.ValidationMessageFor(model => model.ManufacturerPartNumber)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Gtin)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Gtin)
                @Html.ValidationMessageFor(model => model.Gtin)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ProductTags)
            </td>
            <td class="adminData">
                @Html.HiddenFor(model => model.ProductTags, new { @class = "tag-chooser" })
                @Html.ValidationMessageFor(model => model.ProductTags)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AdminComment)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AdminComment)
                @Html.ValidationMessageFor(model => model.AdminComment)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Price)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Price) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.Price)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OldPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.OldPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.OldPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ProductCost)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ProductCost) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.ProductCost)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SpecialPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SpecialPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.SpecialPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SpecialPriceStartDateTimeUtc)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SpecialPriceStartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.SpecialPriceStartDateTimeUtc)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SpecialPriceEndDateTimeUtc)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SpecialPriceEndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.SpecialPriceEndDateTimeUtc)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Published)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShowOnHomePage)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ShowOnHomePage)
                @Html.ValidationMessageFor(model => model.ShowOnHomePage)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisableBuyButton)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisableBuyButton)
                @Html.ValidationMessageFor(model => model.DisableBuyButton)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisableWishlistButton)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisableWishlistButton)
                @Html.ValidationMessageFor(model => model.DisableWishlistButton)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableForPreOrder)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AvailableForPreOrder)
                @Html.ValidationMessageFor(model => model.AvailableForPreOrder)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CallForPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CallForPrice)
                @Html.ValidationMessageFor(model => model.CallForPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AllowCustomerReviews)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AllowCustomerReviews)
                @Html.ValidationMessageFor(model => model.AllowCustomerReviews)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CustomerEntersPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.CustomerEntersPrice)
                @Html.ValidationMessageFor(model => model.CustomerEntersPrice)
            </td>
        </tr>
        <tr id="pnlMinimumCustomerEnteredPrice">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.MinimumCustomerEnteredPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.MinimumCustomerEnteredPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.MinimumCustomerEnteredPrice)
            </td>
        </tr>
        <tr id="pnlMaximumCustomerEnteredPrice">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.MaximumCustomerEnteredPrice)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.MaximumCustomerEnteredPrice) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.MaximumCustomerEnteredPrice)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableStartDateTimeUtc)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AvailableStartDateTimeUtc)
                @Html.ValidationMessageFor(model => model.AvailableStartDateTimeUtc)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableEndDateTimeUtc)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AvailableEndDateTimeUtc)
                @Html.ValidationMessageFor(model => model.AvailableEndDateTimeUtc)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <!-- PAnGV -->
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BasePriceEnabled)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BasePriceEnabled)
                @Html.ValidationMessageFor(model => model.BasePriceEnabled)
            </td>
        </tr>
        <tr id="pnlBasePriceBaseAmount">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BasePriceBaseAmount)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BasePriceBaseAmount, new { small = true })
                @Html.DropDownListFor(model => model.BasePriceMeasureUnit, Model.AvailableMeasureUnits, new { @class = "autowidth" })
            </td>
        </tr>
        <tr id="pnlBasePriceAmount">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BasePriceAmount)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BasePriceAmount, new { small = true })
                <span id="BasePriceAmountInfo">@*@T("Admin.Catalog.Products.Fields.BasePriceInfo")*@</span>
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.RequireOtherProducts)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.RequireOtherProducts)
                @Html.ValidationMessageFor(model => model.RequireOtherProducts)
            </td>
        </tr>
        <tr id="pnlRequiredProductIds">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.RequiredProductIds)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.RequiredProductIds)
                @Html.ValidationMessageFor(model => model.RequiredProductIds)
            </td>
        </tr>
        <tr id="pnlAutomaticallyAddRequiredProducts">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AutomaticallyAddRequiredProducts)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AutomaticallyAddRequiredProducts)
                @Html.ValidationMessageFor(model => model.AutomaticallyAddRequiredProducts)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsGiftCard)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsGiftCard)
                @Html.ValidationMessageFor(model => model.IsGiftCard)
            </td>
        </tr>
        <tr id="pnlGiftCardType">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.GiftCardTypeId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.GiftCardTypeId, ((GiftCardType)Model.GiftCardTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.GiftCardTypeId)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsDownload)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsDownload)
                @Html.ValidationMessageFor(model => model.IsDownload)
            </td>
        </tr>
        <tr id="pnlDownloadFile">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DownloadId)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DownloadId)
                @Html.ValidationMessageFor(model => model.DownloadId)
            </td>
        </tr>
        <tr id="pnlUnlimitedDownloads">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.UnlimitedDownloads)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.UnlimitedDownloads)
                @Html.ValidationMessageFor(model => model.UnlimitedDownloads)
            </td>
        </tr>
        <tr id="pnlMaxNumberOfDownloads">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.MaxNumberOfDownloads)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.MaxNumberOfDownloads)
                @Html.ValidationMessageFor(model => model.MaxNumberOfDownloads)
            </td>
        </tr>
        <tr id="pnlDownloadExpirationDays">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DownloadExpirationDays)
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.DownloadExpirationDays)
                @Html.ValidationMessageFor(model => model.DownloadExpirationDays)
            </td>
        </tr>
        <tr id="pnlDownloadActivationType">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DownloadActivationTypeId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.DownloadActivationTypeId, ((DownloadActivationType)Model.DownloadActivationTypeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.DownloadActivationTypeId)
            </td>
        </tr>
        <tr id="pnlHasUserAgreement">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.HasUserAgreement)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.HasUserAgreement)
                @Html.ValidationMessageFor(model => model.HasUserAgreement)
            </td>
        </tr>
        <tr id="pnlUserAgreementText">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.UserAgreementText)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.UserAgreementText)
                @Html.ValidationMessageFor(model => model.UserAgreementText)
            </td>
        </tr>
        <tr id="pnlHasSampleDownload">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.HasSampleDownload)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.HasSampleDownload)
                @Html.ValidationMessageFor(model => model.HasSampleDownload)
            </td>
        </tr>
        <tr id="pnlSampleDownloadFile">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SampleDownloadId)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SampleDownloadId)
                @Html.ValidationMessageFor(model => model.SampleDownloadId)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsRecurring)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsRecurring)
                @Html.ValidationMessageFor(model => model.IsRecurring)
            </td>
        </tr>
        <tr id="pnlCycleLength">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.RecurringCycleLength)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.RecurringCycleLength)
                @Html.ValidationMessageFor(model => model.RecurringCycleLength)
            </td>
        </tr>
        <tr id="pnlCyclePeriod">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.RecurringCyclePeriodId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.RecurringCyclePeriodId, ((RecurringProductCyclePeriod)Model.RecurringCyclePeriodId).ToSelectList())
                @Html.ValidationMessageFor(model => model.RecurringCyclePeriodId)
            </td>
        </tr>
        <tr id="pnlTotalCycles">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.RecurringTotalCycles)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.RecurringTotalCycles)
                @Html.ValidationMessageFor(model => model.RecurringTotalCycles)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsShipEnabled)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsShipEnabled)
                @Html.ValidationMessageFor(model => model.IsShipEnabled)
            </td>
        </tr>

        @*codehint: sm-add*@
        <tr id="pnlDeliveryTime">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DeliveryTimeId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.DeliveryTimeId, Model.AvailableDeliveryTimes, T("Common.Unspecified"))
                @Html.ValidationMessageFor(model => model.DeliveryTimeId)
            </td>
        </tr>
        <tr id="pnlFreeShipping">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsFreeShipping)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsFreeShipping)
                @Html.ValidationMessageFor(model => model.IsFreeShipping)
            </td>
        </tr>
        <tr id="pnlAdditionalShippingCharge">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AdditionalShippingCharge)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AdditionalShippingCharge) [@Model.PrimaryStoreCurrencyCode]
                @Html.ValidationMessageFor(model => model.AdditionalShippingCharge)
            </td>
        </tr>
        <tr id="pnlWeight">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Weight)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Weight) [@Model.BaseWeightIn]
                @Html.ValidationMessageFor(model => model.Weight)
            </td>
        </tr>
        <tr id="pnlLength">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Length)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Length) [@Model.BaseDimensionIn]
                @Html.ValidationMessageFor(model => model.Length)
            </td>
        </tr>
        <tr id="pnlWidth">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Width)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Width) [@Model.BaseDimensionIn]
                @Html.ValidationMessageFor(model => model.Width)
            </td>
        </tr>
        <tr id="pnlHeight">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Height)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Height) [@Model.BaseDimensionIn]
                @Html.ValidationMessageFor(model => model.Height)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.IsTaxExempt)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.IsTaxExempt)
                @Html.ValidationMessageFor(model => model.IsTaxExempt)
            </td>
        </tr>
        <tr id="pnlTaxCategory">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.TaxCategoryId)
            </td>
            <td class="adminData">
                @*@Html.DropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories, T("Common.PleaseSelect").Text)*@
                @Html.DropDownListFor(model => model.TaxCategoryId, Model.AvailableTaxCategories, new { placeholder = T("Common.PleaseSelect").Text })
                @Html.ValidationMessageFor(model => model.TaxCategoryId)
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ManageInventoryMethodId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.ManageInventoryMethodId, ((ManageInventoryMethod)Model.ManageInventoryMethodId).ToSelectList())
                @Html.ValidationMessageFor(model => model.ManageInventoryMethodId)
            </td>
        </tr>
        <tr id="pnlStockQuantity">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.StockQuantity)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.StockQuantity)
                @Html.ValidationMessageFor(model => model.StockQuantity)
            </td>
        </tr>
        <tr id="pnlDisplayStockAvailability">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisplayStockAvailability)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayStockAvailability)
                @Html.ValidationMessageFor(model => model.DisplayStockAvailability)
            </td>
        </tr>
        <tr id="pnlDisplayStockQuantity">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.DisplayStockQuantity)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayStockQuantity)
                @Html.ValidationMessageFor(model => model.DisplayStockQuantity)
            </td>
        </tr>
        <tr id="pnlMinStockQuantity">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.MinStockQuantity)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.MinStockQuantity)
                @Html.ValidationMessageFor(model => model.MinStockQuantity)
            </td>
        </tr>
        <tr id="pnlLowStockActivity">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LowStockActivityId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.LowStockActivityId, ((LowStockActivity)Model.LowStockActivityId).ToSelectList())
                @Html.ValidationMessageFor(model => model.LowStockActivityId)
            </td>
        </tr>
        <tr id="pnlNotifyForQuantityBelow">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.NotifyAdminForQuantityBelow)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.NotifyAdminForQuantityBelow)
                @Html.ValidationMessageFor(model => model.NotifyAdminForQuantityBelow)
            </td>
        </tr>
        <tr id="pnlBackorders">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BackorderModeId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.BackorderModeId, ((BackorderMode)Model.BackorderModeId).ToSelectList())
                @Html.ValidationMessageFor(model => model.BackorderModeId)
            </td>
        </tr>
        <tr id="pnlAllowBackInStockSubscriptions">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AllowBackInStockSubscriptions)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AllowBackInStockSubscriptions)
                @Html.ValidationMessageFor(model => model.AllowBackInStockSubscriptions)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OrderMinimumQuantity)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.OrderMinimumQuantity)
                @Html.ValidationMessageFor(model => model.OrderMinimumQuantity)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OrderMaximumQuantity)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.OrderMaximumQuantity)
                @Html.ValidationMessageFor(model => model.OrderMaximumQuantity)
            </td>
        </tr>
    </table>
        
    <script>
        $(function () {
            var tagChooser = $("#@Html.FieldIdFor(x => x.ProductTags)");
            tagChooser.select2({ tags:[@(Html.Raw(ViewBag.SerializedTags))] });
        });
    </script>
}
@helper TabSeo()
{
    @(Html.LocalizedEditor<ProductModel, ProductLocalizedModel>("product-seo-localized",
               @<table class="adminContent">
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaKeywords)
                       </td>
                       <td class="adminData">
                           @Html.EditorFor(model => model.Locales[item].MetaKeywords)
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaDescription)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].MetaDescription)
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].MetaTitle)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].MetaTitle)
                           @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.Locales[item].SeName)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(model => model.Locales[item].SeName)
                           @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                       </td>
                   </tr>
                   <tr>
                       <td colspan="2">
                           @Html.HiddenFor(model => model.Locales[item].LanguageId)
                       </td>
                   </tr>
               </table>
               ,
               @<table class="adminContent">
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaKeywords)
                       </td>
                       <td class="adminData">
                           @Html.EditorFor(x => x.MetaKeywords)
                           @Html.ValidationMessageFor(model => model.MetaKeywords)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaDescription)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.MetaDescription)
                           @Html.ValidationMessageFor(model => model.MetaDescription)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.MetaTitle)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.MetaTitle)
                           @Html.ValidationMessageFor(model => model.MetaTitle)
                       </td>
                   </tr>
                   <tr>
                       <td class="adminTitle">
                           @Html.SmartLabelFor(model => model.SeName)
                       </td>
                       <td class="adminData">
                           @Html.TextAreaFor(x => x.SeName)
                           @Html.ValidationMessageFor(model => model.SeName)
                       </td>
                   </tr>
               </table>))
}
@helper TabCategories()
{
        if (Model.Id > 0)
        {
            if (Model.NumberOfAvailableCategories > 0)
            {
                @(Html.Telerik().Grid<ProductModel.ProductCategoryModel>()
                    .Name("productcategories-grid")
                       .DataKeys(keys =>
                       {
                           keys.Add(x => x.Id);
                       })
                       .DataBinding(dataBinding =>
                       {
                           dataBinding.Ajax()
                               .Select("ProductCategoryList", "Product", new { productId = Model.Id })
                               .Insert("ProductCategoryInsert", "Product", new { productId = Model.Id })
                               .Update("ProductCategoryUpdate", "Product")
                               .Delete("ProductCategoryDelete", "Product");
                       })
                       .Columns(columns =>
                       {
                           columns.Bound(x => x.Category)
                               .Width(500)
                               .Centered();
                           columns.Bound(x => x.IsFeaturedProduct)
                               .Width(50)
                               .Template(item => @Html.SymbolForBool(item.IsFeaturedProduct))
                               .ClientTemplate(@Html.SymbolForBool("IsFeaturedProduct"))
                               .Centered();
                           columns.Bound(x => x.DisplayOrder)
                               .Width(50);
                           columns.Command(commands =>
                           {
                               commands.Edit().Localize(T);
                               commands.Delete().Localize(T);
                           })
                           .Width(180);
                       })
                       .ToolBar(commands => commands.Insert())
                       .ClientEvents(events => events.OnEdit("onProductCategoryEdit"))
                       .EnableCustomBinding(true))
    
                <script type="text/javascript">
                    function onProductCategoryEdit(e) {
                        $(e.form).find('#Category').select2('val', e.dataItem['CategoryId']);
                    }
                </script>
            }
            else
            {
                    @T("Admin.Catalog.Products.Categories.NoCategoriesAvailable")
            }
        }
        else
        {
            @T("Admin.Catalog.Products.Categories.SaveBeforeEdit")
        }
        
}
@helper TabManufacturers()
{
        if (Model.Id > 0)
        {
            if (Model.NumberOfAvailableManufacturers > 0)
            {
                @(Html.Telerik().Grid<ProductModel.ProductManufacturerModel>()
                    .Name("productmanufacturers-grid")
                       .DataKeys(keys =>
                       {
                           keys.Add(x => x.Id);
                       })
                       .DataBinding(dataBinding =>
                       {
                           dataBinding.Ajax()
                               .Select("ProductManufacturerList", "Product", new { productId = Model.Id })
                               .Insert("ProductManufacturerInsert", "Product", new { productId = Model.Id })
                               .Update("ProductManufacturerUpdate", "Product")
                               .Delete("ProductManufacturerDelete", "Product");
                       })
                       .Columns(columns =>
                       {
                           columns.Bound(x => x.Manufacturer)
                               .Width(500)
                               .Centered();
                           columns.Bound(x => x.IsFeaturedProduct)
                               .Width(100)
                               .Template(item => Html.SymbolForBool(item.IsFeaturedProduct))
                               .ClientTemplate(Html.SymbolForBool("IsFeaturedProduct"))
                               .Centered();
                           columns.Bound(x => x.DisplayOrder)
                               .Width(100);
                           columns.Command(commands =>
                           {
                               commands.Edit().Localize(T);
                               commands.Delete().Localize(T);
                           })
                           .Width(180);
                       })
                       .ToolBar(commands => commands.Insert())
                       .ClientEvents(events => events.OnEdit("onProductManufacturerEdit"))
                       .EnableCustomBinding(true))
    
                <script type="text/javascript">
                    function onProductManufacturerEdit(e) {
                        // codehint: sm-edit
                        $(e.form).find('#Manufacturer').select2('val', e.dataItem['ManufacturerId']);
                    }
                </script>
            }
            else
            {
                @T("Admin.Catalog.Products.Manufacturers.NoManufacturersAvailable")
            }
        }
        else
        {
            @T("Admin.Catalog.Products.Manufacturers.SaveBeforeEdit")
        }
}
@helper TabRelatedProducts()
{
        if (Model.Id > 0)
        {
            
            <table class="adminContent">
                <tr>
                    <td>
            @(Html.Telerik().Grid<ProductModel.RelatedProductModel>()
                .Name("relatedproducts-grid")
                    .DataKeys(keys =>
                    {
                        keys.Add(x => x.Id);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax()
                            .Select("RelatedProductList", "Product", new { productId = Model.Id })
                            .Update("RelatedProductUpdate", "Product")
                            .Delete("RelatedProductDelete", "Product");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Product2Name)
                            .Width(500)
                            .ReadOnly();
                        columns.Bound(x => x.DisplayOrder)
                            .Width(100)
                            .Centered();
                        columns.Command(commands =>
                        {
                            commands.Edit().Localize(T);
                            commands.Delete().Localize(T);
                        })
                        .Width(180);
                    })
                    .EnableCustomBinding(true))
                    </td>
                </tr>
                <tr>
                    <td width="100%">
                        <input type="submit" id="btnAddNewRelatedProduct" name="btnAddNewRelatedProduct" value="@T("Admin.Catalog.Products.RelatedProducts.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("RelatedProductAddPopup", "Product", new { productId = Model.Id, btnId = "btnRefreshRelatedProducts", formId = "product-form" }))', 800, 700, true); return false;" class="btn" />
                        <input type="submit" id="btnRefreshRelatedProducts" name="btnRefreshRelatedProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnRefreshRelatedProducts').click(function () {
                                    //refresh grid
                                    var optionsGrid = $("#relatedproducts-grid");
                                    optionsGrid.data('tGrid').ajaxRequest();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </td>
                </tr>
            </table>
        }
        else
        {
            @T("Admin.Catalog.Products.RelatedProducts.SaveBeforeEdit")
        }
        
}
@helper TabCrossSells()
{
        if (Model.Id > 0)
        {
            
            <table class="adminContent">
                <tr>
                    <td>
            @(Html.Telerik().Grid<ProductModel.CrossSellProductModel>()
                .Name("crosssellproducts-grid")
                    .DataKeys(keys =>
                    {
                        keys.Add(x => x.Id);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax()
                            .Select("CrossSellProductList", "Product", new { productId = Model.Id })
                            .Delete("CrossSellProductDelete", "Product");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Product2Name)
                            .Width(500)
                            .ReadOnly();
                        columns.Command(commands =>
                        {
                            commands.Delete().Localize(T);
                        })
                        .Width(180);
                    })
                    .EnableCustomBinding(true))
                    </td>
                </tr>
                <tr>
                    <td width="100%">
                        <input type="submit" id="btnAddNewCrossSellProduct" name="btnAddNewCrossSellProduct" value="@T("Admin.Catalog.Products.CrossSells.AddNew")" onclick="javascript:OpenWindow('@(Url.Action("CrossSellProductAddPopup", "Product", new { productId = Model.Id, btnId = "btnRefreshCrossSellProducts", formId = "product-form" }))', 800, 700, true); return false;" class="btn" />
                        <input type="submit" id="btnRefreshCrossSellProducts" name="btnRefreshCrossSellProducts" style="display: none" />
                        <script type="text/javascript">
                            $(document).ready(function () {
                                $('#btnRefreshCrossSellProducts').click(function () {
                                    //refresh grid
                                    var optionsGrid = $("#crosssellproducts-grid");
                                    optionsGrid.data('tGrid').ajaxRequest();

                                    //return false to don't reload a page
                                    return false;
                                });
                            });
                        </script>
                    </td>
                </tr>
            </table>
        }
        else
        {
            @T("Admin.Catalog.Products.CrossSells.SaveBeforeEdit")
        }
        
}
@helper TabPictures()
{
        if (Model.Id > 0)
        {
            <div>
            @(Html.Telerik().Grid<ProductModel.ProductPictureModel>()
                    .Name("productpictures-grid")
                    .DataKeys(x =>
                    {
                        x.Add(y => y.Id).RouteKey("Id");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.PictureUrl)
                            .Width(400)
                            .ClientTemplate("<a href='<#= PictureUrl #>' target='_blank'><img alt='<#= PictureId #>' src='<#= PictureUrl #>' width='150' /><a/>")
                            .ReadOnly();
                        columns.Bound(x => x.DisplayOrder).Width(100);
                        columns.Command(commands =>
                        {
                            commands.Edit().Localize(T);
                            commands.Delete().Localize(T);
                        }).Width(180);

                    })
                    .Editable(x =>
                    {
                        x.Mode(GridEditMode.InLine);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax().Select("ProductPictureList", "Product", new { productId = Model.Id })
                            .Update("ProductPictureUpdate", "Product")
                            .Delete("ProductPictureDelete", "Product");
                    })
                    .EnableCustomBinding(true))
        </div>
            <p style="margin-top:14px;">
                <strong>@T("Admin.Catalog.Products.Pictures.AddNew")</strong>
            </p>
            <script type="text/javascript">
     
        $(document).ready(function () {
            $('#addProductPicture').click(function () {
                var pictureId = $("#@Html.FieldIdFor(model => model.AddPictureModel.PictureId)").val();
                var displayOrder = $("#@Html.FieldIdFor(model => model.AddPictureModel.DisplayOrder)").val();
                
                if (pictureId == 0) {
                	alert('@T("Admin.Catalog.Products.Pictures.UploadFirst")');
                    return;
                }

                $('#addProductPicture').attr('disabled', true);
                $.ajax({
                    cache:false,
                    type: "POST",
                    url: "@(Url.Action("ProductPictureAdd", "Product"))",
                    data: { "pictureId": pictureId, "displayOrder": displayOrder, "productId": @Model.Id },
                    success: function (data) {
                         var productpicturesGrid = $("#productpictures-grid");
                         productpicturesGrid.data('tGrid').ajaxRequest();
                         $('#addProductPicture').attr('disabled', false);
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                    	alert('@T("Admin.Catalog.Products.Pictures.AddFailed")')
                        $('#addProductPicture').attr('disabled', false);
                    }  
                });
            });
        });
        </script>        
            <table class="adminContent">
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.AddPictureModel.PictureId)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.AddPictureModel.PictureId)
                    @Html.ValidationMessageFor(model => model.AddPictureModel.PictureId)
                </td>
            </tr>
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.AddPictureModel.DisplayOrder)
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.AddPictureModel.DisplayOrder)
                    @Html.ValidationMessageFor(model => model.AddPictureModel.DisplayOrder)
                </td>
            </tr>
            <tr>
                <td colspan="2" align="left">
                    <button type="button" name="addProductPicture" id="addProductPicture" class="btn">
                        <i class="icon-plus"></i>
                        @T("Admin.Catalog.Products.Pictures.AddButton")
                    </button>
                </td>
            </tr>
        </table>
        }
        else
        {
            @T("Admin.Catalog.Products.Pictures.SaveBeforeEdit")
        }
    }

@helper TabSpecificationAttributes()
{
        if (Model.Id > 0)
        {

            /*hide "add spec" table if no attributes are defined*/
            if (Model.AddSpecificationAttributeModel.AvailableAttributes.Count > 0)
            {
                <div>
        @(Html.Telerik().Grid<ProductSpecificationAttributeModel>()
                    .Name("specificationattributes-grid")
                    .DataKeys(x =>
                    {
                        x.Add(y => y.Id).RouteKey("psaId");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.SpecificationAttributeName).Width(200).ReadOnly();
                        columns.Bound(x => x.SpecificationAttributeOptionName).Width(200).ReadOnly();
                        columns.Bound(x => x.AllowFiltering).Width(100);
                        columns.Bound(x => x.ShowOnProductPage).Width(100);
                        columns.Bound(x => x.DisplayOrder).Width(100);
                        columns.Command(commands =>
                        {
                            commands.Edit().Localize(T);
                            commands.Delete().Localize(T);
                        }).Width(180);

                    })
                    .Editable(x =>
                    {
                        x.Mode(GridEditMode.InLine);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax().Select("ProductSpecAttrList", "Product", new { productId = Model.Id })
                            .Update("ProductSpecAttrUpdate", "Product")
                            .Delete("ProductSpecAttrDelete", "Product");
                    })
                    .EnableCustomBinding(true))
    </div>
                <p style="margin-top:10px;">
                    <strong>@T("Admin.Catalog.Products.SpecificationAttributes.AddNew")</strong>
                </p>
                <script type="text/javascript">
     $(function() {
            $("#@Html.FieldIdFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeId)").change(function() {
                var selectedItem = $(this).val();
                var ddlSpecOptions = $("#@Html.FieldIdFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeOptionId)")
                $.ajax({
                    cache:false,
                    type: "GET",
                    url: "@(Url.Action("GetOptionsByAttributeId", "SpecificationAttribute"))",
                    data: { "attributeId": selectedItem },
                    success: function (data) {
                        ddlSpecOptions.html('');
                        $.each(data, function(id, option) {
                            ddlSpecOptions.append($('<option></option>').val(option.id).html(option.name));
                        });
                        ddlSpecOptions.trigger("change"); // codehint: sm-add
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to retrieve specification options.')
                    }  
                });
            });
        });

        $(document).ready(function () {
            $('#addProductSpec').click(function () {
                var specificationAttributeOptionId = $("#@Html.FieldIdFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeOptionId)").val();
                var allowFiltering = $("#@Html.FieldIdFor(model => model.AddSpecificationAttributeModel.AllowFiltering)").is(':checked');
                var showOnProductPage = $("#@Html.FieldIdFor(model => model.AddSpecificationAttributeModel.ShowOnProductPage)").is(':checked');
                var displayOrder = $("#@Html.FieldIdFor(model => model.AddSpecificationAttributeModel.DisplayOrder)").val();
                
                $('#addProductSpec').attr('disabled', true);
                $.ajax({
                    cache:false,
                    type: "POST",
                    url: "@(Url.Action("ProductSpecificationAttributeAdd", "Product"))",
                    data: { "specificationAttributeOptionId": specificationAttributeOptionId, "allowFiltering": allowFiltering, "showOnProductPage": showOnProductPage, "displayOrder": displayOrder, "productId": @Model.Id },
                    success: function (data) {
                         var specificationAttributesGrid = $("#specificationattributes-grid");
                         specificationAttributesGrid.data('tGrid').ajaxRequest();
                         $('#addProductSpec').attr('disabled', false);
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to add specification attribute.')
                        $('#addProductSpec').attr('disabled', false);
                    }  
                });
            });
        });
    </script>
                <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeId, Model.AddSpecificationAttributeModel.AvailableAttributes)
                @Html.ValidationMessageFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeOptionId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeOptionId, Model.AddSpecificationAttributeModel.AvailableOptions)
                @Html.ValidationMessageFor(model => model.AddSpecificationAttributeModel.SpecificationAttributeOptionId)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddSpecificationAttributeModel.AllowFiltering)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddSpecificationAttributeModel.AllowFiltering)
                @Html.ValidationMessageFor(model => model.AddSpecificationAttributeModel.AllowFiltering)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddSpecificationAttributeModel.ShowOnProductPage)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddSpecificationAttributeModel.ShowOnProductPage)
                @Html.ValidationMessageFor(model => model.AddSpecificationAttributeModel.ShowOnProductPage)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddSpecificationAttributeModel.DisplayOrder)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddSpecificationAttributeModel.DisplayOrder)
                @Html.ValidationMessageFor(model => model.AddSpecificationAttributeModel.DisplayOrder)
            </td>
        </tr>
        <tr>
            <td colspan="2" align="left">
                <button type="button" name="addProductSpec" id="addProductSpec" class="btn">
                    <i class="icon-plus"></i>
                    @T("Admin.Catalog.Products.SpecificationAttributes.AddButton")
                </button>
            </td>
        </tr>
    </table>
            }
            else
            {
    @T("Admin.Catalog.Products.SpecificationAttributes.NoAttributes")
            }
        }
        else
        {
    @T("Admin.Catalog.Products.SpecificationAttributes.SaveBeforeEdit")
        }
}
@helper TabAcl()
{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#@Html.FieldIdFor(model => model.SubjectToAcl)").click(toggleAcl);
            toggleAcl();
        });

        function toggleAcl() {
            if ($('#@Html.FieldIdFor(model => model.SubjectToAcl)').is(':checked')) {
                $('#pnl-acl').show();
            }
            else {
                $('#pnl-acl').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SubjectToAcl)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SubjectToAcl)
                @Html.ValidationMessageFor(model => model.SubjectToAcl)
            </td>
        </tr>
        <tr id="pnl-acl">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableCustomerRoles)
            </td>
            <td class="adminData">
                @if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
                {
                    foreach (var customerRole in Model.AvailableCustomerRoles)
                    {
                    <div>
                        <label class="checkbox">
                            <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id" checked="@(Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))" />@customerRole.Name
                        </label>
                    </div>
                    }
                }
                else
                {
                    <div>No customer roles defined</div>
                }</td>
        </tr>
    </table>
}
@helper TabStores()
{
    <script type="text/javascript">
    	$(document).ready(function () {

    		$("#@Html.FieldIdFor(model => model.LimitedToStores)").click(toggleStoreMapping);
        
        	toggleStoreMapping();
        });


        function toggleStoreMapping() {
        	if ($('#@Html.FieldIdFor(model => model.LimitedToStores)').is(':checked')) {
        		$('#pnl-available-stores').show();
        	}
        	else {
        		$('#pnl-available-stores').hide();
        	}
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LimitedToStores)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LimitedToStores)
                @Html.ValidationMessageFor(model => model.LimitedToStores)
            </td>
        </tr>
        <tr id="pnl-available-stores">
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AvailableStores)
            </td>
            <td class="adminData">
				@if (Model.AvailableStores != null && Model.AvailableStores.Count > 0)
				{
					foreach (var store in Model.AvailableStores)
					{
					<label class="checkbox">
						<input type="checkbox" name="SelectedStoreIds" value="@store.Id" checked="@(Model.SelectedStoreIds != null && Model.SelectedStoreIds.Contains(store.Id))" />
						<span>@store.Name</span>
					</label>
					}
				}
				else
				{
					<div>@T("Admin.Configuration.Stores.NoStoresDefined")</div>
				}</td>
        </tr>
    </table>
}

@helper TabTierPrices()
{
    if (Model.Id > 0)
    {
        @(Html.Telerik().Grid<ProductModel.TierPriceModel>()
            .Name("tierprices-grid")
                .DataKeys(keys =>
                {
                    keys.Add(x => x.Id);
                })
                .DataBinding(dataBinding =>
                {
                    dataBinding.Ajax()
                        .Select("TierPriceList", "Product", new { productId = Model.Id })
                        .Insert("TierPriceInsert", "Product", new { productId = Model.Id })
                        .Update("TierPriceUpdate", "Product")
                        .Delete("TierPriceDelete", "Product");
                })
                .Columns(columns =>
                {
                    columns.Bound(x => x.Store)
                         .Centered();
                    columns.Bound(x => x.CustomerRole)
                        .Centered();
                    columns.Bound(x => x.Quantity)
                        .Centered();
                    columns.Bound(x => x.Price1)
                        .Format("{0:G29}");
                    columns.Command(commands =>
                    {
                        commands.Edit().Localize(T);
                        commands.Delete().Localize(T);
                    })
                    .Width(180);
                })
                .ToolBar(commands => commands.Insert())
                .ClientEvents(events => events.OnEdit("onTierPriceEdit"))
                .EnableCustomBinding(true))

        <script type="text/javascript">
            function onTierPriceEdit(e) {
                // codehint: sm-edit
                $(e.form).find('#CustomerRole').select2('val', e.dataItem['CustomerRoleId']);
            }
        </script>
    }
    else
    {
        @T("Admin.Catalog.Products.TierPrices.SaveBeforeEdit")
    }
}

@helper TabDiscounts()
{
    if (Model.AvailableDiscounts != null && Model.AvailableDiscounts.Count > 0)
    {
        foreach (var discount in Model.AvailableDiscounts)
        {
            <label class="checkbox">
                <input type="checkbox" name="SelectedDiscountIds" value="@discount.Id"
                       @if (Model.SelectedDiscountIds != null && Model.SelectedDiscountIds.Contains(discount.Id)) { <text> checked="checked" </text>  } />@discount.Name
            </label>
        }
    }
    else
    {
        @T("Admin.Catalog.Products.Discounts.NoDiscounts")
    }
}

@helper TabAttributes()
{
    if (Model.Id > 0)
    {
        if (Model.NumberOfAvailableProductAttributes > 0)
        {

            @(Html.Telerik().Grid<ProductModel.ProductVariantAttributeModel>()
            .Name("productvariantattributes-grid")
            .DataKeys(keys =>
            {
                keys.Add(x => x.Id);
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                    .Select("ProductVariantAttributeList", "Product", new { productId = Model.Id })
                    .Insert("ProductVariantAttributeInsert", "Product", new { productId = Model.Id })
                    .Update("ProductVariantAttributeUpdate", "Product") // codehint: sm-edit
                    .Delete("ProductVariantAttributeDelete", "Product");
            })
            .Columns(columns =>
            {
                columns.Bound(x => x.ProductAttribute)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.TextPrompt)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.IsRequired)
                    .Width(100)
                    .Template(item => @Html.SymbolForBool(item.IsRequired))
                    .ClientTemplate(@Html.SymbolForBool("IsRequired"))
                    .Centered();
                columns.Bound(x => x.AttributeControlType)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.DisplayOrder1)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.ViewEditUrl)
                    .Width(200)
                    .ClientTemplate("<a href=\"<#= ViewEditUrl #>\"><#= ViewEditText #></a>")
                    .ReadOnly()
                    .Title(T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Values").Text);
                columns.Command(commands =>
                {
                    commands.Edit().Localize(T);
                    commands.Delete().Localize(T);
                })
                .Width(180);
            })
            .ToolBar(commands => commands.Insert())
            .ClientEvents(events => events.OnEdit("onProductVariantAttributeEdit"))
            .EnableCustomBinding(true))

            <script type="text/javascript">
                function onProductVariantAttributeEdit(e) {
                    // codehint: sm-edit
                    $(e.form).find('#ProductAttribute').select2('val', e.dataItem['ProductAttributeId']);
                    $(e.form).find('#AttributeControlType').select2('val', e.dataItem['AttributeControlTypeId']);
                }
            </script>

        }
        else
        {
            @T("Admin.Catalog.Products.ProductVariantAttributes.NoAttributesAvailable")
        }
    }
    else
    {
        @T("Admin.Catalog.Products.ProductVariantAttributes.SaveBeforeEdit")
    }
}

@helper TabAttributeCombinations()
{
    if (Model.Id > 0)
    {
        if (Model.NumberOfAvailableProductAttributes > 0)
        {

            <div style="margin: 10px 0px 10px 0px;" class="muted">
                @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.Description")
            </div>

            <div style="margin: 10px 0">
                <button class="btn btn-warning add-new-combination">
                    <i class="icon-plus"></i>
                    @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")
                </button>

                <button type="button" id="btnCreateAllCombinations" class="btn"
                        data-url='@Url.Action("CreateAllAttributeCombinations", new { productId = Model.Id })'>
                    <i class="icon-tasks"></i>
                    @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.CreateAllCombinations")
                </button>

                <input type="submit" id="btnRefreshCombinations" name="btnRefreshCombinations" class="hide" />
                <script type="text/javascript">
	                $(document).ready(function () {
	                    $('.add-new-combination').on('click', function (e) {
	                    	OpenWindow('@(Url.Action("AttributeCombinationCreatePopup", "Product", new { productId = Model.Id }))&btnId=btnRefreshCombinations&formId=product-form',
                                1000,
                                800,
                                true);
	                        return false;
	                    });

	                    $('#btnRefreshCombinations').click(function () {
	                        //refresh grid
	                        var optionsGrid = $("#attributecombinations-grid");
	                        optionsGrid.data('tGrid').ajaxRequest();

	                        //return false to don't reload a page
	                        return false;
	                    });

	                    $('#btnCreateAllCombinations').click(function () {
	                        $(this).doAjax({
	                        	ask: '@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AskToCombineAll")',
	                            callbackSuccess: function (resp) {
	                                $('#btnRefreshCombinations').click();
	                            }
	                        });
	                    });
	                });
                </script>
            </div>

            <div>
                @(Html.Telerik().Grid<ProductVariantAttributeCombinationModel>()
                        .Name("attributecombinations-grid")
                        .DataKeys(keys =>
                        {
                            keys.Add(x => x.Id);
                        })
                        .DataBinding(dataBinding =>
                        {
                            dataBinding.Ajax()
                                .Select("ProductVariantAttributeCombinationList", "Product", new { productId = Model.Id })
                                //.Update("ProductVariantAttrbiuteCombinationUpdate", "Product")
                                .Delete("ProductVariantAttributeCombinationDelete", "Product");
                        })
                        .Columns(columns =>
                        {
                            columns.Bound(x => x.AttributesXml)
                                .ClientTemplate("<#= AttributesXml #><br /><span style=\"color: red\"><#= Warnings #></span>")
                                .Width(460)
                                .Encoded(false)
                                .ReadOnly();
                            columns.Bound(x => x.IsActive)
                                .Width(80)
                                .Template(item => @Html.SymbolForBool(item.IsActive))
                                .ClientTemplate(@Html.SymbolForBool("IsActive"))
                                .Centered();
                            columns.Bound(x => x.ProductUrl)
                                .Width(120)
                                .Centered()
                                .ClientTemplate("<a href=\"<#= ProductUrl #>\" target=\"_blank\"><#= ProductUrlTitle #></a>");
                            columns.Bound(x => x.Sku);
                            columns.Bound(x => x.StockQuantity)
                                .Width(160)
                                .Centered();
                            columns.Bound(x => x.AllowOutOfStockOrders)
                                .Width(260)
                                .Template(item => @Html.SymbolForBool(item.AllowOutOfStockOrders))
                                .ClientTemplate(@Html.SymbolForBool("AllowOutOfStockOrders"))
                                .Centered();
                            columns.Bound(x => x.Id)
                                .Width(120)
                                .Centered()
                                .ClientTemplate("<button onclick=\"" + "OpenWindow('" + @Url.Content("~/Admin/Product/AttributeCombinationEditPopup/") + "<#= Id #>?btnId=btnRefreshCombinations&formId=product-form', 1000, 800, true); return false;\" class='btn'>" + @T("Admin.Common.Edit").Text + "</button>")
                                .Title(T("Admin.Common.Edit").Text);
                            columns.Command(commands =>
                            {
                                //commands.Edit().Localize(T);
                                commands.Delete().Localize(T);
                            })
                            .Width(120)
                            .Title(T("Admin.Common.Delete").Text);
                        })
                        .ClientEvents(events => events.OnRowDataBound("onRowDataBound_Combinations"))
                        .EnableCustomBinding(true))

                <script type="text/javascript">
					function onRowDataBound_Combinations(e) {
						if (!e.dataItem.IsActive) {
							$(e.row).find('td').wrapInner('<span class="muted" />');
						}
					}
                </script>
            </div>

            <button class="btn btn-warning add-new-combination" style="margin-top: 10px">
                <i class="icon-plus"></i>
                @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")
            </button>

        }
        else
        {
            @T("Admin.Catalog.Products.ProductVariantAttributes.NoAttributesAvailable")
        }
    }
    else
    {
        @T("Admin.Catalog.Products.ProductVariantAttributes.SaveBeforeEdit")
    }
}