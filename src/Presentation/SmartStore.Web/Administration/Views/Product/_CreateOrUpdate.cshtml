@model ProductModel

@using SmartStore.Core.Domain.Catalog;
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework.UI;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("product-edit").Style(TabsStyle.Tabs).Position(TabsPosition.Left).Items(x =>
{
    x.Add().Text(T("Admin.Catalog.Products.Info").Text)
        .Content(TabInfo())
        .Icon("icon-pencil")
        .Selected(true);
    x.Add().Text(T("Admin.Common.SEO").Text)
        .Icon("icon-signal")
        .Content(TabSeo());
    x.Add().Text(T("Admin.Catalog.Products.Pictures").Text)
        .Icon("icon-picture")
        .Content(TabPictures());
    x.Add().Text(T("Admin.Catalog.Products.Categories").Text)
        .Icon("icon-sitemap")
        .Content(TabCategories());
    x.Add().Text(T("Admin.Catalog.Products.Manufacturers").Text)
        .Icon("icon-truck")
        .Content(TabManufacturers());
    x.Add().Text(T("Admin.Catalog.Products.TierPrices").Text)
        .Content(TabTierPrices());
    x.Add().Text(T("Admin.Catalog.Products.Discounts").Text)
        .Content(TabDiscounts());    
    x.Add().Text(T("Admin.Catalog.Products.SpecificationAttributes").Text)
        .Icon("icon-reorder")
        .Content(TabSpecificationAttributes());
    x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.Attributes").Text)
        .Content(TabAttributes());
    x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations").Text)
        .Content(TabAttributeCombinations());    
    x.Add().Text(T("Admin.Catalog.Products.Acl").Text)
        .Icon("icon-group")
        .Content(TabAcl());
	x.Add().Text(T("Admin.Common.Stores").Text)
        .Icon("icon-globe")    
        .Content(TabStores());
    x.Add().Text(T("Admin.Catalog.Products.RelatedProducts").Text)
        .Icon("icon-link")
        .Content(TabRelatedProducts());
    x.Add().Text(T("Admin.Catalog.Products.CrossSells").Text)
        .Icon("icon-bullhorn")
        .Content(TabCrossSells());
    x.Add().Text(T("Admin.Catalog.Products.AssociatedProducts").Text).
        Content(TabAssociatedProducts());
    
    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "product-edit", this.Html, this.Model));
})
@helper TabInfo()
{
    @Html.Partial("_CreateOrUpdate.Info", Model)
}
@helper TabSeo()
{
    @Html.Partial("_CreateOrUpdate.SEO", Model)
}
@helper TabPictures()
{
    @Html.Partial("_CreateOrUpdate.Pictures", Model)
}
@helper TabCategories()
{
    @Html.Partial("_CreateOrUpdate.Categories", Model)
}
@helper TabManufacturers()
{
    @Html.Partial("_CreateOrUpdate.Manufacturers", Model)
}
@helper TabTierPrices()
{
    @Html.Partial("_CreateOrUpdate.TierPrices", Model)
}
@helper TabDiscounts()
{
    @Html.Partial("_CreateOrUpdate.Discounts", Model)
}
@helper TabSpecificationAttributes()
{
    @Html.Partial("_CreateOrUpdate.SpecificationAttributes", Model)
}
@helper TabAttributes()
{
    @Html.Partial("_CreateOrUpdate.Attributes", Model)
}
@helper TabAttributeCombinations()
{
    @Html.Partial("_CreateOrUpdate.AttributeCombinations", Model)
}
@helper TabAcl()
{
    @Html.Partial("_CreateOrUpdate.Acl", Model)
}
@helper TabStores()
{
    @Html.Partial("_CreateOrUpdate.Stores", Model)
}
@helper TabRelatedProducts()
{
    @Html.Partial("_CreateOrUpdate.RelatedProducts", Model)
}
@helper TabCrossSells()
{
    @Html.Partial("_CreateOrUpdate.CrossSells", Model)
}
@helper TabAssociatedProducts()
{
    @Html.Partial("_CreateOrUpdate.AssociatedProducts", Model)
}