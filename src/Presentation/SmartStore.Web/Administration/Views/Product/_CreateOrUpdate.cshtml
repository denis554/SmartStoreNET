@model ProductModel

@using SmartStore.Core.Domain.Catalog;
@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework.UI;

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

@Html.SmartStore().TabStrip().Name("product-edit").Style(TabsStyle.Tabs).Position(TabsPosition.Left).Items(x =>
{
    x.Add().Text(T("Admin.Catalog.Products.Info").Text)
        .Icon("icon-pencil")
        .Content(TabInfo())
        .Selected(true);
    x.Add().Text(T("Admin.Catalog.Products.Price").Text)
        .Icon("icon-barcode")
        .Content(TabPrice());
    x.Add().Text(T("Admin.Catalog.Products.Discounts").Text)
        .Icon("icon-signal")
        .Content(TabDiscounts());    
    
    x.Add().Text(T("Admin.Catalog.Products.Pictures").Text)
        .Icon("icon-picture")
        .Content(TabPictures());
    x.Add().Text(T("Admin.Catalog.Products.Categories").Text)
        .Icon("icon-sitemap")
        .Content(TabCategories());
    x.Add().Text(T("Admin.Catalog.Products.Manufacturers").Text)
        .Icon("icon-truck")
        .Content(TabManufacturers());

    x.Add().Text(T("Admin.Catalog.Products.Promotion").Text)
        .Icon("icon-bullhorn")
        .Content(TabPromotion());

    if (Model.Id > 0 && Model.ProductTypeId == (int)ProductType.GroupedProduct)
    {
        x.Add().Text(T("Admin.Catalog.Products.AssociatedProducts").Text)
            .Icon("icon-link")
            .Content(TabAssociatedProducts());
    }
    
    x.Add().Text(T("Admin.Catalog.Products.ProductVariantAttributes.Attributes").Text)
        .Icon("icon-list-alt")
        .Content(TabAttributes());
    x.Add().Text(T("Admin.Catalog.Products.SpecificationAttributes").Text)
        .Icon("icon-reorder")
        .Content(TabSpecificationAttributes());
    
    x.Add().Text(T("Admin.Common.SEO").Text)
        .Icon("icon-globe")
        .Content(TabSeo());
    x.Add().Text(T("Admin.Catalog.Products.Acl").Text)
        .Icon("icon-group")
        .Content(TabAcl());    
    x.Add().Text(T("Admin.Common.Stores").Text)
        .Icon("icon-globe")
        .Content(TabStores());

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "product-edit", this.Html, this.Model));
})
@helper TabInfo()
{
    @Html.Partial("_CreateOrUpdate.Info", Model)
}
@helper TabPrice()
{
    @Html.Partial("_CreateOrUpdate.Price", Model)
}
@helper TabDiscounts()
{
    @Html.Partial("_CreateOrUpdate.Discounts", Model)
}

@helper TabPictures()
{
    @Html.Partial("_CreateOrUpdate.Pictures", Model)
}
@helper TabCategories()
{
    @Html.Partial("_CreateOrUpdate.Categories", Model)
}
@helper TabManufacturers()
{
    @Html.Partial("_CreateOrUpdate.Manufacturers", Model)
}

@helper TabPromotion()
{
    @Html.Partial("_CreateOrUpdate.Promotion", Model)
}

@helper TabAssociatedProducts()
{
    if (Model.Id > 0 && Model.ProductTypeId == (int)ProductType.GroupedProduct)
    {
        @Html.Partial("_CreateOrUpdate.AssociatedProducts", Model)
    }
}

@helper TabAttributes()
{
    @Html.Partial("_CreateOrUpdate.Attributes", Model)
}
@helper TabSpecificationAttributes()
{
    @Html.Partial("_CreateOrUpdate.SpecificationAttributes", Model)
}

@helper TabSeo()
{
    @Html.Partial("_CreateOrUpdate.SEO", Model)
}
@helper TabAcl()
{
    @Html.Partial("_CreateOrUpdate.Acl", Model)
}
@helper TabStores()
{
    @Html.Partial("_CreateOrUpdate.Stores", Model)
}
