@model ProductModel

@using Telerik.Web.Mvc.UI;

<div>
    <h3>@T("Admin.Catalog.Products.ProductVariantAttributes.Attributes")</h3>

    @if (Model.Id > 0)
    {
        if (Model.NumberOfAvailableProductAttributes > 0)
        {
            @(Html.Telerik().Grid<ProductModel.ProductVariantAttributeModel>()
            .Name("productvariantattributes-grid")
            .DataKeys(keys =>
            {
                keys.Add(x => x.Id);
            })
            .DataBinding(dataBinding =>
            {
                dataBinding.Ajax()
                    .Select("ProductVariantAttributeList", "Product", new { productId = Model.Id })
                    .Insert("ProductVariantAttributeInsert", "Product", new { productId = Model.Id })
                    .Update("ProductVariantAttributeUpdate", "Product") // codehint: sm-edit
                    .Delete("ProductVariantAttributeDelete", "Product");
            })
            .Columns(columns =>
            {
                columns.Bound(x => x.ProductAttribute)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.TextPrompt)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.IsRequired)
                    .Width(100)
                    .Template(item => @Html.SymbolForBool(item.IsRequired))
                    .ClientTemplate(@Html.SymbolForBool("IsRequired"))
                    .Centered();
                columns.Bound(x => x.AttributeControlType)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.DisplayOrder1)
                    .Width(150)
                    .Centered();
                columns.Bound(x => x.ViewEditUrl)
                    .Width(200)
                    .ClientTemplate("<a href=\"<#= ViewEditUrl #>\"><#= ViewEditText #></a>")
                    .ReadOnly()
                    .Title(T("Admin.Catalog.Products.ProductVariantAttributes.Attributes.Values").Text);
                columns.Command(commands =>
                {
                    commands.Edit().Localize(T);
                    commands.Delete().Localize(T);
                })
                .Width(180);
            })
            .ToolBar(commands => commands.Insert())
            .ClientEvents(events => events.OnEdit("onProductVariantAttributeEdit"))
            .EnableCustomBinding(true))

            <script type="text/javascript">
                function onProductVariantAttributeEdit(e) {
                    // codehint: sm-edit
                    $(e.form).find('#ProductAttribute').select2('val', e.dataItem['ProductAttributeId']);
                    $(e.form).find('#AttributeControlType').select2('val', e.dataItem['AttributeControlTypeId']);
                }
            </script>
        }
        else
        {
            <div class="alert alert-danger">
                @T("Admin.Catalog.Products.ProductVariantAttributes.NoAttributesAvailable")
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger">
            @T("Admin.Catalog.Products.ProductVariantAttributes.SaveBeforeEdit")
        </div>
    }
</div>

<div style="margin-top:30px;">
    <h3>@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations")</h3>

    @if (Model.Id > 0)
    {
        if (Model.NumberOfAvailableProductAttributes > 0)
        {
            <div style="margin: 10px 0px 10px 0px;" class="alert alert-success">
                @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.Description")
            </div>

            <div style="margin: 10px 0 5px 0;">
                <button class="btn btn-warning add-new-combination">
                    <i class="icon-plus"></i>
                    @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")
                </button>

                <button type="button" id="btnCreateAllCombinations" class="btn" data-url='@Url.Action("CreateAllAttributeCombinations", new { productId = Model.Id })'>
                    <i class="icon-tasks"></i>
                    @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.CreateAllCombinations")
                </button>

                <input type="submit" id="btnRefreshCombinations" name="btnRefreshCombinations" class="hide" />
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('.add-new-combination').on('click', function (e) {
                            OpenWindow('@(Url.Action("AttributeCombinationCreatePopup", "Product", new { productId = Model.Id }))&btnId=btnRefreshCombinations&formId=product-form',
                                1000,
                                800,
                                true);
                            return false;
                        });

                        $('#btnRefreshCombinations').click(function () {
                            //refresh grid
                            var optionsGrid = $("#attributecombinations-grid");
                            optionsGrid.data('tGrid').ajaxRequest();

                            //return false to don't reload a page
                            return false;
                        });

                        $('#btnCreateAllCombinations').click(function () {
                            $(this).doAjax({
                                ask: '@T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AskToCombineAll")',
                                callbackSuccess: function (resp) {
                                    $('#btnRefreshCombinations').click();
                                }
                            });
                        });
                    });
                </script>
            </div>
            <div>
                @(Html.Telerik().Grid<ProductVariantAttributeCombinationModel>()
                    .Name("attributecombinations-grid")
                    .DataKeys(keys =>
                    {
                        keys.Add(x => x.Id);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax()
                            .Select("ProductVariantAttributeCombinationList", "Product", new { productId = Model.Id })
                            .Delete("ProductVariantAttributeCombinationDelete", "Product");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.AttributesXml)
                            .ClientTemplate("<#= AttributesXml #><br /><span style=\"color: red\"><#= Warnings #></span>")
                            .Width(460)
                            .Encoded(false)
                            .ReadOnly();
                        columns.Bound(x => x.IsActive)
                            .Width(80)
                            .Template(item => @Html.SymbolForBool(item.IsActive))
                            .ClientTemplate(@Html.SymbolForBool("IsActive"))
                            .Centered();
                        columns.Bound(x => x.ProductUrl)
                            .Width(120)
                            .Centered()
                            .ClientTemplate("<a href=\"<#= ProductUrl #>\" target=\"_blank\"><#= ProductUrlTitle #></a>");
                        columns.Bound(x => x.Sku);
						columns.Bound(x => x.Price);
                        columns.Bound(x => x.StockQuantity)
                            .Width(160)
                            .Centered();
                        columns.Bound(x => x.AllowOutOfStockOrders)
                            .Width(260)
                            .Template(item => @Html.SymbolForBool(item.AllowOutOfStockOrders))
                            .ClientTemplate(@Html.SymbolForBool("AllowOutOfStockOrders"))
                            .Centered();
                        columns.Bound(x => x.Id)
                            .Width(90)
                            .Centered()
                            .ClientTemplate("<button onclick=\"" + "OpenWindow('" + @Url.Content("~/Admin/Product/AttributeCombinationEditPopup/") + "<#= Id #>?btnId=btnRefreshCombinations&formId=product-form', 1000, 800, true); return false;\" class='btn'>" + @T("Admin.Common.Edit").Text + "</button>")
                            .Title("");
                        columns.Command(commands =>
                            {
                                commands.Delete().Localize(T);
                            })
                            .Width(90);
                    })
                    .ClientEvents(events => events.OnRowDataBound("onRowDataBound_Combinations"))
                    .EnableCustomBinding(true))

                <script type="text/javascript">
                    function onRowDataBound_Combinations(e) {
                        if (!e.dataItem.IsActive) {
                            $(e.row).find('td').wrapInner('<span class="muted" />');
                        }
                    }
                </script>
            </div>

            <div style="margin-top:5px;">
                <button class="btn btn-warning add-new-combination">
                    <i class="icon-plus"></i>
                    @T("Admin.Catalog.Products.ProductVariantAttributes.AttributeCombinations.AddNew")
                </button>
            </div>
        }
        else
        {
            <div class="alert alert-danger">
                @T("Admin.Catalog.Products.ProductVariantAttributes.NoAttributesAvailable")
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger">
            @T("Admin.Catalog.Products.ProductVariantAttributes.SaveBeforeEdit")
        </div>
    }
</div>