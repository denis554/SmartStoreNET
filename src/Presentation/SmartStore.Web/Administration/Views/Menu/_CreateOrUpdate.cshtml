@using SmartStore.Admin.Models.Menus
@model MenuRecordModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.IsSystemMenu)

@Html.SmartStore().TabStrip().Name("menu-edit").Style(TabsStyle.Material).Items(x =>
{
	x.Add().Text(T("Admin.Common.General").Text).Content(TabInfo()).Selected(true);
	x.Add().Text(T("Admin.Catalog.Categories.Acl").Text).Content(TabAcl());
	x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());
	
	EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "menu-edit", this.Html, this.Model));
})

@helper TabInfo()
{ 
    <div class="adminContent mb-3">
        <div class="adminRow">
            <div class="adminTitle">
                @Html.SmartLabelFor(model => model.SystemName)
            </div>
            <div class="adminData">
				@Html.TextBoxFor(model => model.SystemName, Model.IsSystemMenu ? new { @readonly = "readonly" } : null )
                @Html.ValidationMessageFor(model => model.SystemName)
            </div>
        </div>
        <div class="adminRow">
            <div class="adminTitle">
                @Html.SmartLabelFor(model => model.Published)
            </div>
            <div class="adminData">
				@Html.CheckBoxFor(model => model.Published, Model.IsSystemMenu ? new { @readonly = "readonly" } : null )
                @Html.ValidationMessageFor(model => model.Published)
            </div>
        </div>
    </div>
    
    @(Html.LocalizedEditor<MenuRecordModel, MenuRecordLocalizedModel>("menu-info-localized",
            @<div class="adminContent">
                <div class="adminRow">
                    <div class="adminTitle">
                        @Html.SmartLabelFor(model => model.Locales[item].Title)
                    </div>
					<div class="adminData">
						@*IMPORTANT: Do not delete, this hidden element contains the id to assign localized values to the corresponding language *@
						@Html.HiddenFor(model => model.Locales[item].LanguageId, new { id = Html.FieldIdFor(model => model.Locales[item].LanguageId) + "_1" })

						@Html.EditorFor(model => model.Locales[item].Title)
						@Html.ValidationMessageFor(model => model.Locales[item].Title)
					</div>
                </div>
            </div>
            ,
            @<div class="adminContent">
                <div class="adminRow">
                    <div class="adminTitle">
                        @Html.SmartLabelFor(model => model.Title)
                    </div>
                    <div class="adminData">
                        @Html.EditorFor(model => model.Title)
                        @Html.ValidationMessageFor(model => model.Title)
                    </div>
                </div>
            </div>
        ))

    <button type="button" class="d-none" id="btn-refresh" data-url="@Url.Action("ItemList", "Menu", new { id = Model.Id })"></button>
    <h4 class="h5 mt-5">@T("Admin.ContentManagement.MenuLinks")</h4>
    <div id="menu-items" class="menu-item-list">
        @Html.Partial("ItemList", Model)
    </div>
}

@helper TabStores()
{
	@Html.Partial("StoreSelector", Model)
}

@helper TabAcl()
{
	@Html.Partial("AclSelector", Model)
}

<script type="text/javascript">
    $(document).ready(function () {

        // Reload item list.
        $('#btn-refresh').on('click', function () {
            $(this).doAjax({
                callbackSuccess: function (response) {
					$('#menu-items').html(response);
				}
			});
        });

        // Process item command.
        $('#menu-items').on('click', '.menu-item-command', function (e) {
            e.preventDefault();
            var el = $(this);
            switch (el.data('action')) {
                case 'add-item':
                case 'edit-item':
                    window.openPopup(el.data('url'), true, true);
                    break;
                case 'delete-item':
					el.doAjax({
						type: 'POST',
						ask: @T("Admin.Common.AskToProceed").JsText,
						callbackSuccess: function (response) {
							$('#menu-items').html(response);
						}
					});
                    break;
            }
        });
	});
</script>
