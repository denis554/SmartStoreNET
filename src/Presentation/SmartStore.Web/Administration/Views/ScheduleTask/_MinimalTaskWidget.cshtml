@model ScheduleTaskModel
@{
	Layout = null;
	var returnUrl = (string)ViewBag.ReturnUrl;
	var hasPermission = ViewBag.HasPermission == true;
}
<span class="badge badge-inline@(Model.Enabled ? " badge-warning" : " badge-secondary")">@(Model.Enabled ? T("Common.Scheduled") : T("Common.Unscheduled"))</span>
@if (Model.Enabled)
{
	<span>@T("Common.Rule"): </span>
	<span class="text-muted">@(Model.CronDescription ?? Model.CronExpression)</span>
	if (Model.NextRun.HasValue)
	{
		<span> - @T("Admin.System.ScheduleTasks.NextRun"): </span>
		<span class="text-muted">@Model.NextRunPretty</span>
	}
}
else
{
	<span>@T("Admin.System.ScheduleTasks.LastStart"): </span>
	<span class="text-muted">@(Model.LastStart.HasValue ? Model.LastStartPretty : T("Common.Never").Text)</span>
}
@if (hasPermission)
{
	<div class="dropdown btn-actions">
		<a class="btn btn-sm btn-secondary dropdown-toggle" data-toggle="dropdown" href="#">
			<i class="fa fa-gear"></i>
			<span>@T("Admin.Common.Actions")</span>
		</a>
		<div class="dropdown-menu">
			<a class="dropdown-item" href="@Url.Action("Edit", new { id = Model.Id, returnUrl = returnUrl })">
				@if (Model.Enabled)
				{
					<i class="fa fa-fw fa-edit"></i>
					@T("Admin.System.ScheduleTasks.EditTask")
				}
				else
				{
					<i class="fa fa-fw fa-clock-o"></i>
					@T("Admin.System.ScheduleTasks.ScheduleExecution")
				}
			</a>
			<a class="dropdown-item" href="@Model.ExecuteUrl" onclick="return confirm(@T("Admin.Common.AreYouSure").JsText);">
				<i class="fa fa-fw fa-play"></i>
				@T("Admin.System.ScheduleTasks.RunNow")
			</a>
		</div>
	</div>
}




