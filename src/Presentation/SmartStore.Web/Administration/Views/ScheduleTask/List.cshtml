@model dynamic
@using Telerik.Web.Mvc.UI;
@using System.Linq;
@{
    //page title
    ViewBag.Title = T("Admin.System.ScheduleTasks").Text;

	var runJobUrl = Url.Content("~/Admin/ScheduleTask/RunJob/");
}
<div class="section-header">
    <div class="title">
		<i class="fa fa-clock-o"></i>
        @T("Admin.System.ScheduleTasks")
    </div>
</div>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Telerik().Grid<ScheduleTaskModel>()
                    .Name("schedule-tasks-grid")
                    .DataKeys(x =>
                    {
                        x.Add(y => y.Id).RouteKey("Id");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Name).ClientTemplate("<strong><#= Name #></strong>");
                        columns.Bound(x => x.Seconds)
							.ClientTemplate("<#= PrettySeconds #>");
                        columns.Bound(x => x.Enabled)
                            .ClientTemplate(@Html.SymbolForBool("Enabled"))
                            .Centered()
                            .Width(100);
                        columns.Bound(x => x.StopOnError)
                            .ClientTemplate(@Html.SymbolForBool("StopOnError"))
                            .Centered()
                            .Width(100);
						columns.Bound(x => x.Id)
							.ClientTemplate(
								"<# if (LastStartUtc.length) {#><div><span>" + @T("Admin.System.ScheduleTasks.LastStart") + ":</span> <span class='task-last-start muted'><#= LastStartUtc #></span></div><# } #>" +
								"<# if (NextRunUtc) {#><div><span>" + @T("Admin.System.ScheduleTasks.NextRun") + ":</span> <span class='task-next-run muted'><#= NextRunUtc #></span></div><# } #>" +
								"<# if (!LastEndUtc && !IsRunning) {#><div><span>" + @T("Admin.System.ScheduleTasks.LastStart") + ":</span> <span class='muted'>" + @T("Common.Never") + "</span></div><# } #>" +
								"<# if (Duration.length) {#><div><span>" + @T("Common.Duration") + ":</span> <span class='task-duration muted'><#= Duration #></span></div><# } #>" +
								"<# if (LastError.length) {#><div class='text-error'><strong>" + @T("Common.Error") + ":</strong> <span><#= LastError #></span></div><# } #>" +								
								"<# if (LastSuccessUtc != LastEndUtc) {#><div><span>" + @T("Admin.System.ScheduleTasks.LastSuccess") + ":</span> <span class='task-last-success muted'><#= LastSuccessUtc #></span></div><# } #>" +
								"<a href='" + @runJobUrl + "<#= Id #>' class='btn btn-success btn-run-task <#= (IsRunning ? 'hide' : '') #>' data-task-id='<#= Id #>' style='margin-top: 12px'><i class='fa fa-play'></i> " + @T("Admin.System.ScheduleTasks.RunNow") + "</a>" +
								"<a href='<#= CancelUrl #>' class='btn btn-danger btn-cancel-task <#= (IsRunning ? '' : 'hide') #>' data-task-id='<#= Id #>' style='margin-top: 12px'>" + @T("Common.Cancel") + "</a>" +
								"<div class='task-progress text-success hide' data-task-id='<#= Id #>' data-running='false'></div>")
							.Title(T("Common.Execution").Text)
							.ReadOnly();
                        columns.Command(commands =>
                        {
                            commands.Edit().Text(T("Admin.Common.Edit").Text);
                        }).Width(180).Title(T("Admin.Common.Edit").Text);

                    })
                    .Editable(x =>
                    {
                        x.Mode(GridEditMode.InLine);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax().Select("List", "ScheduleTask").Update("TaskUpdate", "ScheduleTask");
                    })
                    .ClientEvents(x => x.OnError("grid_onError"))
                    .EnableCustomBinding(true))
            <script type="text/javascript">
                function grid_onError(e) {
                    //alert(e.XMLHttpRequest.responseText);
                    e.preventDefault();
                }
            </script>
        </td>
    </tr>
</table>

<script>
	$(function () {
		$('#schedule-tasks-grid').on('click', '.btn-cancel-task', function (e) {
			if (!confirm('@T("Common.AreYouSure")')) {
				e.preventDefault();
				return false;
			}
		});

		Admin.TaskWatcher.startWatching({
			context: $('#schedule-tasks-grid'),
			elementsSelector: '.task-progress',
			defaultProgressMessage: '@T("Admin.System.ScheduleTasks.RunNow.IsRunning")',
			pollUrl: '@Url.Action("GetRunningTasks")',
			onTaskStarted: function (task, el) {
				el.parent().find('.btn-run-task').addClass('hide').next().removeClass('hide');
			},
			onTaskCompleted: function (taskId, el) {
				el.parent().find('.btn-run-task').removeClass('hide').next().addClass('hide');
			}
		});
	});
</script>

