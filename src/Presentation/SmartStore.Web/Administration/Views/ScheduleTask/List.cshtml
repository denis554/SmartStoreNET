@model Telerik.Web.Mvc.GridModel<ScheduleTaskModel>
@using Telerik.Web.Mvc.UI;
@using System.Linq;
@{
    //page title
    ViewBag.Title = T("Admin.System.ScheduleTasks").Text;
}
<div class="section-header">
    <div class="title">
        <i class="icon icon-time"></i>
        @T("Admin.System.ScheduleTasks")
    </div>
</div>

<div class="alert alert-info fade in">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    @T("Admin.System.ScheduleTasks.RestartApplication")
</div>

<table class="adminContent">
    <tr>
        <td>
            @(Html.Telerik().Grid(Model.Data)
                    .Name("schedule-tasks-grid")
                    .DataKeys(x =>
                    {
                        x.Add(y => y.Id).RouteKey("Id");
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Name);
                        columns.Bound(x => x.Seconds);
                        columns.Bound(x => x.Enabled)
                            .Template(item => @Html.SymbolForBool(item.Enabled))
                            .ClientTemplate(@Html.SymbolForBool("Enabled"))
                            .Centered()
                            .Width(100);
                        columns.Bound(x => x.StopOnError)
                            .Template(item => @Html.SymbolForBool(item.StopOnError))
                            .ClientTemplate(@Html.SymbolForBool("StopOnError"))
                            .Centered()
                            .Width(100);
                        columns.Bound(x => x.LastStartUtc).ReadOnly();
                        columns.Bound(x => x.LastEndUtc).ReadOnly();
                        columns.Bound(x => x.LastSuccessUtc).ReadOnly();
                        columns.Command(commands =>
                        {
                            commands.Edit().Text(T("Admin.Common.Edit").Text);
                        }).Width(180).Title(T("Admin.Common.Edit").Text);

                    })
                    .Editable(x =>
                    {
                        x.Mode(GridEditMode.InLine);
                    })
                    .DataBinding(dataBinding =>
                    {
                        dataBinding.Ajax().Select("List", "ScheduleTask")
                            .Update("TaskUpdate", "ScheduleTask");
                    })
                    .ClientEvents(x => x.OnError("grid_onError"))
                    .EnableCustomBinding(true))
            <script type="text/javascript">
                function grid_onError(e) {
                    alert(e.XMLHttpRequest.responseText);
                    e.preventDefault();
                }
            </script>
        </td>
    </tr>
</table>
