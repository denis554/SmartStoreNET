@model PollModel
@using Telerik.Web.Mvc.UI;
@Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Id)
@Html.SmartStore().TabStrip().Name("poll-edit").Style(TabsStyle.Material).Items(x =>
{
    x.Add().Text(T("Admin.ContentManagement.Polls.Info").Text).Content(TabInfo()).Selected(true);
    x.Add().Text(T("Admin.ContentManagement.Polls.Answers").Text).Content(TabAnswers());
	x.Add().Text(T("Admin.Common.Stores").Text).Content(TabStores());
    
    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "poll-edit", this.Html, this.Model));
})

@helper TabInfo()
{        
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.LanguageId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.LanguageId, new SelectList(ViewBag.AllLanguages, "Id", "Name"))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Name)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.SystemKeyword)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.SystemKeyword)
                @Html.ValidationMessageFor(model => model.SystemKeyword)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.Published)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Published)
                @Html.ValidationMessageFor(model => model.Published)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShowOnHomePage)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.ShowOnHomePage)
                @Html.ValidationMessageFor(model => model.ShowOnHomePage)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AllowGuestsToVote)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AllowGuestsToVote)
                @Html.ValidationMessageFor(model => model.AllowGuestsToVote)
            </td>
        </tr>
        <tr>
            <td class="adminTitle"> 
                @Html.SmartLabelFor(model => model.DisplayOrder)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.DisplayOrder)
                @Html.ValidationMessageFor(model => model.DisplayOrder)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.StartDate)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.StartDate)
                @Html.ValidationMessageFor(model => model.StartDate)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.EndDate)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.EndDate)
                @Html.ValidationMessageFor(model => model.EndDate)
            </td>
        </tr>
    </table>
}
@helper TabAnswers()
{
    if (Model.Id > 0)
    {
		<div>
			@(Html.Telerik().Grid<PollAnswerModel>()
					.Name("answers-grid")
					.DataKeys(x =>
					{
						x.Add(y => y.Id).RouteKey("Id");
						x.Add(y => y.PollId).RouteKey("pollId");
					})
					.Columns(columns =>
					{
						columns.Bound(x => x.Name)
							.Width(250);
						columns.Bound(x => x.NumberOfVotes)
							.ReadOnly()
							.Width(100);
						columns.Bound(x => x.DisplayOrder1).Width(100);
						columns.Command(commands =>
						{
							commands.Edit().Localize(T);
							commands.Delete().Localize(T);
						}).Width(180);

					})
					.ToolBar(x => x.Insert())
					.Editable(x =>
					{
						x.Mode(GridEditMode.InLine);
					})
					.DataBinding(dataBinding =>
					{
						dataBinding.Ajax().Select("PollAnswers", "Poll", new { pollId = Model.Id })
							.Update("PollAnswerUpdate", "Poll")
							.Delete("PollAnswerDelete", "Poll")
							.Insert("PollAnswerAdd", "Poll", new { pollId = Model.Id });
					})
					.ClientEvents(x => x.OnError("grid_onError"))
					.EnableCustomBinding(true))

			<script type="text/javascript">
				function grid_onError(e) {
					alert(e.XMLHttpRequest.responseText);
					e.preventDefault();
				}
			</script>
		</div>
    }
    else
    {
		@T("Admin.ContentManagement.Polls.Answers.SaveBeforeEdit")
    }
}

@helper TabStores()
{
	@Html.Partial("StoreSelector", Model)
}