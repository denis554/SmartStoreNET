@model PluginListModel
@using SmartStore.Web.Framework.UI;
@{    
    //page title
    ViewBag.Title = T("Admin.Configuration.Plugins").Text;

    var allPluginsSelectList = Model.AllPlugins.Select(x => new SelectListItem { Value = x.SystemName, Text = x.FriendlyName });
}

@using (Html.BeginForm("ExecuteTasks", null, FormMethod.Post, new { id = "plugins-form" }))
{
    @Html.DropDownList("pluginsToInstall", allPluginsSelectList, new { @class = "hide", multiple = "multiple" })
    @Html.DropDownList("pluginsToUninstall", allPluginsSelectList, new { @class = "hide", multiple = "multiple" })
    
    <div class="section-header">
        <div class="title">
            <i class="icon icon-cogs"></i>
            @T("Admin.Configuration.Plugins")
        </div>
        <div class="options">
            <button id="btn-execute-tasks" type="submit" class="btn" disabled="disabled">
                <i class="icon-cogs"></i>
                @T("Admin.Configuration.Plugins.ExecuteTasks")
                <span class="label label-important label-uninstall-count hide">0</span>
                <span class="label label-warning label-install-count hide">0</span>
            </button>
            <a href="@Url.Action("ReloadList")" class="btn">
                <i class="icon-refresh"></i>
                @T("Admin.Configuration.Plugins.ReloadList")
            </a>
        </div>
    </div>
    
    <table class="adminContent">
        <tr>
            <td>
                <div class="alert alert-info fade in">
                    <button class="close" data-dismiss="alert">x</button>
                    <p style="font-weight: bold">@T("Admin.Configuration.Plugins.Description")</p>
                    <ol>
                        <li>@T("Admin.Configuration.Plugins.Description.Step1")</li>
                        <li>@T("Admin.Configuration.Plugins.Description.Step2")</li>
                        <li>@T("Admin.Configuration.Plugins.Description.Step3")</li>
                        <li>@T("Admin.Configuration.Plugins.Description.Step4")</li>
                        <li>@T("Admin.Configuration.Plugins.Description.Step5")</li>
                    </ol>
                </div>
    
                @Html.SmartStore().TabStrip().Name("plugins-tab").Position(TabsPosition.Left).Items(x =>
           {
               bool isFirst = true;
               Model.Groups.Each(g =>
               {
                   var tab = x.Add().Text(g.Key)
                               .Content(PluginList(g.Value))
                               .Badge(g.Value.Count.ToString(), BadgeStyle.Info, g.Value.Count > 0);
                   if (isFirst)
                   {
                       tab.Selected(true);
                   }
                   isFirst = false;
               });
           })

                <input type="submit" id="btnRefresh" name="btnRefresh" style="display: none" />
            </td>
        </tr>
    </table>
    
    @helper PluginList(IEnumerable<PluginModel> plugins)
{  
        <table class="table plugins-table">

            <thead>
                <tr>
                    <th>&nbsp;</th>
                    <th style="width: 60%">@T("Common.Plugin")</th>
                    <th>@T("Admin.Configuration.Plugins.Fields.Installation")</th>
                </tr>
            </thead>
            
            <tbody>

            @foreach (var plugin in plugins)
            {
                <tr @Html.Attr("class", "uninstalled", !plugin.Installed)>
                    <td class="cell-icon">
                        <img class="icon" src='@Url.Content(plugin.IconUrl)' />
                    </td>
                    <td class="cell-data">
                        
                        <div>
                            @if (plugin.Installed)
                            {
                                <span class="label label-warning">@T("Admin.Configuration.Plugins.Fields.Installed")</span>
                                if (plugin.CanChangeEnabled)
                                {
                                    <span class='label@(plugin.IsEnabled ? " label-success" : "")'>
                                        @Html.Raw(plugin.IsEnabled ? T("Common.Active") : T("Common.Inactive"))
                                    </span>
                                }
                            }
                            <span class="plugin-name">@plugin.FriendlyName</span>
                        </div>
                        
                        <div class="plugin-data">
                            @if (plugin.Author.HasValue())
                            {
                                <text><span class="attr-name">@T("Admin.Configuration.Plugins.Fields.Author"):</span> <span class="attr-value">@plugin.Author,</span> </text>
                            }
                            <span class="attr-name">@T("Admin.Configuration.Plugins.Fields.Version"):</span> <span class="attr-value">@plugin.Version</span>
                            <span class="attr-name">@T("Admin.Configuration.Plugins.Fields.SystemName"):</span> <span class="attr-value">@plugin.SystemName</span>
                        </div>

                        @if (plugin.Description.HasValue())
                        {
                            <div class="plugin-description">
                                @T("Common.Description"): <span class="attr-value">@plugin.Description</span>
                            </div>
                        }

                        <div class="plugin-actions">
							<div class="plugin-action-link">
								<i class="icon-edit"></i>
								<a class="plugin-edit" data-systemname='@plugin.SystemName' href="#">
									@T("Admin.Common.Edit")
								</a>
							</div>
                            @if (plugin.ConfigurationUrl.HasValue())
                            {
							<div class="plugin-action-link">
                                <i class="icon-cog"></i>
                                <a class="plugin-configure" href="@plugin.ConfigurationUrl">
                                    @T("Admin.Configuration.Plugins.Fields.Configure")
                                </a>
							</div>
                            }
                            @if (plugin.Installed)
                            {
							<div class="plugin-action-link">
                                <i class="icon-refresh"></i>
                                <a class="plugin-update-resources" href="@Url.Action("UpdateStringResources", new { systemName = plugin.SystemName })">
                                    @T("Admin.Configuration.Plugins.Resources.Update")
                                </a>								
							</div>
                            }
                        </div>

                    </td>
                    <td class="cell-install">
                        <div data-plugin-name="@plugin.FriendlyName" data-system-name="@plugin.SystemName">
                            @if (plugin.Installed)
                            {
                                <a class="btn plugin-uninstall" data-toggle="button" href="#">
                                    @T("Admin.Configuration.Plugins.Fields.Uninstall")
                                </a>
                            }
                            else
                            {
                                <a class="btn btn-success plugin-install" data-toggle="button" href="#">
                                    <i class="icon-download-alt"></i>
                                    @T("Admin.Configuration.Plugins.Fields.Install")
                                </a>
                            }

                        </div>
                    </td>
                </tr>
            }

            </tbody>

        </table>
    }
    
    <script type="text/javascript">
        $(document).ready(function () {

            function getPluginFriendlyName(dropdown, systemName) {
                return dropdown.find('option[value="{0}"]'.format(systemName)).text();
            }

            var dropdownInstall = $('#pluginsToInstall'),
                dropdownUninstall = $('#pluginsToUninstall'),
                btnExecuteTasks = $('#btn-execute-tasks');

            // Create tooltip for  ExecuteTasks button which informs 
            // about plugins to be installed and uninstalled
            btnExecuteTasks.tooltip({
                html: true,
                placement: 'bottom',
                title: function () {
                    var text = '';

                    if (dropdownUninstall.val()) {
                        text = '<div class="al"><b>@T("Admin.Configuration.Plugins.Fields.Uninstall"):</b></div>';
                        _.each(dropdownUninstall.val(), function (val, i) {
                            text += '<div class="al">{0}</div>'.format(getPluginFriendlyName(dropdownUninstall, val));
                        });
                    }

                    if (dropdownInstall.val()) {
                        if (text) text += '<div style="height: 6px"></div>';
                        text += '<div class="al"><b>@T("Admin.Configuration.Plugins.Fields.Install"):</b></div>';
                        _.each(dropdownInstall.val(), function (val, i) {
                            text += '<div class="al">{0}</div>'.format(getPluginFriendlyName(dropdownInstall, val));
                        });
                    }

                    return text;
                }
            });

            // Add/Remove plugins to/from the list of (un)installable plugins
            $('#plugins-tab').on('click', 'a.plugin-install, a.plugin-uninstall', function (e) {
                e.preventDefault();

                var el = $(this),
                    systemName = el.parent().data('system-name'),
                    dropdown = null;             

                if (el.hasClass("plugin-install")) {
                    dropdown = dropdownInstall;
                }
                else if (el.hasClass("plugin-uninstall")) {
                    dropdown = dropdownUninstall;
                }

                // set the corresponding dropdown's option to selected
                var wasRemoved = false;
                var option = dropdown.find('option[value="{0}"]'.format(systemName));
                if (option.attr('selected')) {
                    option.removeAttr('selected');
                    wasRemoved = true;
                }
                else {
                    option.attr('selected', 1);
                }

                var transferSrc = wasRemoved ? btnExecuteTasks : el;
                var transferTarget = wasRemoved ? el : btnExecuteTasks;

                transferSrc.stop(true, true).effect("transfer", { to: transferTarget, easing: "easeOutQuad", className: "transfer" }, 400, function () {
                    // Toggle the ExecuteTasks button and it's labels
                    var labelInstall = btnExecuteTasks.find('.label-install-count'),
                        labelUninstall = btnExecuteTasks.find('.label-uninstall-count'),
                        installCount = dropdownInstall.val() ? dropdownInstall.val().length : 0,
                        uninstallCount = dropdownUninstall.val() ? dropdownUninstall.val().length : 0;

                    labelInstall.toggleClass('hide', installCount == 0).text(installCount);
                    labelUninstall.toggleClass('hide', uninstallCount == 0).text(uninstallCount);

                    if (!installCount && !uninstallCount) {
                        btnExecuteTasks.attr('disabled', 'disabled');
                    }
                    else {
                        btnExecuteTasks.removeAttr('disabled');
                    }
                });

            });

            // Execute the install actions
            btnExecuteTasks.on('click', function (e) {
                var confirmText = '@T("Admin.Configuration.Plugins.ExecuteTasks.Confirm").Text';
                var progressText = '@T("Admin.Configuration.Plugins.ExecuteTasks.Progress").Text';

                if (!confirm(_.str.unescapeHTML(confirmText))) {
                    e.preventDefault();
                    return false;
                }

                $.throbber.show({
                    message: progressText
                });
            });

            // Update plugin resources
        	$('#plugins-tab').on('click', 'a.plugin-update-resources', function (e) {
                var el = $(this);

        	    var confirmText = '@T("Admin.Configuration.Plugins.Resources.UpdateConfirm").Text',
                    progressText = '@T("Admin.Configuration.Plugins.Resources.UpdateProgress")';

                if (!confirm(_.str.unescapeHTML(confirmText).format(el.parent().data('plugin-name')))) {
                    return false;
                }

                e.preventDefault();
                $.throbber.show({
                    message: progressText,
                    callback: function () {
                        setLocation($(e.currentTarget).attr("href"));
                    }
                });

            });

            $('#plugins-tab').on('click', '.plugin-edit', function (e) {
                OpenWindow(
                    '{0}?systemName={1}&btnId=btnRefresh&formId=plugins-form'.format(
                        '@Url.Content("~/Admin/Plugin/EditPopup")',
                        $(this).data("systemname")
                    ),
                    800,
                    350,
                    true
                );
                return false;
            });

            $('#btnRefresh').click(function () {
                // reload page
                setLocation(location.href);
                return false;
            });
        });
</script>
}