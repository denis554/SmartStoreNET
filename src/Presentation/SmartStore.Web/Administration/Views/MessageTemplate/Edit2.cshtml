@using SmartStore.Core.Domain.Messages
@using SmartStore.Collections
@using SmartStore.Services.Messages

@model MessageTemplateModel

@{
    ViewBag.Title = T("Admin.ContentManagement.MessageTemplates.EditMessageTemplateDetails").Text;

	var modelTree = (TreeNode<ModelTreeMember>)ViewBag.LastModelTree;
}

@using (Html.BeginForm())
{
	<input type="hidden" name="Id" value="@Model.Id" />
	<input type="hidden" name="Name" value="@Model.Name" />

	<div class="section-header">
        <div class="title">
            <i class="fa fa-pencil-square-o"></i>
            @T("Admin.ContentManagement.MessageTemplates.EditMessageTemplateDetails") - @Model.Name @Html.ActionLink("(" + T("Admin.ContentManagement.MessageTemplates.BackToList") + ")", "List")
        </div>
        <div class="options">
			@{ Html.RenderWidget("admin_button_toolbar_before"); }

			<button type="submit" name="save-in-file" value="save-in-file" class="btn btn-default"><i class="fa fa-floppy-o"></i>&nbsp;In Datei speichern</button>
            <button type="submit" name="save" value="save" class="btn btn-primary"><i class="fa fa-check"></i>&nbsp;@T("Admin.Common.Save")</button>

			@{ Html.RenderWidget("admin_button_toolbar_after"); }
        </div>
    </div>

    <table  class="adminContent">
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.To)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => model.To, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.To)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ReplyTo)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => model.ReplyTo, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.ReplyTo)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Subject)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => model.Subject, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.Subject)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.ModelTypes)
			</td>
			<td class="adminData">
				@Html.TextBoxFor(model => model.ModelTypes, new { @class = "input-large" })
				@Html.ValidationMessageFor(model => model.ModelTypes)
			</td>
		</tr>
		<tr>
			<td class="adminTitle">
				@Html.SmartLabelFor(model => model.Body)
			</td>
			<td class="adminData">
				@Html.EditorFor(model => model.Body, "CodeMirror")
				@Html.ValidationMessageFor(model => model.Body)
			</td>
		</tr>
	</table>
}

@if (modelTree != null && modelTree.HasChildren)
{
	<h2>Model Tree</h2>
	foreach (var node in modelTree.FlattenNodes(false))
	{
		<div style="padding-left:@((node.Depth - 1) * 20)px">
			@if (node.HasChildren)
			{
				<strong>@node.Value.Name</strong>
			}
			else
			{
				<span>@node.Value.Name</span>
			}
			@if (node.Value.Kind == ModelTreeMemberKind.Collection)
			{
				<i class="fa fa-link" style="padding-left: 8px"></i>
			}
		</div>
	}
}