@model OrderModel
@using Telerik.Web.Mvc.UI;
@using SmartStore.Core.Domain.Tax;
@using SmartStore.Core.Domain.Catalog;
@{
    //page title
    ViewBag.Title = T("Admin.Orders.EditOrderDetails").Text;
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "order-form" }))
{

    <div class="section-header">
        <div class="title">
            @T("Admin.Orders.EditOrderDetails") - @Model.OrderNumber @Html.ActionLink("(" + T("Admin.Orders.BackToList") + ")", "List")
        </div>
        <div class="options">
            @if (Model.DisplayPdfInvoice)
            {
                <a href="@Url.Action("PdfInvoice", new { orderId = Model.Id })" class="btn">@T("Admin.Orders.PdfInvoice")</a>
            }
            <button type="submit" id="order-delete" class="btn btn-danger"><i class="icon-trash icon-white"></i>&nbsp;@T("Admin.Common.Delete")</button>
            <!--
            <span id="order-delete" class="t-button">@T("Admin.Common.Delete")</span>
            -->
            <input type="submit" id="btnRefreshPage" name="btnRefreshPage" style="display: none" />
        </div>
    </div>
    
    @Html.ValidationSummary(false)
    
    @Html.SmartStore().TabStrip().Name("order-edit").Items(x =>
{
    var tabInfo = x.Add().Text(T("Admin.Orders.Info").Text).Content(TabInfo());
    var tabBillingInfo = x.Add().Text(T("Admin.Orders.BillingInfo").Text).Content(TabBillingInfo());
    var tabShippingInfo = x.Add().Text(T("Admin.Orders.ShippingInfo").Text).Content(TabShippingInfo());
    var tabProducts = x.Add().Text(T("Admin.Orders.Products").Text).Content(TabProducts());
    var tabOrderNotes = x.Add().Text(T("Admin.Orders.OrderNotes").Text).Content(TabOrderNotes());
    var tabAttributes = x.Add().Text(T("Admin.Common.GenericAttributes").Text).Content(TabOrderAttributes());

    var selectedTab = (string)ViewData["selectedTab"];
    switch (selectedTab)
    {
        case "info":
            tabInfo.Selected(true);
            break;
        case "billinginfo":
            tabBillingInfo.Selected(true);
            break;
        case "shippinginfo":
            tabShippingInfo.Selected(true);
            break;
        case "products":
            tabProducts.Selected(true);
            break;
        case "ordernotes":
            tabOrderNotes.Selected(true);
            break;
        case "orderattributes":
            tabAttributes.Selected(true);
            break;
        default:
            tabInfo.Selected(true);
            break;
    }

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new TabStripCreated(x, "order-edit", this.Html, this.Model));
})


}
@Html.DeleteConfirmation("order-delete")
@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function () {
            toggleOrderTotals(false);
            toggleCC(false);
            toggleDD(false);
            //toggleIban(false);
        });

        function toggleOrderTotals(editmode) {
            if (editmode) {
                $('#trEditOrderTotals').show();
                $('#btnEditOrderTotals').hide();
                $('#btnSaveOrderTotals').show();
                $('#btnCancelOrderTotals').show();
            }
            else {
                $('#trEditOrderTotals').hide();
                $('#btnEditOrderTotals').show();
                $('#btnSaveOrderTotals').hide();
                $('#btnCancelOrderTotals').hide();
            }
        }

        function toggleCC(editmode) {
            if (editmode) {
                $('#lblCardType').hide();
                $('#@Html.FieldIdFor(model => model.CardType)').show();
                $('#lblCardName').hide();
                $('#@Html.FieldIdFor(model => model.CardName)').show();
                $('#lblCardNumber').hide();
                $('#@Html.FieldIdFor(model => model.CardNumber)').show();
                $('#lblCardCvv2').hide();
                $('#@Html.FieldIdFor(model => model.CardCvv2)').show();
                $('#lblCardExpirationMonth').hide();
                $('#@Html.FieldIdFor(model => model.CardExpirationMonth)').show();
                $('#lblCardExpirationYear').hide();
                $('#@Html.FieldIdFor(model => model.CardExpirationYear)').show();
                $('#btnEditCC').hide();
                $('#btnSaveCC').show();
                $('#btnCancelCC').show();
            }
            else {
                $('#lblCardType').show();
                $('#@Html.FieldIdFor(model => model.CardType)').hide();
                $('#lblCardName').show();
                $('#@Html.FieldIdFor(model => model.CardName)').hide();
                $('#lblCardNumber').show();
                $('#@Html.FieldIdFor(model => model.CardNumber)').hide();
                $('#lblCardCvv2').show();
                $('#@Html.FieldIdFor(model => model.CardCvv2)').hide();
                $('#lblCardExpirationMonth').show();
                $('#@Html.FieldIdFor(model => model.CardExpirationMonth)').hide();
                $('#lblCardExpirationYear').show();
                $('#@Html.FieldIdFor(model => model.CardExpirationYear)').hide();
                $('#btnEditCC').show();
                $('#btnSaveCC').hide();
                $('#btnCancelCC').hide();
            }
        }

        //codehint: sm-add
        function toggleDD(editmode) {
            if (editmode) {
                $('#lblDirectDebitAccountHolder').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitAccountHolder)').show();
                $('#lblDirectDebitAccountNumber').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitAccountNumber)').show();
                $('#lblDirectDebitBankCode').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitBankCode)').show();
                $('#lblDirectDebitBankName').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitBankName)').show();
                $('#lblDirectDebitBIC').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitBIC)').show();
                $('#lblDirectDebitCountry').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitCountry)').show();
                $('#lblDirectDebitIban').hide();
                $('#@Html.FieldIdFor(model => model.DirectDebitIban)').show();

                $('#btnEditDD').hide();
                $('#btnSaveDD').show();
                $('#btnCancelDD').show();
            }
            else {
                $('#lblDirectDebitAccountHolder').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitAccountHolder)').hide();
                $('#lblDirectDebitAccountNumber').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitAccountNumber)').hide();
                $('#lblDirectDebitBankCode').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitBankCode)').hide();
                $('#lblDirectDebitBankName').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitBankName)').hide();
                $('#lblDirectDebitBIC').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitBIC)').hide();
                $('#lblDirectDebitCountry').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitCountry)').hide();
                $('#lblDirectDebitIban').show();
                $('#@Html.FieldIdFor(model => model.DirectDebitIban)').hide();

                $('#btnEditDD').show();
                $('#btnSaveDD').hide();
                $('#btnCancelDD').hide();
            }
        }

    </script>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OrderStatus)
            </td>
            <td class="adminData">
                <b> @Model.OrderStatus</b>&nbsp;
                @if (Model.CanCancelOrder)
                {
                    <input type="submit" name="cancelorder" value="@T("Admin.Orders.Fields.OrderStatus.Cancel")" id="cancelorder" class="btn btn-danger" onclick="return confirm('@T("Admin.Common.AreYouSure")');"  />
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OrderNumber)
            </td>
            <td class="adminData">
                @Model.OrderNumber
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OrderGuid)
            </td>
            <td class="adminData">
                @Model.OrderGuid
            </td>
        </tr>
       <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.StoreName)
            </td>
            <td class="adminData">
                @Model.StoreName
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CustomerId)
            </td>
            <td class="adminData">
                <a href="@Url.Action("Edit", "Customer", new { id = Model.CustomerId })">@T("Admin.Common.View")</a>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CustomerIp)
            </td>
            <td class="adminData">
                @Model.CustomerIp
            </td>
        </tr>
        @if (Model.RecurringPaymentId > 0)
        {
	        <tr>
	            <td class="adminTitle">
	                @Html.SmartLabelFor(model => model.RecurringPaymentId)
	            </td>
	            <td class="adminData">
	                <a href="@Url.Action("Edit", "RecurringPayment", new { id = Model.RecurringPaymentId })">@T("Admin.Common.View")</a>
	            </td>
	        </tr>
        }
        @if (!String.IsNullOrEmpty(Model.VatNumber))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.VatNumber)
                </td>
                <td class="adminData">
                    @Model.VatNumber
                </td>
            </tr>
        }        
    @if (Model.AffiliateId.HasValue && Model.AffiliateId.Value > 0)
    {
    <tr>
        <td class="adminTitle">
            @Html.SmartLabelFor(model => model.AffiliateId)
        </td>
        <td class="adminData">
            <a href="@Url.Action("Edit", "Affiliate", new { id = Model.AffiliateId.Value })">@Model.AffiliateId.Value - @T("Admin.Common.View")</a>
        </td>
    </tr>
    }
        @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderSubtotalInclTax)
                </td>
                <td class="adminData">
                    @Model.OrderSubtotalInclTax
                </td>
            </tr>
        }
        @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderSubtotalExclTax)
                </td>
                <td class="adminData">
                    @Model.OrderSubtotalExclTax
                </td>
            </tr>
        }
        @if ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
                        && !String.IsNullOrEmpty(Model.OrderSubTotalDiscountInclTax))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderSubTotalDiscountInclTax)
                </td>
                <td class="adminData">
                    @Model.OrderSubTotalDiscountInclTax
                </td>
            </tr>
        }
        @if ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
                        && !String.IsNullOrEmpty(Model.OrderSubTotalDiscountExclTax))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderSubTotalDiscountExclTax)
                </td>
                <td class="adminData">
                    @Model.OrderSubTotalDiscountExclTax
                </td>
            </tr>
        }
        @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderShippingInclTax)
                </td>
                <td class="adminData">
                    @Model.OrderShippingInclTax
                </td>
            </tr>
        }
        @if (Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderShippingExclTax)
                </td>
                <td class="adminData">
                    @Model.OrderShippingExclTax
                </td>
            </tr>
        }
        @if ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.IncludingTax)
                        && !String.IsNullOrEmpty(Model.PaymentMethodAdditionalFeeInclTax))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.PaymentMethodAdditionalFeeInclTax)
                </td>
                <td class="adminData">
                    @Model.PaymentMethodAdditionalFeeInclTax
                </td>
            </tr>
        }
        @if ((Model.AllowCustomersToSelectTaxDisplayType || Model.TaxDisplayType == TaxDisplayType.ExcludingTax)
                        && !String.IsNullOrEmpty(Model.PaymentMethodAdditionalFeeExclTax))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.PaymentMethodAdditionalFeeExclTax)
                </td>
                <td class="adminData">
                    @Model.PaymentMethodAdditionalFeeExclTax
                </td>
            </tr>
        }
        @if (Model.DisplayTaxRates)
        {
            foreach (var tr in Model.TaxRates)
            {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.Tax)
                </td>
                <td class="adminData">
                    @tr.Rate% - @tr.Value
                </td>
            </tr>
            }
        }
        @if (Model.DisplayTax)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.Tax)
                </td>
                <td class="adminData">
                    @Model.Tax
                </td>
            </tr>
        }
        @if (!String.IsNullOrEmpty(Model.OrderTotalDiscount))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.OrderTotalDiscount)
                </td>
                <td class="adminData">
                    @Model.OrderTotalDiscount
                </td>
            </tr>
        }
        @foreach (var gc in Model.GiftCards)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.GiftCards[0].CouponCode) (@(gc.CouponCode))
                </td>
                <td class="adminData">
                    @gc.Amount
                </td>
            </tr>
        }
        @if (Model.RedeemedRewardPoints > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.RedeemedRewardPoints)
                </td>
                <td class="adminData">
                    @Model.RedeemedRewardPoints @T("Admin.Orders.Fields.RedeemedRewardPoints.Points")
                    /
                    @Model.RedeemedRewardPointsAmount
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.OrderTotal)
            </td>
            <td class="adminData">
                @Model.OrderTotal
            </td>
        </tr>
        @if (!String.IsNullOrEmpty(Model.RefundedAmount))
        {            
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.RefundedAmount)
                </td>
                <td class="adminData">
                    @Model.RefundedAmount
                </td>
            </tr>
        }
        <tr id="trEditOrderTotals">
            <td colspan="2">

				@*codehint: sm-edit*@
				<div style="border: 1px solid #e5e5e5; padding: 5px; margin: 5px 0 5px 0;">
					<table class="adminContent">
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.OrderSubtotalInclTaxValue)
						</td>
						<td class="adminData form-horizontal">
							@Html.EditorFor(model => model.OrderSubtotalInclTaxValue)
							<span class="help-inline" style="margin-right:30px;">@T("Admin.Orders.Fields.Edit.InclTax")</span>
							@Html.EditorFor(model => model.OrderSubtotalExclTaxValue)
							<span class="help-inline">@T("Admin.Orders.Fields.Edit.ExclTax")</span>
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.OrderSubTotalDiscountInclTaxValue)
						</td>
						<td class="adminData form-horizontal">
							@Html.EditorFor(model => model.OrderSubTotalDiscountInclTaxValue)
							<span class="help-inline" style="margin-right:30px;">@T("Admin.Orders.Fields.Edit.InclTax")</span>
							@Html.EditorFor(model => model.OrderSubTotalDiscountExclTaxValue)
							<span class="help-inline">@T("Admin.Orders.Fields.Edit.ExclTax")</span>
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.OrderShippingInclTaxValue)
						</td>
						<td class="adminData form-horizontal">
							@Html.EditorFor(model => model.OrderShippingInclTaxValue)
							<span class="help-inline" style="margin-right:30px;">@T("Admin.Orders.Fields.Edit.InclTax")</span>
							@Html.EditorFor(model => model.OrderShippingExclTaxValue)
							<span class="help-inline">@T("Admin.Orders.Fields.Edit.ExclTax")</span>
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.PaymentMethodAdditionalFeeInclTaxValue)
						</td>
						<td class="adminData form-horizontal">
							@Html.EditorFor(model => model.PaymentMethodAdditionalFeeInclTaxValue)
							<span class="help-inline" style="margin-right:30px;">@T("Admin.Orders.Fields.Edit.InclTax")</span>
							@Html.EditorFor(model => model.PaymentMethodAdditionalFeeExclTaxValue)
							<span class="help-inline">@T("Admin.Orders.Fields.Edit.ExclTax")</span>
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.TaxRatesValue)
						</td>
						<td class="adminData">
							@Html.EditorFor(model => model.TaxRatesValue)
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.TaxValue)
						</td>
						<td class="adminData">
							@Html.EditorFor(model => model.TaxValue)
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.OrderTotalDiscountValue)
						</td>
						<td class="adminData">
							@Html.EditorFor(model => model.OrderTotalDiscountValue)
						</td>
					</tr>
					<tr>
						<td class="adminTitle">
							@Html.SmartLabelFor(model => model.OrderTotalValue)
						</td>
						<td class="adminData">
							@Html.EditorFor(model => model.OrderTotalValue)
						</td>
					</tr>
					</table>
				</div>

                @*<table style="border: 1px solid #e5e5e5; padding: 5px;">
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.OrderSubtotalInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.InclTax") @Html.EditorFor(model => model.OrderSubtotalInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.ExclTax") @Html.EditorFor(model => model.OrderSubtotalExclTaxValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.OrderSubTotalDiscountInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.InclTax") @Html.EditorFor(model => model.OrderSubTotalDiscountInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.ExclTax") @Html.EditorFor(model => model.OrderSubTotalDiscountExclTaxValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.OrderShippingInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.InclTax") @Html.EditorFor(model => model.OrderShippingInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.ExclTax") @Html.EditorFor(model => model.OrderShippingExclTaxValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.PaymentMethodAdditionalFeeInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.InclTax") @Html.EditorFor(model => model.PaymentMethodAdditionalFeeInclTaxValue)
                        </td>
                        <td>
                            @T("Admin.Orders.Fields.Edit.ExclTax") @Html.EditorFor(model => model.PaymentMethodAdditionalFeeExclTaxValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.TaxRatesValue)
                        </td>
                        <td colspan="2">
                            @Html.EditorFor(model => model.TaxRatesValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.TaxValue)
                        </td>
                        <td colspan="2">
                            @Html.EditorFor(model => model.TaxValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.OrderTotalDiscountValue)
                        </td>
                        <td colspan="2">
                            @Html.EditorFor(model => model.OrderTotalDiscountValue)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.SmartLabelFor(model => model.OrderTotalValue)
                        </td>
                        <td colspan="2">
                            @Html.EditorFor(model => model.OrderTotalValue)
                        </td>
                    </tr>
                </table>*@

            </td>
        </tr>
        <tr>
            <td>
                <button type="submit" name="btnEditOrderTotals" onclick="toggleOrderTotals(true);return false;" id="btnEditOrderTotals" class="btn" style="margin-top:5px;">
					<i class="icon-edit"></i>&nbsp;@T("Admin.Orders.Fields.EditOrderTotals")
				</button>
                <input type="submit" name="btnSaveOrderTotals" id="btnSaveOrderTotals" value="@T("Admin.Orders.Fields.SaveOrderTotals")" class="btn btn-primary" onclick="return confirm('@T("Admin.Common.AreYouSure")');" />
            </td>
            <td>
                <button type="submit" name="btnCancelOrderTotals" onclick="toggleOrderTotals(false);return false;" id="btnCancelOrderTotals" class="btn">
					<i class="icon-remove"></i>&nbsp;@T("Admin.Orders.Fields.CancelOrderTotals")
				</button>
            </td>
        </tr>
        <tr class="adminSeparator">
            <td colspan="2">
                <hr />
            </td>
        </tr>
        @if (Model.AllowStoringCreditCardNumber)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CardType)
                </td>
                <td class="adminData">
                    <span id="lblCardType">@Model.CardType</span>
                    @Html.EditorFor(model => model.CardType)
                </td>
            </tr>
        }
        @if (Model.AllowStoringCreditCardNumber)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CardName)
                </td>
                <td class="adminData">
                    <span id="lblCardName">@Model.CardName</span>
                    @Html.EditorFor(model => model.CardName)
                </td>
            </tr>
        }
        @if (Model.AllowStoringCreditCardNumber || !String.IsNullOrEmpty(Model.CardNumber))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CardNumber)
                </td>
                <td class="adminData">
                    <span id="lblCardNumber">@Model.CardNumber</span>
                    @Html.EditorFor(model => model.CardNumber)
                </td>
            </tr>
        }
        @if (Model.AllowStoringCreditCardNumber)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CardCvv2)
                </td>
                <td class="adminData">
                    <span id="lblCardCvv2">@Model.CardCvv2</span>
                    @Html.EditorFor(model => model.CardCvv2)
                </td>
            </tr>
        }
        @if (Model.AllowStoringCreditCardNumber)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CardExpirationMonth)
                </td>
                <td class="adminData">
                    <span id="lblCardExpirationMonth">@Model.CardExpirationMonth</span>
                    @Html.EditorFor(model => model.CardExpirationMonth)
                </td>
            </tr>
        }
        @if (Model.AllowStoringCreditCardNumber)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CardExpirationYear)
                </td>
                <td class="adminData">
                    <span id="lblCardExpirationYear">@Model.CardExpirationYear</span>
                    @Html.EditorFor(model => model.CardExpirationYear)
                </td>
            </tr>
        }
        @if (Model.AllowStoringCreditCardNumber)
        {
            <tr>
                <td>
                    <input type="submit" name="btnEditCC" value="@T("Admin.Orders.Fields.EditCC")" onclick="toggleCC(true);return false;" id="btnEditCC" class="btn" />
                    <input type="submit" name="btnSaveCC" value="@T("Admin.Orders.Fields.SaveCC")" id="btnSaveCC" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" />
                </td>
                <td>
                    <input type="submit" name="btnCancelCC" value="@T("Admin.Orders.Fields.CancelCC")" onclick="toggleCC(false);return false;" id="btnCancelCC" class="btn" />
                </td>
            </tr>
        }

        @*codehint: sm-add begin*@
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitAccountHolder)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitAccountHolder">@Model.DirectDebitAccountHolder</span>
                    @Html.EditorFor(model => model.DirectDebitAccountHolder)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitAccountNumber)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitAccountNumber">@Model.DirectDebitAccountNumber</span>
                    @Html.EditorFor(model => model.DirectDebitAccountNumber)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitBankCode)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitBankCode">@Model.DirectDebitBankCode</span>
                    @Html.EditorFor(model => model.DirectDebitBankCode)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitBankName)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitBankName">@Model.DirectDebitBankName</span>
                    @Html.EditorFor(model => model.DirectDebitBankName)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitBIC)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitBIC">@Model.DirectDebitBIC</span>
                    @Html.EditorFor(model => model.DirectDebitBIC)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitCountry)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitCountry">@Model.DirectDebitCountry</span>
                    @Html.EditorFor(model => model.DirectDebitCountry)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.DirectDebitIban)
                </td>
                <td class="adminData">
                    <span id="lblDirectDebitIban">@Model.DirectDebitIban</span>
                    @Html.EditorFor(model => model.DirectDebitIban)
                </td>
            </tr>
        }
        @if (Model.AllowStoringDirectDebit)
        {
            <tr>
                <td>
                    <input type="submit" name="btnEditDD" value="@T("Admin.Orders.Fields.EditDD")" onclick="toggleDD(true);return false;" id="btnEditDD" class="btn" />
                    <input type="submit" name="btnSaveDD" value="@T("Admin.Orders.Fields.SaveDD")" id="btnSaveDD" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")    ');" />
                </td>
                <td>
                    <input type="submit" name="btnCancelDD" value="@T("Admin.Orders.Fields.CancelDD")" onclick="toggleDD(false);return false;" id="btnCancelDD" class="btn" />
                </td>
            </tr>
        }
        
        @*codehint: sm-add end*@

        @if (Model.DisplayPurchaseOrderNumber)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.PurchaseOrderNumber)
                </td>
                <td class="adminData">
                    @Model.PurchaseOrderNumber
                </td>
            </tr>
        }
        @if (!String.IsNullOrEmpty(Model.AuthorizationTransactionId))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.AuthorizationTransactionId)
                </td>
                <td class="adminData">
                    @Model.AuthorizationTransactionId
                </td>
            </tr>
        }
		@*codehint: sm-add*@
        @if (!String.IsNullOrEmpty(Model.AuthorizationTransactionResult))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.AuthorizationTransactionResult)
                </td>
                <td class="adminData">
                    @Model.AuthorizationTransactionResult
                </td>
            </tr>
        }
        @if (!String.IsNullOrEmpty(Model.CaptureTransactionId))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CaptureTransactionId)
                </td>
                <td class="adminData">
                    @Model.CaptureTransactionId
                </td>
            </tr>
        }
		@*codehint: sm-add*@
        @if (!String.IsNullOrEmpty(Model.CaptureTransactionResult))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.CaptureTransactionResult)
                </td>
                <td class="adminData">
                    @Model.CaptureTransactionResult
                </td>
            </tr>
        }
        @if (!String.IsNullOrEmpty(Model.SubscriptionTransactionId))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SmartLabelFor(model => model.SubscriptionTransactionId)
                </td>
                <td class="adminData">
                    @Model.SubscriptionTransactionId
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PaymentMethod)
            </td>
            <td class="adminData">
                @Model.PaymentMethod
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.PaymentStatus)
            </td>
            <td class="adminData">
                @Model.PaymentStatus &nbsp;
                @if (Model.CanCapture)
                {
                    <input type="submit" name="captureorder" value="@T("Admin.Orders.Fields.Capture")" id="captureorder" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" /><text>&nbsp;</text>
                }
                @if (Model.CanMarkOrderAsPaid)
                {
                    <input type="submit" name="markorderaspaid" value="@T("Admin.Orders.Fields.MarkAsPaid")" id="markorderaspaid" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" /><text>&nbsp;</text>
                }
                @if (Model.CanRefund)
                {
                    <input type="submit" name="refundorder" value="@T("Admin.Orders.Fields.Refund")" id="refundorder" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" /><text>&nbsp;</text>
                }
                @if (Model.CanRefundOffline)
                {
                    <input type="submit" name="refundorderoffline" value="@T("Admin.Orders.Fields.RefundOffline")" id="refundorderoffline" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" /><text>&nbsp;</text>
                }
                @if (Model.CanPartiallyRefund)
                {
                    <input type="submit" id="partiallyrefundorder" name="partiallyrefundorder" value="@T("Admin.Orders.Fields.PartialRefund")" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new { id = Model.Id, online = true, btnId = "btnRefreshPage", formId = "order-form" }))', 960, 320, true); return false;" class="btn" /><text>&nbsp;</text>
                }
                @if (Model.CanPartiallyRefundOffline)
                {
                    <input type="submit" id="partiallyrefundorderoffline" name="partiallyrefundorderoffline" value="@T("Admin.Orders.Fields.PartialRefundOffline")" onclick="javascript:OpenWindow('@(Url.Action("PartiallyRefundOrderPopup", "Order", new { id = Model.Id, online = false, btnId = "btnRefreshPage", formId = "order-form" }))', 960, 320, true); return false;" class="btn" /><text>&nbsp;</text>
                }
                @if (Model.CanVoid)
                {
                    <input type="submit" name="voidorder" value="@T("Admin.Orders.Fields.Void")" id="voidorder" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" /><text>&nbsp;</text>
                }
                @if (Model.CanVoidOffline)
                {
                    <input type="submit" name="voidorderoffline" value="@T("Admin.Orders.Fields.VoidOffline")" id="voidorderoffline" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" /><text>&nbsp;</text>
                }
                <script type="text/javascript">
                    $(document).ready(function () {
                        $('#btnRefreshPage').click(function () {
                            //refresh page
                            location.reload();
                        });
                    });
                </script>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.CreatedOn)
            </td>
            <td class="adminData">
                @Html.DisplayFor(model => model.CreatedOn)
            </td>
        </tr>
    </table>
}
@helper TabBillingInfo()
{
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.BillingAddress)
            </td>
            <td class="adminData">
				@*codehint: sm-edit*@
                <div style="border: 1px solid #ccc; padding: 8px 0 8px 0; display: inline-block">
                    <table style="border-spacing: 14px 2px; border-collapse: separate;">
                    @if (Model.BillingAddress.FirstNameEnabled || Model.BillingAddress.LastNameEnabled)
                    {
                        <tr>
                            <td>
                                @T("Admin.Orders.Address.FullName")
                            </td>
                            <td>
                                @Model.BillingAddress.FirstName @Model.BillingAddress.LastName
                            </td>
                        </tr>
                    }
                    @if (Model.BillingAddress.EmailEnabled)
                    {
                        <tr>
                            <td>
                                @T("Admin.Orders.Address.Email")
                            </td>
                            <td>
                                @Model.BillingAddress.Email
                            </td>
                        </tr>
                    }
                    @if (Model.BillingAddress.PhoneEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Phone")
                        </td>
                        <td>
                            @Model.BillingAddress.PhoneNumber
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.FaxEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Fax")
                        </td>
                        <td>
                            @Model.BillingAddress.FaxNumber
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.CompanyEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Company")
                        </td>
                        <td>
                            @Model.BillingAddress.Company
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.StreetAddressEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Address1")
                        </td>
                        <td>
                            @Model.BillingAddress.Address1
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.StreetAddress2Enabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Address2")
                        </td>
                        <td>
                            @Model.BillingAddress.Address2
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.CityEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.City")
                        </td>
                        <td>
                            @Model.BillingAddress.City
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.StateProvinceEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.StateProvince")
                        </td>
                        <td>
                            @Model.BillingAddress.StateProvinceName
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.ZipPostalCodeEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.ZipPostalCode")
                        </td>
                        <td>
                            @Model.BillingAddress.ZipPostalCode
                        </td>
                    </tr>
                    }
                    @if (Model.BillingAddress.CountryEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Country")
                        </td>
                        <td>
                            @Model.BillingAddress.CountryName
                        </td>
                    </tr>
                    }
                    <tr>
                        <td colspan="2" style="padding-top: 8px;">
                            <a href="@Url.Action("AddressEdit", new { addressId = Model.BillingAddress.Id, orderId = Model.Id })" class="btn"><i class="icon-pencil"></i>&nbsp;@T("Admin.Common.Edit")</a>
                        </td>
                    </tr>
                </table>
                </div>
            </td>
        </tr>
    </table>
}
@helper TabShippingInfo()
{
    if (Model.IsShippable && Model.ShippingAddress != null)
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShippingAddress)
            </td>
            <td class="adminData">
				@*codehint: sm-edit*@
                <div style="border: 1px solid #ccc; padding: 8px 0 8px 0; display: inline-block">
                    <table style="border-spacing: 14px 2px; border-collapse: separate;">
                    @if (Model.ShippingAddress.FirstNameEnabled || Model.ShippingAddress.LastNameEnabled)
                    {
                        <tr>
                            <td>
                                @T("Admin.Orders.Address.FullName")
                            </td>
                            <td>
                                @Model.ShippingAddress.FirstName @Model.ShippingAddress.LastName
                            </td>
                        </tr>
                    }
                    @if (Model.ShippingAddress.EmailEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Email"):
                        </td>
                        <td>
                            @Model.ShippingAddress.Email
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.PhoneEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Phone")
                        </td>
                        <td>
                            @Model.ShippingAddress.PhoneNumber
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.FaxEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Fax")
                        </td>
                        <td>
                            @Model.ShippingAddress.FaxNumber
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.CompanyEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Company")
                        </td>
                        <td>
                            @Model.ShippingAddress.Company
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.StreetAddressEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Address1")
                        </td>
                        <td>
                            @Model.ShippingAddress.Address1
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.StreetAddress2Enabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.Address2")
                        </td>
                        <td>
                            @Model.ShippingAddress.Address2
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.CityEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.City")
                        </td>
                        <td>
                            @Model.ShippingAddress.City
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.StateProvinceEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.StateProvince")
                        </td>
                        <td>
                            @Model.ShippingAddress.StateProvinceName
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.ZipPostalCodeEnabled)
                    {
                    <tr>
                        <td>
                            @T("Admin.Orders.Address.ZipPostalCode")
                        </td>
                        <td>
                            @Model.ShippingAddress.ZipPostalCode
                        </td>
                    </tr>
                    }
                    @if (Model.ShippingAddress.CountryEnabled)
                    {
                        <tr>
                            <td>
                                @T("Admin.Orders.Address.Country")
                            </td>
                            <td>
                                @Model.ShippingAddress.CountryName
                            </td>
                        </tr>
                    }
                    <tr>
                        <td colspan="2" style="padding-top: 8px;">
                            <a href="@Url.Action("AddressEdit", new { addressId = Model.ShippingAddress.Id, orderId = Model.Id })" class="btn"><i class="icon-pencil"></i>&nbsp;@T("Admin.Common.Edit")</a>
                        </td>
                    </tr>
                </table>
                </div>
                <div style="padding-top: 15px;">
                    <img alt="google maps" src="@Url.Content("~/Administration/Content/images/google-maps.gif")" />
                    <a href="@Html.Raw(Model.ShippingAddressGoogleMapsUrl)" target="_blank">@T("Admin.Orders.Fields.ShippingAddress.ViewOnGoogleMaps")</a>
                </div>
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShippingMethod)
            </td>
            <td class="adminData">
                @Model.ShippingMethod
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.ShippingStatus)
            </td>
            <td class="adminData">
                @Model.ShippingStatus
            </td>
        </tr>
    </table>
        
    <div class="clear">
    </div>    
    <p>
        <strong>
            @T("Admin.Orders.Shipments")
        </strong>
    </p>
    <div class="clear">
    </div>  
        <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<ShipmentModel>().Name("shipments-grid")
                .DataBinding(binding =>
                {
                    binding.Ajax().Select("ShipmentsSelect", "Order", new { orderId = Model.Id });
                })
                .Columns(columns =>
                {
                    columns.Bound(x => x.Id).Width(50);
                    columns.Bound(x => x.TrackingNumber);
                    columns.Bound(x => x.TotalWeight);
                    columns.Bound(x => x.ShippedDate);
                    columns.Bound(x => x.DeliveryDate);
                    columns.Bound(x => x.Id)
                        .Template(x => Html.ActionLink(T("Admin.Common.View").Text, "ShipmentDetails", "Order", new { id = x.Id }, new { }))
                        .ClientTemplate("<a href=\"" + @Url.Content("~/Admin/Order/ShipmentDetails/") + "<#= Id #>\">" + T("Admin.Common.View").Text + "</a>")
                        .Width(50)
                        .Centered()
                        .HeaderTemplate(T("Admin.Common.View").Text);
                })
                .EnableCustomBinding(true))
            </td>
        </tr>
        @if (Model.CanAddNewShipments)
        {
            <tr>
                <td class="adminData">
                    <input type="submit" id="btnAddNewShipment" name="btnAddNewShipment" value="@T("Admin.Orders.Shipments.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddShipment", "Order", new { orderId = Model.Id }))'); return false;" class="btn" />
                </td>
            </tr>
        }
    </table>
    }
    else
    {
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
            </td>
            <td class="adminData">
                @T("Admin.Orders.ShippingInfo.NotRequired")
            </td>
        </tr>
    </table>
    }
}
@helper TabProducts()
{
    <table class="adminContent">
        <tr>
            <td class="adminData">
                @foreach (var item in Model.Items)
                {
                    <script type="text/javascript">
        $(document).ready(function() {
        toggleOpvEdit@(item.Id)(false);
        });
                    </script>
        
                    <script type="text/javascript">
        function toggleOpvEdit@(item.Id) (editMode) {
        if (editMode) {
        $('#pnlEditPvUnitPrice@(item.Id)').show();
        $('#pnlEditPvQuantity@(item.Id)').show();
        $('#pnlEditPvDiscount@(item.Id)').show();
        $('#pnlEditPvPrice@(item.Id)').show();
        $('#btnEditOpv@(item.Id)').hide();
        $('#btnDeleteOpv@(item.Id)').hide();
        $('#btnSaveOpv@(item.Id)').show();
        $('#btnCancelOpv@(item.Id)').show();
        }
        else {
        $('#pnlEditPvUnitPrice@(item.Id)').hide();
        $('#pnlEditPvQuantity@(item.Id)').hide();
        $('#pnlEditPvDiscount@(item.Id)').hide();
        $('#pnlEditPvPrice@(item.Id)').hide();
        $('#btnEditOpv@(item.Id)').show();
        $('#btnDeleteOpv@(item.Id)').show();
        $('#btnSaveOpv@(item.Id)').hide();
        $('#btnCancelOpv@(item.Id)').hide();
        }
        }
                    </script>

                }
                <table class="table table-bordered table-striped table-hover">
                    <thead>
                        <tr style="background-color: #666; color: #fff">
                            <th>
                                @T("Admin.Orders.Products.ProductName")
                            </th>
                            @if (Model.HasDownloadableProducts)
                            {
                                <th>
                                    @T("Admin.Orders.Products.Download")
                                </th>
                            }
                            <th>
                                @T("Admin.Orders.Products.Price")
                            </th>
                            <th>
                                @T("Admin.Orders.Products.Quantity")
                            </th>
                            <th>
                                @T("Admin.Orders.Products.Discount")
                            </th>
                            <th>
                                @T("Admin.Orders.Products.Total")
                            </th>
                            <th>
                                @T("Admin.Common.Edit")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                <td style="width: 25%;">
                                    <div>
                                        <a href="@Url.Action("Edit", "ProductVariant", new { id = item.ProductVariantId })">@item.FullProductName</a>
                                        @if (!String.IsNullOrEmpty(item.AttributeInfo))
                                        {
                                            <br />
                                            @Html.Raw(item.AttributeInfo)
                                        }
                                        @if (!String.IsNullOrEmpty(item.RecurringInfo))
                                        {
                                            <br />
                                            @Html.Raw(item.RecurringInfo)
                                        }
                                        @if (!String.IsNullOrEmpty(item.Sku))
                                        {
                                            <br />
                                            <strong>@T("Admin.Orders.Products.SKU")</strong><text>:</text>
                                            @item.Sku
                                        }
                                        @if (item.ReturnRequestIds.Count > 0)
                                        {
                                            <br />
                                            <br />
                                            <hr />
                                            @T("Admin.Orders.Products.ReturnRequests")<text>:</text>
                                            for (int i = 0; i < item.ReturnRequestIds.Count; i++)
                                            {
                                                <a href="@Url.Action("Edit", "ReturnRequest", new { id = item.ReturnRequestIds[i] })">@item.ReturnRequestIds[i]</a>
                                                if (i != item.ReturnRequestIds.Count - 1)
                                                {
                                                    <text>,</text>
                                                }
                                            }
                                        }
                                        @if (item.PurchasedGiftCardIds.Count > 0)
                                        {
                                            <br />
                                            <br />
                                            <hr />
                                            @T("Admin.Orders.Products.GiftCards")<text>:</text>
                                            for (int i = 0; i < item.PurchasedGiftCardIds.Count; i++)
                                            {
                                                <a href="@Url.Action("Edit", "GiftCard", new { id = item.PurchasedGiftCardIds[i] })">@item.PurchasedGiftCardIds[i]</a>
                                                if (i != item.PurchasedGiftCardIds.Count - 1)
                                                {
                                                    <text>,</text>
                                                }
                                            }
                                        }
                                    </div>
                                </td>
                                @if (Model.HasDownloadableProducts)
                                {
                                    <td align="center" style="width: 10%;">
                                        @if (item.IsDownload)
                                        {
                                            <div>
                                                @string.Format(T("Admin.Orders.Products.Download.DownloadCount").Text, item.DownloadCount) 
                                                <input type="submit" name="btnResetDownloadCount@(item.Id)" value="@T("Admin.Orders.Products.Download.ResetDownloadCount")" title="@T("Admin.Orders.Products.Download.ResetDownloadCount.Title")" id="btnResetDownloadCount@(item.Id)" class="btn" />
                                                <hr />  
                                            </div>
                                            if (item.DownloadActivationType == DownloadActivationType.Manually)
                                            {
                                            <div>
                                                <input type="submit" name="btnPvActivateDownload@(item.Id)" @(item.IsDownloadActivated ? " value=" + T("Admin.Orders.Products.Download.Deactivate") : " value=" + T("Admin.Orders.Products.Download.Activate")) id="btnPvActivateDownload@(item.Id)" class="btn" />                                                
                                                <hr />
                                            </div>
                                            }
                                            <div>
                                                <b>
                                                    @T("Admin.Orders.Products.License")</b>
                                                <br />
                                                @if (item.LicenseDownloadId.HasValue && item.LicenseDownloadId.Value > 0)
                                                {
                                                    <a href="@Url.Action("DownloadFile", "Download", new { downloadId = item.LicenseDownloadId.Value })">@T("Admin.Orders.Products.License.DownloadLicense")</a>
                                                }
                                                <br />
                                                <input type="submit" id="pvlicensefile" name="pvlicensefile" value="@T("Admin.Orders.Products.License.UploadFile")" onclick="javascript:OpenWindow('@(Url.Action("UploadLicenseFilePopup", "Order", new { id = Model.Id, opvId = item.Id, btnId = "btnRefreshPage", formId = "order-form" }))', 500, 300, true); return false;" class="btn" />
                                            </div>
                                        }
                                    </td>
                                }
                                <td align="center" style="width: 15%;">
                                    @if (Model.AllowCustomersToSelectTaxDisplayType)
                                    {
                                        @item.UnitPriceInclTax
                                        <br />
                                        @item.UnitPriceExclTax
                                    }
                                    else
                                    {
                                        switch (Model.TaxDisplayType)
                                        {
                                            case TaxDisplayType.ExcludingTax:
                                                {
                                        @item.UnitPriceExclTax
                                                }
                                                break;
                                            case TaxDisplayType.IncludingTax:
                                                {
                                        @item.UnitPriceInclTax
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }

                                    <div id="pnlEditPvUnitPrice@(item.Id)">
                                        <table class="order-edit">
                                            <tr>
                                                <td>
                                                    @T("Admin.Orders.Products.Edit.InclTax")
                                                </td>
                                                <td>
                                                    <input name="pvUnitPriceInclTax@(item.Id)" type="text" value="@item.UnitPriceInclTaxValue" id="pvUnitPriceInclTax@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    @T("Admin.Orders.Products.Edit.ExclTax")
                                                </td>
                                                <td>
                                                    <input name="pvUnitPriceExclTax@(item.Id)" type="text" value="@item.UnitPriceExclTaxValue" id="pvUnitPriceExclTax@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </td>
                                <td align="center" style="width: 10%;">
                                    @item.Quantity

                                    <div id="pnlEditPvQuantity@(item.Id)">
                                        <table class="order-edit">
                                            <tr>
                                                <td colspan="2">
                                                    <input name="pvQuantity@(item.Id)" type="text" value="@item.Quantity" id="pvQuantity@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </td>
                                <td align="center" style="width: 15%;">
                                    @if (Model.AllowCustomersToSelectTaxDisplayType)
                                    {
                                        @item.DiscountInclTax
                                        <br />
                                        @item.DiscountExclTax
                                    }
                                    else
                                    {
                                        switch (Model.TaxDisplayType)
                                        {
                                            case TaxDisplayType.ExcludingTax:
                                                {
                                        @item.DiscountExclTax
                                                }
                                                break;
                                            case TaxDisplayType.IncludingTax:
                                                {
                                        @item.DiscountInclTax
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    <div class="clear">
                                    </div>
                                    <div id="pnlEditPvDiscount@(item.Id)">
                                        <table class="order-edit">
                                            <tr>
                                                <td>
                                                    @T("Admin.Orders.Products.Edit.InclTax")
                                                </td>
                                                <td>
                                                    <input name="pvDiscountInclTax@(item.Id)" type="text" value="@item.DiscountInclTaxValue" id="pvDiscountInclTax@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    @T("Admin.Orders.Products.Edit.ExclTax")
                                                </td>
                                                <td>
                                                    <input name="pvDiscountExclTax@(item.Id)" type="text" value="@item.DiscountExclTaxValue" id="pvDiscountExclTax@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </td>
                                <td align="center" style="width: 15%;">
                                    @if (Model.AllowCustomersToSelectTaxDisplayType)
                                    {
                                        @item.SubTotalInclTax
                                        <br />
                                        @item.SubTotalExclTax
                                    }
                                    else
                                    {
                                        switch (Model.TaxDisplayType)
                                        {
                                            case TaxDisplayType.ExcludingTax:
                                                {
                                        @item.SubTotalExclTax
                                                }
                                                break;
                                            case TaxDisplayType.IncludingTax:
                                                {
                                        @item.SubTotalInclTax
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    <div class="clear">
                                    </div>
                                    <div id="pnlEditPvPrice@(item.Id)">
                                        <table class="order-edit">
                                            <tr>
                                                <td>
                                                    @T("Admin.Orders.Products.Edit.InclTax")
                                                </td>
                                                <td>
                                                    <input name="pvPriceInclTax@(item.Id)" type="text" value="@item.SubTotalInclTaxValue" id="pvPriceInclTax@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    @T("Admin.Orders.Products.Edit.ExclTax")
                                                </td>
                                                <td>
                                                    <input name="pvPriceExclTax@(item.Id)" type="text" value="@item.SubTotalExclTaxValue" id="pvPriceExclTax@(item.Id)" style="width:100px;" />
                                                </td>
                                            </tr>
                                        </table>
                                    </div>
                                </td>
                                <td align="center" style="width: 15%;">
                                    <input type="submit" name="btnEditOpv@(item.Id)" value="@T("Admin.Common.Edit")" onclick="toggleOpvEdit@(item.Id)(true);return false;" id="btnEditOpv@(item.Id)" class="btn" />
                                    <input type="submit" name="btnDeleteOpv@(item.Id)" value="@T("Admin.Common.Delete")" id="btnDeleteOpv@(item.Id)" class="btn" onclick="return confirm('@T("Admin.Common.AreYouSure")');" />
                                    <input type="submit" name="btnSaveOpv@(item.Id)" value="@T("Admin.Common.Save")" id="btnSaveOpv@(item.Id)" class="btn" style="display: none;" onclick="return confirm('@T("Admin.Common.AreYouSure")');" />
                                    <input type="submit" name="btnCancelOpv@(item.Id)" value="@T("Admin.Common.Cancel")" onclick="toggleOpvEdit@(item.Id)(false);return false;" id="btnCancelOpv@(item.Id)" class="btn" style="display: none;" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
        @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
        {
            <tr>
                <td class="adminData">
                    <div class="well checkout-attributes">
                        @Html.Raw(Model.CheckoutAttributeInfo)
                    </div>
                </td>
            </tr>
        }
        <tr>
            <td class="adminData">
                <input type="submit" id="btnAddNewProduct" name="btnAddNewProduct" value="@T("Admin.Orders.Products.AddNew")" onclick="javascript:setLocation('@(Url.Action("AddProductToOrder", "Order", new { orderId = Model.Id }))'); return false;" class="btn" />
            </td>
        </tr>
    </table>
}
@helper TabOrderNotes()
{
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<OrderModel.OrderNote>().Name("ordernotes-grid")
        .DataKeys(keys =>
        {
            keys.Add(x => x.Id).RouteKey("orderNoteId");
            keys.Add(x => x.OrderId).RouteKey("orderId");
        })
        .DataBinding(binding =>
        {
            binding.Ajax().Select("OrderNotesSelect", "Order", new { orderId = Model.Id })
                .Delete("OrderNoteDelete", "Order");
        })
        .Columns(columns =>
        {
            columns.Bound(x => x.CreatedOn).Width(100);
            columns.Bound(x => x.Note).Encoded(false).Width(500);
            columns.Bound(x => x.DisplayToCustomer)
                .Template(item => @Html.SymbolForBool(item.DisplayToCustomer))
                .ClientTemplate(@Html.SymbolForBool("DisplayToCustomer"))
                .Width(100);
            columns.Command(commands =>
            {
                commands.Delete().Localize(T);
            }).Width(180).Title(T("Admin.Common.Delete").Text);
        })
        .EnableCustomBinding(true))
            </td>
        </tr>
    </table>  
    <p style="margin-top:14px;">
        <strong>
            @T("Admin.Orders.OrderNotes.AddTitle")
        </strong>
    </p>
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddOrderNoteMessage)
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AddOrderNoteMessage, new { style = "Width: 350px; Height: 150px;" })
                @Html.ValidationMessageFor(model => model.AddOrderNoteMessage)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SmartLabelFor(model => model.AddOrderNoteDisplayToCustomer)
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.AddOrderNoteDisplayToCustomer)
                @Html.ValidationMessageFor(model => model.AddOrderNoteDisplayToCustomer)
            </td>
        </tr>
        <tr>
            <td>&nbsp;</td>
            <td align="left">
                <button type="button" name="addOrderNote" id="addOrderNote" class="btn"><i class="icon-plus icon-white"></i>
                    @T("Admin.Orders.OrderNotes.AddButton")</button>
            </td>
        </tr>
    </table>
    
    <script type="text/javascript">
        $(document).ready(function () {
            $('#addOrderNote').click(function () {
                var orderNoteMessage = $("#@Html.FieldIdFor(model => model.AddOrderNoteMessage)").val();
                var orderNoteDisplayToCustomer = $("#@Html.FieldIdFor(model => model.AddOrderNoteDisplayToCustomer)").is(':checked');
                $('#addOrderNote').attr('disabled', true);
                $.ajax({
                    cache:false,
                    type: "POST",
                    url: "@(Url.Action("OrderNoteAdd", "Order"))",
                    data: { "DisplayToCustomer": orderNoteDisplayToCustomer, "message": orderNoteMessage, "orderId": @Model.Id },
                    success: function (data) {
                         var ordernotesGrid = $("#ordernotes-grid");
                         ordernotesGrid.data('tGrid').ajaxRequest();
                         $('#addOrderNote').attr('disabled', false);
                    },
                    error:function (xhr, ajaxOptions, thrownError){
                        alert('Failed to add order note.')
                        $('#addOrderNote').attr('disabled', false);
                    }  
                });
            });
        });
    </script>
}

@helper TabOrderAttributes()
{
    @Html.Action("GenericAttributes", "Common", new { entityName = "Order", entityId = Model.Id })
}
